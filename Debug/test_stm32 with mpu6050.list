
test_stm32 with mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08007500  08007500  00017500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800796c  0800796c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800796c  0800796c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800796c  0800796c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800796c  0800796c  0001796c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007978  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001e8  08007b60  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08007b60  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c855  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4d  00000000  00000000  0002caa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007dd  00000000  00000000  0002f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005b33  00000000  00000000  0002faf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddc7  00000000  00000000  00035628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e03  00000000  00000000  000433ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c30  00000000  00000000  000cd1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d0e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080074e4 	.word	0x080074e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080074e4 	.word	0x080074e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <_ZN7initI2C12MX_I2C1_InitEv>:
#include "i2c.h"

I2C_HandleTypeDef hi2c1;

void initI2C::MX_I2C1_Init()
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	hi2c1.Instance = I2C1;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <_ZN7initI2C12MX_I2C1_InitEv+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <_ZN7initI2C12MX_I2C1_InitEv+0x6c>)
 8000f56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <_ZN7initI2C12MX_I2C1_InitEv+0x64>)
 8000f86:	f001 faab 	bl	80024e0 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bf14      	ite	ne
 8000f90:	2301      	movne	r3, #1
 8000f92:	2300      	moveq	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <_ZN7initI2C12MX_I2C1_InitEv+0x5a>
	{
	  Error_Handler();
 8000f9a:	f000 f9c1 	bl	8001320 <Error_Handler>
	}
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000204 	.word	0x20000204
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	00061a80 	.word	0x00061a80

08000fb4 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef>:

void initI2C::HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0310 	add.w	r3, r7, #16
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
	if(i2cHandle->Instance==I2C1)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a16      	ldr	r2, [pc, #88]	; (800102c <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x78>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d125      	bne.n	8001022 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x6e>
	{
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		PB6     ------> I2C1_SCL
		PB7     ------> I2C1_SDA
		*/
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fee:	23c0      	movs	r3, #192	; 0xc0
 8000ff0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61fb      	str	r3, [r7, #28]
		//GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x80>)
 8001006:	f001 f8e7 	bl	80021d8 <HAL_GPIO_Init>


		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 8001010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef+0x7c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]

	}
}
 8001022:	bf00      	nop
 8001024:	3720      	adds	r7, #32
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40005400 	.word	0x40005400
 8001030:	40021000 	.word	0x40021000
 8001034:	40010c00 	.word	0x40010c00

08001038 <_Z18MPU6050_Soft_Resetv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Hàm reset mềm MPU6050
void MPU6050_Soft_Reset(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
    uint8_t Data = 0x80; // Giá trị reset mềm
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &Data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	226b      	movs	r2, #107	; 0x6b
 8001054:	21d0      	movs	r1, #208	; 0xd0
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <_Z18MPU6050_Soft_Resetv+0x34>)
 8001058:	f001 fb86 	bl	8002768 <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Đợi MPU6050 khởi động lại
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f000 ffb3 	bl	8001fc8 <HAL_Delay>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000204 	.word	0x20000204

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001074:	b0c2      	sub	sp, #264	; 0x108
 8001076:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001078:	f000 ff44 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107c:	f000 f870 	bl	8001160 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001080:	f000 f920 	bl	80012c4 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8001084:	f000 f8bc 	bl	8001200 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8001088:	f000 f8ee 	bl	8001268 <_ZL19MX_USART1_UART_Initv>
  _i2c.HAL_I2C_MspInit(&hi2c1);
 800108c:	492f      	ldr	r1, [pc, #188]	; (800114c <main+0xdc>)
 800108e:	4830      	ldr	r0, [pc, #192]	; (8001150 <main+0xe0>)
 8001090:	f7ff ff90 	bl	8000fb4 <_ZN7initI2C15HAL_I2C_MspInitEP17I2C_HandleTypeDef>
  _i2c.MX_I2C1_Init();
 8001094:	482e      	ldr	r0, [pc, #184]	; (8001150 <main+0xe0>)
 8001096:	f7ff ff55 	bl	8000f44 <_ZN7initI2C12MX_I2C1_InitEv>
  MPU6050_Soft_Reset();
 800109a:	f7ff ffcd 	bl	8001038 <_Z18MPU6050_Soft_Resetv>
  /* USER CODE BEGIN 2 */
  MPU6050_t MPU6050;
  //MPU6050_t *data;
  while (_mpu.MPU6050_Init(&hi2c1) == 1);
 800109e:	bf00      	nop
 80010a0:	492a      	ldr	r1, [pc, #168]	; (800114c <main+0xdc>)
 80010a2:	482c      	ldr	r0, [pc, #176]	; (8001154 <main+0xe4>)
 80010a4:	f000 f98c 	bl	80013c0 <_ZN7mpu605012MPU6050_InitEP17I2C_HandleTypeDef>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f3      	bne.n	80010a0 <main+0x30>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _mpu.MPU6050_Read_All(&hi2c1, &MPU6050);
 80010b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010bc:	461a      	mov	r2, r3
 80010be:	4923      	ldr	r1, [pc, #140]	; (800114c <main+0xdc>)
 80010c0:	4824      	ldr	r0, [pc, #144]	; (8001154 <main+0xe4>)
 80010c2:	f000 fa11 	bl	80014e8 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t>
//	  cnt+=1;
//	  cnt2+=1;
	  sprintf(buffer,"Ax= %.2f  Ay:= %.2f  Az:= %.2f  Gx:= %.2f  Gy:= %.2f  Gz:= %.2f  Temperature:= %.2f\n",MPU6050.Ax,MPU6050.Ay,MPU6050.Az,MPU6050.Gx,MPU6050.Gy,MPU6050.Gz,MPU6050.Temperature);
 80010c6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80010ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80010ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80010d2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 80010d6:	e9d7 ab2a 	ldrd	sl, fp, [r7, #168]	; 0xa8
 80010da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80010de:	e9c7 1202 	strd	r1, r2, [r7, #8]
 80010e2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80010e6:	e9c7 0100 	strd	r0, r1, [r7]
 80010ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f99a 	bl	8000428 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	f107 001c 	add.w	r0, r7, #28
 80010fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001104:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001108:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800110c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001110:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001114:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001118:	e9cd 4500 	strd	r4, r5, [sp]
 800111c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <main+0xe8>)
 8001122:	f004 f893 	bl	800524c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f810 	bl	8000150 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	b29a      	uxth	r2, r3
 8001134:	f107 011c 	add.w	r1, r7, #28
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <main+0xec>)
 800113e:	f002 fe89 	bl	8003e54 <HAL_UART_Transmit>
	  HAL_Delay (500);
 8001142:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001146:	f000 ff3f 	bl	8001fc8 <HAL_Delay>
	  _mpu.MPU6050_Read_All(&hi2c1, &MPU6050);
 800114a:	e7b5      	b.n	80010b8 <main+0x48>
 800114c:	20000204 	.word	0x20000204
 8001150:	20000258 	.word	0x20000258
 8001154:	200002a8 	.word	0x200002a8
 8001158:	08007500 	.word	0x08007500
 800115c:	2000025c 	.word	0x2000025c

08001160 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f004 f8cf 	bl	8005312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800119e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f9f3 	bl	8003594 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf14      	ite	ne
 80011b4:	2301      	movne	r3, #1
 80011b6:	2300      	moveq	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80011be:	f000 f8af 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2102      	movs	r1, #2
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fc5b 	bl	8003a98 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80011f2:	f000 f895 	bl	8001320 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3740      	adds	r7, #64	; 0x40
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <_ZL12MX_I2C1_Initv+0x60>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 800120c:	4a15      	ldr	r2, [pc, #84]	; (8001264 <_ZL12MX_I2C1_Initv+0x64>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 800121e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <_ZL12MX_I2C1_Initv+0x5c>)
 800123e:	f001 f94f 	bl	80024e0 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001252:	f000 f865 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000204 	.word	0x20000204
 8001260:	40005400 	.word	0x40005400
 8001264:	00061a80 	.word	0x00061a80

08001268 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <_ZL19MX_USART1_UART_Initv+0x54>)
 80012a0:	f002 fd88 	bl	8003db4 <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80012b4:	f000 f834 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000025c 	.word	0x2000025c
 80012c0:	40013800 	.word	0x40013800

080012c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012d0:	f043 0320 	orr.w	r3, r3, #32
 80012d4:	6193      	str	r3, [r2, #24]
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0320 	and.w	r3, r3, #32
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6193      	str	r3, [r2, #24]
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <_ZL12MX_GPIO_Initv+0x58>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40021000 	.word	0x40021000

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
 800132a:	0000      	movs	r0, r0
 800132c:	0000      	movs	r0, r0
	...

08001330 <_ZN7mpu6050C1Ev>:
#include "mpu6050.h"
#include <math.h>



mpu6050::mpu6050()
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2264      	movs	r2, #100	; 0x64
 800133c:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	a317      	add	r3, pc, #92	; (adr r3, 80013a0 <_ZN7mpu6050C1Ev+0x70>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
{
	kalmanX.Q_angle=0.001f;
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	a316      	add	r3, pc, #88	; (adr r3, 80013a8 <_ZN7mpu6050C1Ev+0x78>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	kalmanX.Q_bias=0.003f;
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	a315      	add	r3, pc, #84	; (adr r3, 80013b0 <_ZN7mpu6050C1Ev+0x80>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	kalmanX.R_measure=0.03f;
 8001364:	6879      	ldr	r1, [r7, #4]
 8001366:	a314      	add	r3, pc, #80	; (adr r3, 80013b8 <_ZN7mpu6050C1Ev+0x88>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	kalmanY.Q_angle=0.001f;
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	a30d      	add	r3, pc, #52	; (adr r3, 80013a8 <_ZN7mpu6050C1Ev+0x78>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	kalmanY.Q_bias=0.003f;
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	a30c      	add	r3, pc, #48	; (adr r3, 80013b0 <_ZN7mpu6050C1Ev+0x80>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	kalmanY.R_measure=0.03f;
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	a30b      	add	r3, pc, #44	; (adr r3, 80013b8 <_ZN7mpu6050C1Ev+0x88>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
}
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40cc2900 	.word	0x40cc2900
 80013a8:	e0000000 	.word	0xe0000000
 80013ac:	3f50624d 	.word	0x3f50624d
 80013b0:	c0000000 	.word	0xc0000000
 80013b4:	3f689374 	.word	0x3f689374
 80013b8:	e0000000 	.word	0xe0000000
 80013bc:	3f9eb851 	.word	0x3f9eb851

080013c0 <_ZN7mpu605012MPU6050_InitEP17I2C_HandleTypeDef>:

uint8_t mpu6050::MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	uint8_t check;
	uint8_t data;

	// check device ID WHO_I_AM

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f107 030f 	add.w	r3, r7, #15
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	2275      	movs	r2, #117	; 0x75
 80013e0:	21d0      	movs	r1, #208	; 0xd0
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f001 faba 	bl	800295c <HAL_I2C_Mem_Read>
	// 0x68 will be returned by the sensor if everything goes well
	if(check==104)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b68      	cmp	r3, #104	; 0x68
 80013ec:	d145      	bne.n	800147a <_ZN7mpu605012MPU6050_InitEP17I2C_HandleTypeDef+0xba>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up

		data=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,PWR_MGMT_1_REG,1,&data,1,i2c_timeout);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	2301      	movs	r3, #1
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	f107 030e 	add.w	r3, r7, #14
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	226b      	movs	r2, #107	; 0x6b
 8001408:	21d0      	movs	r1, #208	; 0xd0
 800140a:	6838      	ldr	r0, [r7, #0]
 800140c:	f001 f9ac 	bl	8002768 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		data = 0x07;
 8001410:	2307      	movs	r3, #7
 8001412:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,SMPLRT_DIV_REG,1,&data,1,i2c_timeout);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2301      	movs	r3, #1
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 030e 	add.w	r3, r7, #14
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	2219      	movs	r2, #25
 800142a:	21d0      	movs	r1, #208	; 0xd0
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	f001 f99b 	bl	8002768 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		data = 0x00;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, i2c_timeout);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 030e 	add.w	r3, r7, #14
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	221c      	movs	r2, #28
 800144c:	21d0      	movs	r1, #208	; 0xd0
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f001 f98a 	bl	8002768 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		data = 0x00;
 8001454:	2300      	movs	r3, #0
 8001456:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx,MPU6050_ADDR,GYRO_CONFIG_REG,1,&data,1,i2c_timeout);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800145e:	9302      	str	r3, [sp, #8]
 8001460:	2301      	movs	r3, #1
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	f107 030e 	add.w	r3, r7, #14
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	221b      	movs	r2, #27
 800146e:	21d0      	movs	r1, #208	; 0xd0
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f001 f979 	bl	8002768 <HAL_I2C_Mem_Write>

		return 0;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <_ZN7mpu605012MPU6050_InitEP17I2C_HandleTypeDef+0xbc>
	}
	return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7fe ffb9 	bl	8000404 <__aeabi_i2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f002 fe5d 	bl	8004158 <sqrt>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7fe ffa3 	bl	8000404 <__aeabi_i2d>
 80014be:	4604      	mov	r4, r0
 80014c0:	460d      	mov	r5, r1
 80014c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ff9c 	bl	8000404 <__aeabi_i2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f002 fe3e 	bl	8004154 <atan2>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
    }
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014e8 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t>:

}


void mpu6050::MPU6050_Read_All(I2C_HandleTypeDef * I2Cx,MPU6050_t *DataStruct)
{
 80014e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ec:	b097      	sub	sp, #92	; 0x5c
 80014ee:	af04      	add	r7, sp, #16
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read(I2Cx,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,Rec_Data,14,i2c_timeout);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	230e      	movs	r3, #14
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	223b      	movs	r2, #59	; 0x3b
 800150c:	21d0      	movs	r1, #208	; 0xd0
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f001 fa24 	bl	800295c <HAL_I2C_Mem_Read>

	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001514:	7c3b      	ldrb	r3, [r7, #16]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21a      	sxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001526:	7cbb      	ldrb	r3, [r7, #18]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001538:	7d3b      	ldrb	r3, [r7, #20]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7d7b      	ldrb	r3, [r7, #21]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	809a      	strh	r2, [r3, #4]

	temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	87fb      	strh	r3, [r7, #62]	; 0x3e
	DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001558:	7e3b      	ldrb	r3, [r7, #24]
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	b21a      	sxth	r2, r3
 800155e:	7e7b      	ldrb	r3, [r7, #25]
 8001560:	b21b      	sxth	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b21a      	sxth	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	841a      	strh	r2, [r3, #32]
	DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800156a:	7ebb      	ldrb	r3, [r7, #26]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7efb      	ldrb	r3, [r7, #27]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800157c:	7f3b      	ldrb	r3, [r7, #28]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7f7b      	ldrb	r3, [r7, #29]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	849a      	strh	r2, [r3, #36]	; 0x24

	DataStruct->Ax = DataStruct->Accel_X_RAW/16384.0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff35 	bl	8000404 <__aeabi_i2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4bb2      	ldr	r3, [pc, #712]	; (8001868 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x380>)
 80015a0:	f7ff f8c4 	bl	800072c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW/16384.0;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff25 	bl	8000404 <__aeabi_i2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4baa      	ldr	r3, [pc, #680]	; (8001868 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x380>)
 80015c0:	f7ff f8b4 	bl	800072c <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	DataStruct->Az = DataStruct->Accel_Z_RAW/Accel_Z_corrector;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ff15 	bl	8000404 <__aeabi_i2d>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
 80015e0:	f7ff f8a4 	bl	800072c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	e9c1 2306 	strd	r2, r3, [r1, #24]

	DataStruct->Temperature = (float) ((int16_t) temp/(float) 340.0 + (float)36.53);
 80015ee:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fb02 	bl	8000bfc <__aeabi_i2f>
 80015f8:	4603      	mov	r3, r0
 80015fa:	499c      	ldr	r1, [pc, #624]	; (800186c <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x384>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc05 	bl	8000e0c <__aeabi_fdiv>
 8001602:	4603      	mov	r3, r0
 8001604:	499a      	ldr	r1, [pc, #616]	; (8001870 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x388>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa44 	bl	8000a94 <__addsf3>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->Gx = DataStruct->Gyro_X_RAW/131.0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fef2 	bl	8000404 <__aeabi_i2d>
 8001620:	a38d      	add	r3, pc, #564	; (adr r3, 8001858 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f881 	bl	800072c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->Gy = DataStruct->Gyro_Y_RAW/131.0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fee2 	bl	8000404 <__aeabi_i2d>
 8001640:	a385      	add	r3, pc, #532	; (adr r3, 8001858 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f871 	bl	800072c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	DataStruct->Gz = DataStruct->Gyro_Z_RAW/131.0;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fed2 	bl	8000404 <__aeabi_i2d>
 8001660:	a37d      	add	r3, pc, #500	; (adr r3, 8001858 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x370>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f7ff f861 	bl	800072c <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	// Kalman angle solve

	double dt = (double)(HAL_GetTick() - timer)/1000;
 8001674:	f000 fc9e 	bl	8001fb4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe feae 	bl	80003e4 <__aeabi_ui2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x38c>)
 800168e:	f7ff f84d 	bl	800072c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	timer = HAL_GetTick();
 800169a:	f000 fc8b 	bl	8001fb4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	double roll;
	double roll_sqrt=sqrt(
			DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	fb03 f202 	mul.w	r2, r3, r2
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016be:	4619      	mov	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
	double roll_sqrt=sqrt(
 80016ca:	4413      	add	r3, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fed9 	bl	8001484 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80016d2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	if(roll_sqrt != 0.0)
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016e2:	f7ff f961 	bl	80009a8 <__aeabi_dcmpeq>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d119      	bne.n	8001720 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x238>
	{
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fe86 	bl	8000404 <__aeabi_i2d>
 80016f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016fc:	f7ff f816 	bl	800072c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f002 fd4a 	bl	80041a0 <atan>
 800170c:	a354      	add	r3, pc, #336	; (adr r3, 8001860 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x378>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe fee1 	bl	80004d8 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800171e:	e005      	b.n	800172c <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x244>

	}
	else
	{
		roll = 0.0;
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	}

	double pitch = atan2(- DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001732:	425a      	negs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f7ff feb5 	bl	80014ac <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001742:	a347      	add	r3, pc, #284	; (adr r3, 8001860 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x378>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe fec6 	bl	80004d8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x390>)
 800175a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800175e:	f7ff f92d 	bl	80009bc <__aeabi_dcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x296>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b42      	ldr	r3, [pc, #264]	; (800187c <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x394>)
 8001774:	f7ff f940 	bl	80009f8 <__aeabi_dcmpgt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d114      	bne.n	80017a8 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x2c0>
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x394>)
 8001784:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001788:	f7ff f936 	bl	80009f8 <__aeabi_dcmpgt>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d015      	beq.n	80017be <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x2d6>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x390>)
 800179e:	f7ff f90d 	bl	80009bc <__aeabi_dcmplt>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x2d6>
	{
		kalmanY.angle=pitch;
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ae:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
		DataStruct->KalmanAngleY = pitch;
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80017bc:	e016      	b.n	80017ec <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x304>
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&kalmanY, pitch, DataStruct->Gy, dt);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f103 06a0 	add.w	r6, r3, #160	; 0xa0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80017ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017d2:	e9cd 2300 	strd	r2, r3, [sp]
 80017d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017da:	4631      	mov	r1, r6
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f84f 	bl	8001880 <_ZN7mpu605015Kalman_getAngleEP8Kalman_tddd>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	}
	if(fabs(DataStruct->KalmanAngleY) > 90)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80017f2:	4690      	mov	r8, r2
 80017f4:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x394>)
 80017fe:	4640      	mov	r0, r8
 8001800:	4649      	mov	r1, r9
 8001802:	f7ff f8f9 	bl	80009f8 <__aeabi_dcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <_ZN7mpu605016MPU6050_Read_AllEP17I2C_HandleTypeDefP9MPU6050_t+0x336>
	{
		DataStruct->Gx = - DataStruct->Gx;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001812:	4614      	mov	r4, r2
 8001814:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28

	}
	DataStruct->KalmanAngleX = Kalman_getAngle(&kalmanX, roll, DataStruct->Gy, dt);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800182a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800182e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001832:	e9cd 2300 	strd	r2, r3, [sp]
 8001836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800183a:	4621      	mov	r1, r4
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f81f 	bl	8001880 <_ZN7mpu605015Kalman_getAngleEP8Kalman_tddd>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 800184c:	bf00      	nop
 800184e:	374c      	adds	r7, #76	; 0x4c
 8001850:	46bd      	mov	sp, r7
 8001852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	40606000 	.word	0x40606000
 8001860:	1a63c1f8 	.word	0x1a63c1f8
 8001864:	404ca5dc 	.word	0x404ca5dc
 8001868:	40d00000 	.word	0x40d00000
 800186c:	43aa0000 	.word	0x43aa0000
 8001870:	42121eb8 	.word	0x42121eb8
 8001874:	408f4000 	.word	0x408f4000
 8001878:	c0568000 	.word	0xc0568000
 800187c:	40568000 	.word	0x40568000

08001880 <_ZN7mpu605015Kalman_getAngleEP8Kalman_tddd>:

double mpu6050::Kalman_getAngle(Kalman_t *Kalman,double newAngle,double newRate,double dt)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b092      	sub	sp, #72	; 0x48
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	e9c7 2300 	strd	r2, r3, [r7]
	// step1

	double rate = newRate - Kalman->bias;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001894:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001898:	f7fe fc66 	bl	8000168 <__aeabi_dsub>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	Kalman->angle += dt*rate;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018b2:	f7fe fe11 	bl	80004d8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fc55 	bl	800016c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	/**
	*  P[2][2]=| P[0][0]  P[0][1] |
	*          | P[1][0]  P[1][1] |
	*/

	Kalman->P[0][0] += dt *(dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80018d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018dc:	f7fe fdfc 	bl	80004d8 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80018ee:	f7fe fc3b 	bl	8000168 <__aeabi_dsub>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001900:	f7fe fc32 	bl	8000168 <__aeabi_dsub>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fc2b 	bl	800016c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001922:	f7fe fdd9 	bl	80004d8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fc1d 	bl	800016c <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001948:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800194c:	f7fe fdc4 	bl	80004d8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc06 	bl	8000168 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001972:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001976:	f7fe fdaf 	bl	80004d8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4620      	mov	r0, r4
 8001980:	4629      	mov	r1, r5
 8001982:	f7fe fbf1 	bl	8000168 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800199c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80019a0:	f7fe fd9a 	bl	80004d8 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe fbde 	bl	800016c <__adddf3>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	// Phương trình cập nhật phép đo bộ lọc Kalman rời rạc - Cập nhật đo lường ("Chính xác")
	// Tính mức tăng Kalman - Tính mức tăng Kalman
	/* Step 4 */

	double S = Kalman->P[0][0] + Kalman->R_measure;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80019c6:	f7fe fbd1 	bl	800016c <__adddf3>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	/* Step 5 */
	double K[2];
	K[0] = Kalman->P[0][0] /S;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80019d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019dc:	f7fe fea6 	bl	800072c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	K[1] = Kalman->P[1][0] /S;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019f2:	f7fe fe9b 	bl	800072c <__aeabi_ddiv>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Tính góc và độ lệch - Cập nhật ước tính với phép đo zk (newAngle)
	/* Step 3 */

	double y = newAngle - Kalman->angle;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a08:	f7fe fbae 	bl	8000168 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* Step 6*/

	Kalman->angle += K[0] * y;
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a22:	f7fe fd59 	bl	80004d8 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	f7fe fb9d 	bl	800016c <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Kalman->bias  += K[1] * y;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001a42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a4a:	f7fe fd45 	bl	80004d8 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fb89 	bl	800016c <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	e9c1 2308 	strd	r2, r3, [r1, #32]

	double P00_temp = Kalman->P[0][0];
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001a6a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double P01_temp = Kalman->P[0][1];
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a74:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a86:	f7fe fd27 	bl	80004d8 <__aeabi_dmul>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f7fe fb69 	bl	8000168 <__aeabi_dsub>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001aa6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001aae:	f7fe fd13 	bl	80004d8 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f7fe fb55 	bl	8000168 <__aeabi_dsub>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Kalman->P[1][0] -= K[1] * P00_temp;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001ace:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ad6:	f7fe fcff 	bl	80004d8 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4620      	mov	r0, r4
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	f7fe fb41 	bl	8000168 <__aeabi_dsub>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001af6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001afe:	f7fe fceb 	bl	80004d8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fb2d 	bl	8000168 <__aeabi_dsub>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	return Kalman->angle;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
}
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	3748      	adds	r7, #72	; 0x48
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bdb0      	pop	{r4, r5, r7, pc}

08001b28 <_Z41__static_initialization_and_destruction_0ii>:




mpu6050 _mpu;
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d102      	bne.n	8001b48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001b44:	f7ff fbf4 	bl	8001330 <_ZN7mpu6050C1Ev>
 8001b48:	bf00      	nop
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200002a8 	.word	0x200002a8

08001b54 <_GLOBAL__sub_I__ZN7mpu6050C2Ev>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7ff ffe3 	bl	8001b28 <_Z41__static_initialization_and_destruction_0ii>
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_I2C_MspInit+0x70>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d123      	bne.n	8001c30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c04:	2312      	movs	r3, #18
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	480b      	ldr	r0, [pc, #44]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001c14:	f000 fae0 	bl	80021d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c22:	61d3      	str	r3, [r2, #28]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_UART_MspInit+0x8c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d131      	bne.n	8001cc8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0x90>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <HAL_UART_MspInit+0x94>)
 8001caa:	f000 fa95 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_UART_MspInit+0x94>)
 8001cc4:	f000 fa88 	bl	80021d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d22:	f000 f935 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <_kill>:

int _kill(int pid, int sig)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d42:	f003 fb39 	bl	80053b8 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2216      	movs	r2, #22
 8001d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ffe7 	bl	8001d38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d6a:	e7fe      	b.n	8001d6a <_exit+0x12>

08001d6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
  }

  return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
  }
  return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e04:	605a      	str	r2, [r3, #4]
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <_isatty>:

int _isatty(int file)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e1a:	2301      	movs	r3, #1
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f003 faa2 	bl	80053b8 <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20005000 	.word	0x20005000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	200003a8 	.word	0x200003a8
 8001ea8:	20000500 	.word	0x20000500

08001eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb8:	f7ff fff8 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ebe:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec0:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec4:	e002      	b.n	8001ecc <LoopCopyDataInit>

08001ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eca:	3304      	adds	r3, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed0:	d3f9      	bcc.n	8001ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed4:	4c09      	ldr	r4, [pc, #36]	; (8001efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed8:	e001      	b.n	8001ede <LoopFillZerobss>

08001eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001edc:	3204      	adds	r2, #4

08001ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee0:	d3fb      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f003 fa6f 	bl	80053c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee6:	f7ff f8c3 	bl	8001070 <main>
  bx lr
 8001eea:	4770      	bx	lr
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ef4:	08007978 	.word	0x08007978
  ldr r2, =_sbss
 8001ef8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001efc:	200004fc 	.word	0x200004fc

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_Init+0x28>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_Init+0x28>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f92b 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 f808 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f20:	f7ff fe20 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_InitTick+0x54>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f935 	bl	80021be <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f90b 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <HAL_InitTick+0x5c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000004 	.word	0x20000004

08001f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_IncTick+0x1c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x20>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <HAL_IncTick+0x20>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	200003ac 	.word	0x200003ac

08001fb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <HAL_GetTick+0x10>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	200003ac 	.word	0x200003ac

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffe0 	bl	8001fb4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	; (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	; (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	; (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff90 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff49 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff5e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff90 	bl	80020c8 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5f 	bl	8002074 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffb0 	bl	800212c <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ea:	e169      	b.n	80024c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021ec:	2201      	movs	r2, #1
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8158 	bne.w	80024ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4a9a      	ldr	r2, [pc, #616]	; (8002478 <HAL_GPIO_Init+0x2a0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d05e      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002214:	4a98      	ldr	r2, [pc, #608]	; (8002478 <HAL_GPIO_Init+0x2a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d875      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800221a:	4a98      	ldr	r2, [pc, #608]	; (800247c <HAL_GPIO_Init+0x2a4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d058      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002220:	4a96      	ldr	r2, [pc, #600]	; (800247c <HAL_GPIO_Init+0x2a4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d86f      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002226:	4a96      	ldr	r2, [pc, #600]	; (8002480 <HAL_GPIO_Init+0x2a8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d052      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 800222c:	4a94      	ldr	r2, [pc, #592]	; (8002480 <HAL_GPIO_Init+0x2a8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d869      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002232:	4a94      	ldr	r2, [pc, #592]	; (8002484 <HAL_GPIO_Init+0x2ac>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d04c      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002238:	4a92      	ldr	r2, [pc, #584]	; (8002484 <HAL_GPIO_Init+0x2ac>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d863      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800223e:	4a92      	ldr	r2, [pc, #584]	; (8002488 <HAL_GPIO_Init+0x2b0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d046      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
 8002244:	4a90      	ldr	r2, [pc, #576]	; (8002488 <HAL_GPIO_Init+0x2b0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d85d      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 800224a:	2b12      	cmp	r3, #18
 800224c:	d82a      	bhi.n	80022a4 <HAL_GPIO_Init+0xcc>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d859      	bhi.n	8002306 <HAL_GPIO_Init+0x12e>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <HAL_GPIO_Init+0x80>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	080022d3 	.word	0x080022d3
 800225c:	080022ad 	.word	0x080022ad
 8002260:	080022bf 	.word	0x080022bf
 8002264:	08002301 	.word	0x08002301
 8002268:	08002307 	.word	0x08002307
 800226c:	08002307 	.word	0x08002307
 8002270:	08002307 	.word	0x08002307
 8002274:	08002307 	.word	0x08002307
 8002278:	08002307 	.word	0x08002307
 800227c:	08002307 	.word	0x08002307
 8002280:	08002307 	.word	0x08002307
 8002284:	08002307 	.word	0x08002307
 8002288:	08002307 	.word	0x08002307
 800228c:	08002307 	.word	0x08002307
 8002290:	08002307 	.word	0x08002307
 8002294:	08002307 	.word	0x08002307
 8002298:	08002307 	.word	0x08002307
 800229c:	080022b5 	.word	0x080022b5
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	4a79      	ldr	r2, [pc, #484]	; (800248c <HAL_GPIO_Init+0x2b4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022aa:	e02c      	b.n	8002306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e029      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	3304      	adds	r3, #4
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e024      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	3308      	adds	r3, #8
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e01f      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	330c      	adds	r3, #12
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e01a      	b.n	8002308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022da:	2304      	movs	r3, #4
 80022dc:	623b      	str	r3, [r7, #32]
          break;
 80022de:	e013      	b.n	8002308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e8:	2308      	movs	r3, #8
 80022ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	611a      	str	r2, [r3, #16]
          break;
 80022f2:	e009      	b.n	8002308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f4:	2308      	movs	r3, #8
 80022f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	615a      	str	r2, [r3, #20]
          break;
 80022fe:	e003      	b.n	8002308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x130>
          break;
 8002306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2bff      	cmp	r3, #255	; 0xff
 800230c:	d801      	bhi.n	8002312 <HAL_GPIO_Init+0x13a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	e001      	b.n	8002316 <HAL_GPIO_Init+0x13e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2bff      	cmp	r3, #255	; 0xff
 800231c:	d802      	bhi.n	8002324 <HAL_GPIO_Init+0x14c>
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	e002      	b.n	800232a <HAL_GPIO_Init+0x152>
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	3b08      	subs	r3, #8
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	210f      	movs	r1, #15
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	401a      	ands	r2, r3
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80b1 	beq.w	80024ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_GPIO_Init+0x2b8>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002370:	4a48      	ldr	r2, [pc, #288]	; (8002494 <HAL_GPIO_Init+0x2bc>)
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_GPIO_Init+0x2c0>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1ec>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a3f      	ldr	r2, [pc, #252]	; (800249c <HAL_GPIO_Init+0x2c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1e8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3e      	ldr	r2, [pc, #248]	; (80024a0 <HAL_GPIO_Init+0x2c8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1e4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <HAL_GPIO_Init+0x2cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1e0>
 80023b4:	2303      	movs	r3, #3
 80023b6:	e006      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e004      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023bc:	2302      	movs	r3, #2
 80023be:	e002      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_GPIO_Init+0x1ee>
 80023c4:	2300      	movs	r3, #0
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	f002 0203 	and.w	r2, r2, #3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4093      	lsls	r3, r2
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023d6:	492f      	ldr	r1, [pc, #188]	; (8002494 <HAL_GPIO_Init+0x2bc>)
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3302      	adds	r3, #2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	492c      	ldr	r1, [pc, #176]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	43db      	mvns	r3, r3
 8002406:	4928      	ldr	r1, [pc, #160]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002408:	4013      	ands	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4922      	ldr	r1, [pc, #136]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	43db      	mvns	r3, r3
 800242e:	491e      	ldr	r1, [pc, #120]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002430:	4013      	ands	r3, r2
 8002432:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4918      	ldr	r1, [pc, #96]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	43db      	mvns	r3, r3
 8002456:	4914      	ldr	r1, [pc, #80]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 8002458:	4013      	ands	r3, r2
 800245a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d021      	beq.n	80024ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e021      	b.n	80024ba <HAL_GPIO_Init+0x2e2>
 8002476:	bf00      	nop
 8002478:	10320000 	.word	0x10320000
 800247c:	10310000 	.word	0x10310000
 8002480:	10220000 	.word	0x10220000
 8002484:	10210000 	.word	0x10210000
 8002488:	10120000 	.word	0x10120000
 800248c:	10110000 	.word	0x10110000
 8002490:	40021000 	.word	0x40021000
 8002494:	40010000 	.word	0x40010000
 8002498:	40010800 	.word	0x40010800
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40011400 	.word	0x40011400
 80024a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_GPIO_Init+0x304>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4909      	ldr	r1, [pc, #36]	; (80024dc <HAL_GPIO_Init+0x304>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f ae8e 	bne.w	80021ec <HAL_GPIO_Init+0x14>
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	372c      	adds	r7, #44	; 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	40010400 	.word	0x40010400

080024e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e12b      	b.n	800274a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d106      	bne.n	800250c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fb5e 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002544:	f001 fbf0 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a81      	ldr	r2, [pc, #516]	; (8002754 <HAL_I2C_Init+0x274>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d807      	bhi.n	8002564 <HAL_I2C_Init+0x84>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4a80      	ldr	r2, [pc, #512]	; (8002758 <HAL_I2C_Init+0x278>)
 8002558:	4293      	cmp	r3, r2
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e006      	b.n	8002572 <HAL_I2C_Init+0x92>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a7d      	ldr	r2, [pc, #500]	; (800275c <HAL_I2C_Init+0x27c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e0e7      	b.n	800274a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4a78      	ldr	r2, [pc, #480]	; (8002760 <HAL_I2C_Init+0x280>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	; (8002754 <HAL_I2C_Init+0x274>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d802      	bhi.n	80025b4 <HAL_I2C_Init+0xd4>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	e009      	b.n	80025c8 <HAL_I2C_Init+0xe8>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	4a69      	ldr	r2, [pc, #420]	; (8002764 <HAL_I2C_Init+0x284>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	3301      	adds	r3, #1
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	495c      	ldr	r1, [pc, #368]	; (8002754 <HAL_I2C_Init+0x274>)
 80025e4:	428b      	cmp	r3, r1
 80025e6:	d819      	bhi.n	800261c <HAL_I2C_Init+0x13c>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e59      	subs	r1, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025f6:	1c59      	adds	r1, r3, #1
 80025f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025fc:	400b      	ands	r3, r1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_I2C_Init+0x138>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1e59      	subs	r1, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002616:	e051      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 8002618:	2304      	movs	r3, #4
 800261a:	e04f      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d111      	bne.n	8002648 <HAL_I2C_Init+0x168>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e012      	b.n	800266e <HAL_I2C_Init+0x18e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1e58      	subs	r0, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	0099      	lsls	r1, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	fbb0 f3f3 	udiv	r3, r0, r3
 800265e:	3301      	adds	r3, #1
 8002660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <HAL_I2C_Init+0x196>
 8002672:	2301      	movs	r3, #1
 8002674:	e022      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10e      	bne.n	800269c <HAL_I2C_Init+0x1bc>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1e58      	subs	r0, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	440b      	add	r3, r1
 800268c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	e00f      	b.n	80026bc <HAL_I2C_Init+0x1dc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1e58      	subs	r0, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	0099      	lsls	r1, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	6809      	ldr	r1, [r1, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6911      	ldr	r1, [r2, #16]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68d2      	ldr	r2, [r2, #12]
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2220      	movs	r2, #32
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	000186a0 	.word	0x000186a0
 8002758:	001e847f 	.word	0x001e847f
 800275c:	003d08ff 	.word	0x003d08ff
 8002760:	431bde83 	.word	0x431bde83
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af02      	add	r7, sp, #8
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	4608      	mov	r0, r1
 8002772:	4611      	mov	r1, r2
 8002774:	461a      	mov	r2, r3
 8002776:	4603      	mov	r3, r0
 8002778:	817b      	strh	r3, [r7, #10]
 800277a:	460b      	mov	r3, r1
 800277c:	813b      	strh	r3, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002782:	f7ff fc17 	bl	8001fb4 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 80d9 	bne.w	8002948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	2319      	movs	r3, #25
 800279c:	2201      	movs	r2, #1
 800279e:	496d      	ldr	r1, [pc, #436]	; (8002954 <HAL_I2C_Mem_Write+0x1ec>)
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fcc1 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
 80027ae:	e0cc      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Mem_Write+0x56>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e0c5      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d007      	beq.n	80027e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2221      	movs	r2, #33	; 0x21
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <HAL_I2C_Mem_Write+0x1f0>)
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002826:	88f8      	ldrh	r0, [r7, #6]
 8002828:	893a      	ldrh	r2, [r7, #8]
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	4603      	mov	r3, r0
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 faf8 	bl	8002e2c <I2C_RequestMemoryWrite>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d052      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e081      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fd86 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b04      	cmp	r3, #4
 800285c:	d107      	bne.n	800286e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d11b      	bne.n	80028e8 <HAL_I2C_Mem_Write+0x180>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d017      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1aa      	bne.n	8002846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fd79 	bl	80033ec <I2C_WaitOnBTFFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2b04      	cmp	r3, #4
 8002906:	d107      	bne.n	8002918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e016      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	00100002 	.word	0x00100002
 8002958:	ffff0000 	.word	0xffff0000

0800295c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800297a:	f7ff fb1b 	bl	8001fb4 <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b20      	cmp	r3, #32
 800298a:	f040 8244 	bne.w	8002e16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2319      	movs	r3, #25
 8002994:	2201      	movs	r2, #1
 8002996:	4982      	ldr	r1, [pc, #520]	; (8002ba0 <HAL_I2C_Mem_Read+0x244>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 fbc5 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	e237      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Mem_Read+0x5a>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e230      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d007      	beq.n	80029dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2222      	movs	r2, #34	; 0x22
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a62      	ldr	r2, [pc, #392]	; (8002ba4 <HAL_I2C_Mem_Read+0x248>)
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a1e:	88f8      	ldrh	r0, [r7, #6]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	8979      	ldrh	r1, [r7, #10]
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fa92 	bl	8002f58 <I2C_RequestMemoryRead>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1ec      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e1c0      	b.n	8002df0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d11e      	bne.n	8002ab4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a86:	b672      	cpsid	i
}
 8002a88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab0:	b662      	cpsie	i
}
 8002ab2:	e035      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11e      	bne.n	8002afa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002acc:	b672      	cpsid	i
}
 8002ace:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002af6:	b662      	cpsie	i
}
 8002af8:	e012      	b.n	8002b20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b20:	e166      	b.n	8002df0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	f200 811f 	bhi.w	8002d6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d123      	bne.n	8002b7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fc9f 	bl	800347c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e167      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b7a:	e139      	b.n	8002df0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d152      	bne.n	8002c2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4906      	ldr	r1, [pc, #24]	; (8002ba8 <HAL_I2C_Mem_Read+0x24c>)
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 faca 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e13c      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
 8002b9e:	bf00      	nop
 8002ba0:	00100002 	.word	0x00100002
 8002ba4:	ffff0000 	.word	0xffff0000
 8002ba8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bac:	b672      	cpsid	i
}
 8002bae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf2:	b662      	cpsie	i
}
 8002bf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c28:	e0e2      	b.n	8002df0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c30:	2200      	movs	r2, #0
 8002c32:	497b      	ldr	r1, [pc, #492]	; (8002e20 <HAL_I2C_Mem_Read+0x4c4>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fa77 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0e9      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c8a:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <HAL_I2C_Mem_Read+0x4c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	08db      	lsrs	r3, r3, #3
 8002c90:	4a65      	ldr	r2, [pc, #404]	; (8002e28 <HAL_I2C_Mem_Read+0x4cc>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0a1a      	lsrs	r2, r3, #8
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00da      	lsls	r2, r3, #3
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d118      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cd2:	b662      	cpsie	i
}
 8002cd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e09a      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d1d9      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d32:	b662      	cpsie	i
}
 8002d34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d68:	e042      	b.n	8002df0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fb84 	bl	800347c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04c      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d118      	bne.n	8002df0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f ae94 	bne.w	8002b22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	00010004 	.word	0x00010004
 8002e24:	20000000 	.word	0x20000000
 8002e28:	14f8b589 	.word	0x14f8b589

08002e2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	817b      	strh	r3, [r7, #10]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	813b      	strh	r3, [r7, #8]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f960 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7c:	d103      	bne.n	8002e86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e05f      	b.n	8002f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e8a:	897b      	ldrh	r3, [r7, #10]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	6a3a      	ldr	r2, [r7, #32]
 8002e9e:	492d      	ldr	r1, [pc, #180]	; (8002f54 <I2C_RequestMemoryWrite+0x128>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f9bb 	bl	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e04c      	b.n	8002f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fa46 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d107      	bne.n	8002eee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e02b      	b.n	8002f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef8:	893b      	ldrh	r3, [r7, #8]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	611a      	str	r2, [r3, #16]
 8002f02:	e021      	b.n	8002f48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f04:	893b      	ldrh	r3, [r7, #8]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa20 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e005      	b.n	8002f4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3e:	893b      	ldrh	r3, [r7, #8]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	00010002 	.word	0x00010002

08002f58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	4608      	mov	r0, r1
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	4603      	mov	r3, r0
 8002f68:	817b      	strh	r3, [r7, #10]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	813b      	strh	r3, [r7, #8]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f8c2 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00d      	beq.n	8002fc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb8:	d103      	bne.n	8002fc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e0aa      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc6:	897b      	ldrh	r3, [r7, #10]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	4952      	ldr	r1, [pc, #328]	; (8003124 <I2C_RequestMemoryRead+0x1cc>)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f91d 	bl	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e097      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6a39      	ldr	r1, [r7, #32]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f9a8 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00d      	beq.n	800302e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b04      	cmp	r3, #4
 8003018:	d107      	bne.n	800302a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e076      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003034:	893b      	ldrh	r3, [r7, #8]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	e021      	b.n	8003084 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003040:	893b      	ldrh	r3, [r7, #8]
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b29b      	uxth	r3, r3
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	6a39      	ldr	r1, [r7, #32]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f982 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00d      	beq.n	800307a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b04      	cmp	r3, #4
 8003064:	d107      	bne.n	8003076 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e050      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	6a39      	ldr	r1, [r7, #32]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f967 	bl	800335c <I2C_WaitOnTXEFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00d      	beq.n	80030b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	2b04      	cmp	r3, #4
 800309a:	d107      	bne.n	80030ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e035      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f82b 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00d      	beq.n	80030f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e6:	d103      	bne.n	80030f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e013      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	4906      	ldr	r1, [pc, #24]	; (8003124 <I2C_RequestMemoryRead+0x1cc>)
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f886 	bl	800321c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	00010002 	.word	0x00010002

08003128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003138:	e048      	b.n	80031cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003140:	d044      	beq.n	80031cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7fe ff37 	bl	8001fb4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d139      	bne.n	80031cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10d      	bne.n	800317e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	43da      	mvns	r2, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	e00c      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0x70>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	43da      	mvns	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	429a      	cmp	r2, r3
 800319c:	d116      	bne.n	80031cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e023      	b.n	8003214 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10d      	bne.n	80031f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	43da      	mvns	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4013      	ands	r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	e00c      	b.n	800320c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	429a      	cmp	r2, r3
 8003210:	d093      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322a:	e071      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d123      	bne.n	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003254:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f043 0204 	orr.w	r2, r3, #4
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e067      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d041      	beq.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7fe fe92 	bl	8001fb4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d136      	bne.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	0c1b      	lsrs	r3, r3, #16
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d10c      	bne.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4013      	ands	r3, r2
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e00b      	b.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e021      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	0c1b      	lsrs	r3, r3, #16
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10c      	bne.n	8003334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	43da      	mvns	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4013      	ands	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e00b      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	f47f af6d 	bne.w	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003368:	e034      	b.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8e3 	bl	8003536 <I2C_IsAcknowledgeFailed>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e034      	b.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d028      	beq.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe fe17 	bl	8001fb4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11d      	bne.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a2:	2b80      	cmp	r3, #128	; 0x80
 80033a4:	d016      	beq.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e007      	b.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d1c3      	bne.n	800336a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f8:	e034      	b.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f89b 	bl	8003536 <I2C_IsAcknowledgeFailed>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e034      	b.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d028      	beq.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fe fdcf 	bl	8001fb4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11d      	bne.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0304 	and.w	r3, r3, #4
 8003432:	2b04      	cmp	r3, #4
 8003434:	d016      	beq.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d1c3      	bne.n	80033fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003488:	e049      	b.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d119      	bne.n	80034cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0210 	mvn.w	r2, #16
 80034a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e030      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7fe fd72 	bl	8001fb4 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d302      	bcc.n	80034e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d11d      	bne.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b40      	cmp	r3, #64	; 0x40
 80034ee:	d016      	beq.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d1ae      	bne.n	800348a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d11b      	bne.n	8003586 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003556:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
	...

08003594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e272      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8087 	beq.w	80036c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b4:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d00c      	beq.n	80035da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c0:	4b8f      	ldr	r3, [pc, #572]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d112      	bne.n	80035f2 <HAL_RCC_OscConfig+0x5e>
 80035cc:	4b8c      	ldr	r3, [pc, #560]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d10b      	bne.n	80035f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035da:	4b89      	ldr	r3, [pc, #548]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d06c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x12c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d168      	bne.n	80036c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e24c      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x76>
 80035fc:	4b80      	ldr	r3, [pc, #512]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7f      	ldr	r2, [pc, #508]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	e02e      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x98>
 8003612:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a7a      	ldr	r2, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b78      	ldr	r3, [pc, #480]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e01d      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0xbc>
 8003636:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a71      	ldr	r2, [pc, #452]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0xd4>
 8003650:	4b6b      	ldr	r3, [pc, #428]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a6a      	ldr	r2, [pc, #424]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b68      	ldr	r3, [pc, #416]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a67      	ldr	r2, [pc, #412]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fca0 	bl	8001fb4 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003678:	f7fe fc9c 	bl	8001fb4 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e200      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0xe4>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fc8c 	bl	8001fb4 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fc88 	bl	8001fb4 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1ec      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x10c>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11c      	bne.n	8003720 <HAL_RCC_OscConfig+0x18c>
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x176>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1c0      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4939      	ldr	r1, [pc, #228]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	e03a      	b.n	8003796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372e:	f7fe fc41 	bl	8001fb4 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003736:	f7fe fc3d 	bl	8001fb4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a1      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4927      	ldr	r1, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe fc20 	bl	8001fb4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003778:	f7fe fc1c 	bl	8001fb4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e180      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03a      	beq.n	8003818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d019      	beq.n	80037de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_RCC_OscConfig+0x274>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b0:	f7fe fc00 	bl	8001fb4 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe fbfc 	bl	8001fb4 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e160      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f000 face 	bl	8003d78 <RCC_Delay>
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037de:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <HAL_RCC_OscConfig+0x274>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7fe fbe6 	bl	8001fb4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ea:	e00f      	b.n	800380c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ec:	f7fe fbe2 	bl	8001fb4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d908      	bls.n	800380c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e146      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	42420000 	.word	0x42420000
 8003808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b92      	ldr	r3, [pc, #584]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e9      	bne.n	80037ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a6 	beq.w	8003972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4a87      	ldr	r2, [pc, #540]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	61d3      	str	r3, [r2, #28]
 8003842:	4b85      	ldr	r3, [pc, #532]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b82      	ldr	r3, [pc, #520]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b7f      	ldr	r3, [pc, #508]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7e      	ldr	r2, [pc, #504]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fe fba3 	bl	8001fb4 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fe fb9f 	bl	8001fb4 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e103      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b75      	ldr	r3, [pc, #468]	; (8003a5c <HAL_RCC_OscConfig+0x4c8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x312>
 8003898:	4b6f      	ldr	r3, [pc, #444]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4a6e      	ldr	r2, [pc, #440]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6213      	str	r3, [r2, #32]
 80038a4:	e02d      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x334>
 80038ae:	4b6a      	ldr	r3, [pc, #424]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4a69      	ldr	r2, [pc, #420]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6213      	str	r3, [r2, #32]
 80038ba:	4b67      	ldr	r3, [pc, #412]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6213      	str	r3, [r2, #32]
 80038c6:	e01c      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x356>
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a60      	ldr	r2, [pc, #384]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4a5d      	ldr	r2, [pc, #372]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6213      	str	r3, [r2, #32]
 80038e8:	e00b      	b.n	8003902 <HAL_RCC_OscConfig+0x36e>
 80038ea:	4b5b      	ldr	r3, [pc, #364]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	4a5a      	ldr	r2, [pc, #360]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6213      	str	r3, [r2, #32]
 80038f6:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fe fb53 	bl	8001fb4 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fe fb4f 	bl	8001fb4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0b1      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b4b      	ldr	r3, [pc, #300]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <HAL_RCC_OscConfig+0x37e>
 8003934:	e014      	b.n	8003960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7fe fb3d 	bl	8001fb4 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fe fb39 	bl	8001fb4 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e09b      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b3c      	ldr	r3, [pc, #240]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8087 	beq.w	8003a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d061      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d146      	bne.n	8003a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003990:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7fe fb0d 	bl	8001fb4 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fb09 	bl	8001fb4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e06d      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f0      	bne.n	800399e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d108      	bne.n	80039d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	4921      	ldr	r1, [pc, #132]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d8:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a19      	ldr	r1, [r3, #32]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	430b      	orrs	r3, r1
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fadd 	bl	8001fb4 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe fad9 	bl	8001fb4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e03d      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x46a>
 8003a1c:	e035      	b.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_OscConfig+0x4cc>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fe fac6 	bl	8001fb4 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fe fac2 	bl	8001fb4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e026      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x4c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x498>
 8003a4a:	e01e      	b.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e019      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_OscConfig+0x500>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d106      	bne.n	8003a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0d0      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d910      	bls.n	8003adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0207 	bic.w	r2, r3, #7
 8003ac2:	4965      	ldr	r1, [pc, #404]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b63      	ldr	r3, [pc, #396]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0b8      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af4:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a58      	ldr	r2, [pc, #352]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b0c:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b18:	4b50      	ldr	r3, [pc, #320]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	494d      	ldr	r1, [pc, #308]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d040      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b47      	ldr	r3, [pc, #284]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d115      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e07f      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b41      	ldr	r3, [pc, #260]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d109      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e073      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b66:	4b3d      	ldr	r3, [pc, #244]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e06b      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b76:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f023 0203 	bic.w	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4936      	ldr	r1, [pc, #216]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b88:	f7fe fa14 	bl	8001fb4 <HAL_GetTick>
 8003b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b90:	f7fe fa10 	bl	8001fb4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e053      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 020c 	and.w	r2, r3, #12
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d1eb      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d210      	bcs.n	8003be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4922      	ldr	r1, [pc, #136]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e032      	b.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4916      	ldr	r1, [pc, #88]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	490e      	ldr	r1, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c26:	f000 f821 	bl	8003c6c <HAL_RCC_GetSysClockFreq>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	490a      	ldr	r1, [pc, #40]	; (8003c60 <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	5ccb      	ldrb	r3, [r1, r3]
 8003c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3e:	4a09      	ldr	r2, [pc, #36]	; (8003c64 <HAL_RCC_ClockConfig+0x1cc>)
 8003c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_ClockConfig+0x1d0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe f972 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	08007558 	.word	0x08007558
 8003c64:	20000000 	.word	0x20000000
 8003c68:	20000004 	.word	0x20000004

08003c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d002      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x30>
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8003c9a:	e027      	b.n	8003cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c9e:	613b      	str	r3, [r7, #16]
      break;
 8003ca0:	e027      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0c9b      	lsrs	r3, r3, #18
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cac:	5cd3      	ldrb	r3, [r2, r3]
 8003cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d010      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	0c5b      	lsrs	r3, r3, #17
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003cc6:	5cd3      	ldrb	r3, [r2, r3]
 8003cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cce:	fb03 f202 	mul.w	r2, r3, r2
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e004      	b.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	613b      	str	r3, [r7, #16]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cee:	613b      	str	r3, [r7, #16]
      break;
 8003cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf2:	693b      	ldr	r3, [r7, #16]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40021000 	.word	0x40021000
 8003d04:	007a1200 	.word	0x007a1200
 8003d08:	08007570 	.word	0x08007570
 8003d0c:	08007580 	.word	0x08007580
 8003d10:	003d0900 	.word	0x003d0900

08003d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d18:	4b02      	ldr	r3, [pc, #8]	; (8003d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	20000000 	.word	0x20000000

08003d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d2c:	f7ff fff2 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4903      	ldr	r1, [pc, #12]	; (8003d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	08007568 	.word	0x08007568

08003d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d54:	f7ff ffde 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0adb      	lsrs	r3, r3, #11
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	4903      	ldr	r1, [pc, #12]	; (8003d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d66:	5ccb      	ldrb	r3, [r1, r3]
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08007568 	.word	0x08007568

08003d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d80:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <RCC_Delay+0x34>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <RCC_Delay+0x38>)
 8003d86:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8a:	0a5b      	lsrs	r3, r3, #9
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d94:	bf00      	nop
  }
  while (Delay --);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1e5a      	subs	r2, r3, #1
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f9      	bne.n	8003d94 <RCC_Delay+0x1c>
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	20000000 	.word	0x20000000
 8003db0:	10624dd3 	.word	0x10624dd3

08003db4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e042      	b.n	8003e4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd ff32 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2224      	movs	r2, #36	; 0x24
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f91d 	bl	8004038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695a      	ldr	r2, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d16d      	bne.n	8003f50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_UART_Transmit+0x2c>
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e066      	b.n	8003f52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2221      	movs	r2, #33	; 0x21
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e92:	f7fe f88f 	bl	8001fb4 <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d108      	bne.n	8003ec0 <HAL_UART_Transmit+0x6c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e003      	b.n	8003ec8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec8:	e02a      	b.n	8003f20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2180      	movs	r1, #128	; 0x80
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f840 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e036      	b.n	8003f52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3302      	adds	r3, #2
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	e007      	b.n	8003f12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1cf      	bne.n	8003eca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2140      	movs	r1, #64	; 0x40
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 f810 	bl	8003f5a <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e006      	b.n	8003f52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3720      	adds	r7, #32
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b090      	sub	sp, #64	; 0x40
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6a:	e050      	b.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d04c      	beq.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	f7fe f81b 	bl	8001fb4 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d241      	bcs.n	800400e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	330c      	adds	r3, #12
 8003fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003faa:	637a      	str	r2, [r7, #52]	; 0x34
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e5      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fde:	623a      	str	r2, [r7, #32]
 8003fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e00f      	b.n	800402e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4013      	ands	r3, r2
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	429a      	cmp	r2, r3
 800402a:	d09f      	beq.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3740      	adds	r7, #64	; 0x40
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004072:	f023 030c 	bic.w	r3, r3, #12
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	430b      	orrs	r3, r1
 800407e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2c      	ldr	r2, [pc, #176]	; (800414c <UART_SetConfig+0x114>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d103      	bne.n	80040a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff fe56 	bl	8003d50 <HAL_RCC_GetPCLK2Freq>
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	e002      	b.n	80040ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040a8:	f7ff fe3e 	bl	8003d28 <HAL_RCC_GetPCLK1Freq>
 80040ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009a      	lsls	r2, r3, #2
 80040b8:	441a      	add	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	4a22      	ldr	r2, [pc, #136]	; (8004150 <UART_SetConfig+0x118>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	0119      	lsls	r1, r3, #4
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009a      	lsls	r2, r3, #2
 80040d8:	441a      	add	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <UART_SetConfig+0x118>)
 80040e6:	fba3 0302 	umull	r0, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	2064      	movs	r0, #100	; 0x64
 80040ee:	fb00 f303 	mul.w	r3, r0, r3
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	3332      	adds	r3, #50	; 0x32
 80040f8:	4a15      	ldr	r2, [pc, #84]	; (8004150 <UART_SetConfig+0x118>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004104:	4419      	add	r1, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009a      	lsls	r2, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fbb2 f2f3 	udiv	r2, r2, r3
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <UART_SetConfig+0x118>)
 800411e:	fba3 0302 	umull	r0, r3, r3, r2
 8004122:	095b      	lsrs	r3, r3, #5
 8004124:	2064      	movs	r0, #100	; 0x64
 8004126:	fb00 f303 	mul.w	r3, r0, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	3332      	adds	r3, #50	; 0x32
 8004130:	4a07      	ldr	r2, [pc, #28]	; (8004150 <UART_SetConfig+0x118>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	440a      	add	r2, r1
 8004142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40013800 	.word	0x40013800
 8004150:	51eb851f 	.word	0x51eb851f

08004154 <atan2>:
 8004154:	f000 ba8c 	b.w	8004670 <__ieee754_atan2>

08004158 <sqrt>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	4606      	mov	r6, r0
 800415c:	460f      	mov	r7, r1
 800415e:	f000 f9ad 	bl	80044bc <__ieee754_sqrt>
 8004162:	4632      	mov	r2, r6
 8004164:	4604      	mov	r4, r0
 8004166:	460d      	mov	r5, r1
 8004168:	463b      	mov	r3, r7
 800416a:	4630      	mov	r0, r6
 800416c:	4639      	mov	r1, r7
 800416e:	f7fc fc4d 	bl	8000a0c <__aeabi_dcmpun>
 8004172:	b990      	cbnz	r0, 800419a <sqrt+0x42>
 8004174:	2200      	movs	r2, #0
 8004176:	2300      	movs	r3, #0
 8004178:	4630      	mov	r0, r6
 800417a:	4639      	mov	r1, r7
 800417c:	f7fc fc1e 	bl	80009bc <__aeabi_dcmplt>
 8004180:	b158      	cbz	r0, 800419a <sqrt+0x42>
 8004182:	f001 f919 	bl	80053b8 <__errno>
 8004186:	2321      	movs	r3, #33	; 0x21
 8004188:	2200      	movs	r2, #0
 800418a:	6003      	str	r3, [r0, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f7fc facb 	bl	800072c <__aeabi_ddiv>
 8004196:	4604      	mov	r4, r0
 8004198:	460d      	mov	r5, r1
 800419a:	4620      	mov	r0, r4
 800419c:	4629      	mov	r1, r5
 800419e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041a0 <atan>:
 80041a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	4bb6      	ldr	r3, [pc, #728]	; (8004480 <atan+0x2e0>)
 80041a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80041aa:	429e      	cmp	r6, r3
 80041ac:	4604      	mov	r4, r0
 80041ae:	460d      	mov	r5, r1
 80041b0:	468b      	mov	fp, r1
 80041b2:	dd17      	ble.n	80041e4 <atan+0x44>
 80041b4:	4bb3      	ldr	r3, [pc, #716]	; (8004484 <atan+0x2e4>)
 80041b6:	429e      	cmp	r6, r3
 80041b8:	dc01      	bgt.n	80041be <atan+0x1e>
 80041ba:	d109      	bne.n	80041d0 <atan+0x30>
 80041bc:	b140      	cbz	r0, 80041d0 <atan+0x30>
 80041be:	4622      	mov	r2, r4
 80041c0:	462b      	mov	r3, r5
 80041c2:	4620      	mov	r0, r4
 80041c4:	4629      	mov	r1, r5
 80041c6:	f7fb ffd1 	bl	800016c <__adddf3>
 80041ca:	4604      	mov	r4, r0
 80041cc:	460d      	mov	r5, r1
 80041ce:	e005      	b.n	80041dc <atan+0x3c>
 80041d0:	f1bb 0f00 	cmp.w	fp, #0
 80041d4:	4cac      	ldr	r4, [pc, #688]	; (8004488 <atan+0x2e8>)
 80041d6:	f300 8121 	bgt.w	800441c <atan+0x27c>
 80041da:	4dac      	ldr	r5, [pc, #688]	; (800448c <atan+0x2ec>)
 80041dc:	4620      	mov	r0, r4
 80041de:	4629      	mov	r1, r5
 80041e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e4:	4baa      	ldr	r3, [pc, #680]	; (8004490 <atan+0x2f0>)
 80041e6:	429e      	cmp	r6, r3
 80041e8:	dc11      	bgt.n	800420e <atan+0x6e>
 80041ea:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80041ee:	429e      	cmp	r6, r3
 80041f0:	dc0a      	bgt.n	8004208 <atan+0x68>
 80041f2:	a38b      	add	r3, pc, #556	; (adr r3, 8004420 <atan+0x280>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fb ffb8 	bl	800016c <__adddf3>
 80041fc:	2200      	movs	r2, #0
 80041fe:	4ba5      	ldr	r3, [pc, #660]	; (8004494 <atan+0x2f4>)
 8004200:	f7fc fbfa 	bl	80009f8 <__aeabi_dcmpgt>
 8004204:	2800      	cmp	r0, #0
 8004206:	d1e9      	bne.n	80041dc <atan+0x3c>
 8004208:	f04f 3aff 	mov.w	sl, #4294967295
 800420c:	e027      	b.n	800425e <atan+0xbe>
 800420e:	f000 f951 	bl	80044b4 <fabs>
 8004212:	4ba1      	ldr	r3, [pc, #644]	; (8004498 <atan+0x2f8>)
 8004214:	4604      	mov	r4, r0
 8004216:	429e      	cmp	r6, r3
 8004218:	460d      	mov	r5, r1
 800421a:	f300 80b8 	bgt.w	800438e <atan+0x1ee>
 800421e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004222:	429e      	cmp	r6, r3
 8004224:	f300 809c 	bgt.w	8004360 <atan+0x1c0>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	f7fb ff9e 	bl	800016c <__adddf3>
 8004230:	2200      	movs	r2, #0
 8004232:	4b98      	ldr	r3, [pc, #608]	; (8004494 <atan+0x2f4>)
 8004234:	f7fb ff98 	bl	8000168 <__aeabi_dsub>
 8004238:	2200      	movs	r2, #0
 800423a:	4606      	mov	r6, r0
 800423c:	460f      	mov	r7, r1
 800423e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fb ff91 	bl	800016c <__adddf3>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4630      	mov	r0, r6
 8004250:	4639      	mov	r1, r7
 8004252:	f7fc fa6b 	bl	800072c <__aeabi_ddiv>
 8004256:	f04f 0a00 	mov.w	sl, #0
 800425a:	4604      	mov	r4, r0
 800425c:	460d      	mov	r5, r1
 800425e:	4622      	mov	r2, r4
 8004260:	462b      	mov	r3, r5
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f7fc f937 	bl	80004d8 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4680      	mov	r8, r0
 8004270:	4689      	mov	r9, r1
 8004272:	f7fc f931 	bl	80004d8 <__aeabi_dmul>
 8004276:	a36c      	add	r3, pc, #432	; (adr r3, 8004428 <atan+0x288>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	4606      	mov	r6, r0
 800427e:	460f      	mov	r7, r1
 8004280:	f7fc f92a 	bl	80004d8 <__aeabi_dmul>
 8004284:	a36a      	add	r3, pc, #424	; (adr r3, 8004430 <atan+0x290>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f7fb ff6f 	bl	800016c <__adddf3>
 800428e:	4632      	mov	r2, r6
 8004290:	463b      	mov	r3, r7
 8004292:	f7fc f921 	bl	80004d8 <__aeabi_dmul>
 8004296:	a368      	add	r3, pc, #416	; (adr r3, 8004438 <atan+0x298>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ff66 	bl	800016c <__adddf3>
 80042a0:	4632      	mov	r2, r6
 80042a2:	463b      	mov	r3, r7
 80042a4:	f7fc f918 	bl	80004d8 <__aeabi_dmul>
 80042a8:	a365      	add	r3, pc, #404	; (adr r3, 8004440 <atan+0x2a0>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fb ff5d 	bl	800016c <__adddf3>
 80042b2:	4632      	mov	r2, r6
 80042b4:	463b      	mov	r3, r7
 80042b6:	f7fc f90f 	bl	80004d8 <__aeabi_dmul>
 80042ba:	a363      	add	r3, pc, #396	; (adr r3, 8004448 <atan+0x2a8>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb ff54 	bl	800016c <__adddf3>
 80042c4:	4632      	mov	r2, r6
 80042c6:	463b      	mov	r3, r7
 80042c8:	f7fc f906 	bl	80004d8 <__aeabi_dmul>
 80042cc:	a360      	add	r3, pc, #384	; (adr r3, 8004450 <atan+0x2b0>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fb ff4b 	bl	800016c <__adddf3>
 80042d6:	4642      	mov	r2, r8
 80042d8:	464b      	mov	r3, r9
 80042da:	f7fc f8fd 	bl	80004d8 <__aeabi_dmul>
 80042de:	a35e      	add	r3, pc, #376	; (adr r3, 8004458 <atan+0x2b8>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	4680      	mov	r8, r0
 80042e6:	4689      	mov	r9, r1
 80042e8:	4630      	mov	r0, r6
 80042ea:	4639      	mov	r1, r7
 80042ec:	f7fc f8f4 	bl	80004d8 <__aeabi_dmul>
 80042f0:	a35b      	add	r3, pc, #364	; (adr r3, 8004460 <atan+0x2c0>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fb ff37 	bl	8000168 <__aeabi_dsub>
 80042fa:	4632      	mov	r2, r6
 80042fc:	463b      	mov	r3, r7
 80042fe:	f7fc f8eb 	bl	80004d8 <__aeabi_dmul>
 8004302:	a359      	add	r3, pc, #356	; (adr r3, 8004468 <atan+0x2c8>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ff2e 	bl	8000168 <__aeabi_dsub>
 800430c:	4632      	mov	r2, r6
 800430e:	463b      	mov	r3, r7
 8004310:	f7fc f8e2 	bl	80004d8 <__aeabi_dmul>
 8004314:	a356      	add	r3, pc, #344	; (adr r3, 8004470 <atan+0x2d0>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fb ff25 	bl	8000168 <__aeabi_dsub>
 800431e:	4632      	mov	r2, r6
 8004320:	463b      	mov	r3, r7
 8004322:	f7fc f8d9 	bl	80004d8 <__aeabi_dmul>
 8004326:	a354      	add	r3, pc, #336	; (adr r3, 8004478 <atan+0x2d8>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff1c 	bl	8000168 <__aeabi_dsub>
 8004330:	4632      	mov	r2, r6
 8004332:	463b      	mov	r3, r7
 8004334:	f7fc f8d0 	bl	80004d8 <__aeabi_dmul>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4640      	mov	r0, r8
 800433e:	4649      	mov	r1, r9
 8004340:	f7fb ff14 	bl	800016c <__adddf3>
 8004344:	4622      	mov	r2, r4
 8004346:	462b      	mov	r3, r5
 8004348:	f7fc f8c6 	bl	80004d8 <__aeabi_dmul>
 800434c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	d144      	bne.n	80043e0 <atan+0x240>
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fb ff05 	bl	8000168 <__aeabi_dsub>
 800435e:	e734      	b.n	80041ca <atan+0x2a>
 8004360:	2200      	movs	r2, #0
 8004362:	4b4c      	ldr	r3, [pc, #304]	; (8004494 <atan+0x2f4>)
 8004364:	f7fb ff00 	bl	8000168 <__aeabi_dsub>
 8004368:	2200      	movs	r2, #0
 800436a:	4606      	mov	r6, r0
 800436c:	460f      	mov	r7, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	4b48      	ldr	r3, [pc, #288]	; (8004494 <atan+0x2f4>)
 8004374:	f7fb fefa 	bl	800016c <__adddf3>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4630      	mov	r0, r6
 800437e:	4639      	mov	r1, r7
 8004380:	f7fc f9d4 	bl	800072c <__aeabi_ddiv>
 8004384:	f04f 0a01 	mov.w	sl, #1
 8004388:	4604      	mov	r4, r0
 800438a:	460d      	mov	r5, r1
 800438c:	e767      	b.n	800425e <atan+0xbe>
 800438e:	4b43      	ldr	r3, [pc, #268]	; (800449c <atan+0x2fc>)
 8004390:	429e      	cmp	r6, r3
 8004392:	da1a      	bge.n	80043ca <atan+0x22a>
 8004394:	2200      	movs	r2, #0
 8004396:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <atan+0x300>)
 8004398:	f7fb fee6 	bl	8000168 <__aeabi_dsub>
 800439c:	2200      	movs	r2, #0
 800439e:	4606      	mov	r6, r0
 80043a0:	460f      	mov	r7, r1
 80043a2:	4620      	mov	r0, r4
 80043a4:	4629      	mov	r1, r5
 80043a6:	4b3e      	ldr	r3, [pc, #248]	; (80044a0 <atan+0x300>)
 80043a8:	f7fc f896 	bl	80004d8 <__aeabi_dmul>
 80043ac:	2200      	movs	r2, #0
 80043ae:	4b39      	ldr	r3, [pc, #228]	; (8004494 <atan+0x2f4>)
 80043b0:	f7fb fedc 	bl	800016c <__adddf3>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4630      	mov	r0, r6
 80043ba:	4639      	mov	r1, r7
 80043bc:	f7fc f9b6 	bl	800072c <__aeabi_ddiv>
 80043c0:	f04f 0a02 	mov.w	sl, #2
 80043c4:	4604      	mov	r4, r0
 80043c6:	460d      	mov	r5, r1
 80043c8:	e749      	b.n	800425e <atan+0xbe>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	2000      	movs	r0, #0
 80043d0:	4934      	ldr	r1, [pc, #208]	; (80044a4 <atan+0x304>)
 80043d2:	f7fc f9ab 	bl	800072c <__aeabi_ddiv>
 80043d6:	f04f 0a03 	mov.w	sl, #3
 80043da:	4604      	mov	r4, r0
 80043dc:	460d      	mov	r5, r1
 80043de:	e73e      	b.n	800425e <atan+0xbe>
 80043e0:	4b31      	ldr	r3, [pc, #196]	; (80044a8 <atan+0x308>)
 80043e2:	4e32      	ldr	r6, [pc, #200]	; (80044ac <atan+0x30c>)
 80043e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fb febc 	bl	8000168 <__aeabi_dsub>
 80043f0:	4622      	mov	r2, r4
 80043f2:	462b      	mov	r3, r5
 80043f4:	f7fb feb8 	bl	8000168 <__aeabi_dsub>
 80043f8:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004404:	f7fb feb0 	bl	8000168 <__aeabi_dsub>
 8004408:	f1bb 0f00 	cmp.w	fp, #0
 800440c:	4604      	mov	r4, r0
 800440e:	460d      	mov	r5, r1
 8004410:	f6bf aee4 	bge.w	80041dc <atan+0x3c>
 8004414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004418:	461d      	mov	r5, r3
 800441a:	e6df      	b.n	80041dc <atan+0x3c>
 800441c:	4d24      	ldr	r5, [pc, #144]	; (80044b0 <atan+0x310>)
 800441e:	e6dd      	b.n	80041dc <atan+0x3c>
 8004420:	8800759c 	.word	0x8800759c
 8004424:	7e37e43c 	.word	0x7e37e43c
 8004428:	e322da11 	.word	0xe322da11
 800442c:	3f90ad3a 	.word	0x3f90ad3a
 8004430:	24760deb 	.word	0x24760deb
 8004434:	3fa97b4b 	.word	0x3fa97b4b
 8004438:	a0d03d51 	.word	0xa0d03d51
 800443c:	3fb10d66 	.word	0x3fb10d66
 8004440:	c54c206e 	.word	0xc54c206e
 8004444:	3fb745cd 	.word	0x3fb745cd
 8004448:	920083ff 	.word	0x920083ff
 800444c:	3fc24924 	.word	0x3fc24924
 8004450:	5555550d 	.word	0x5555550d
 8004454:	3fd55555 	.word	0x3fd55555
 8004458:	2c6a6c2f 	.word	0x2c6a6c2f
 800445c:	bfa2b444 	.word	0xbfa2b444
 8004460:	52defd9a 	.word	0x52defd9a
 8004464:	3fadde2d 	.word	0x3fadde2d
 8004468:	af749a6d 	.word	0xaf749a6d
 800446c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004470:	fe231671 	.word	0xfe231671
 8004474:	3fbc71c6 	.word	0x3fbc71c6
 8004478:	9998ebc4 	.word	0x9998ebc4
 800447c:	3fc99999 	.word	0x3fc99999
 8004480:	440fffff 	.word	0x440fffff
 8004484:	7ff00000 	.word	0x7ff00000
 8004488:	54442d18 	.word	0x54442d18
 800448c:	bff921fb 	.word	0xbff921fb
 8004490:	3fdbffff 	.word	0x3fdbffff
 8004494:	3ff00000 	.word	0x3ff00000
 8004498:	3ff2ffff 	.word	0x3ff2ffff
 800449c:	40038000 	.word	0x40038000
 80044a0:	3ff80000 	.word	0x3ff80000
 80044a4:	bff00000 	.word	0xbff00000
 80044a8:	080075a8 	.word	0x080075a8
 80044ac:	08007588 	.word	0x08007588
 80044b0:	3ff921fb 	.word	0x3ff921fb

080044b4 <fabs>:
 80044b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80044b8:	4619      	mov	r1, r3
 80044ba:	4770      	bx	lr

080044bc <__ieee754_sqrt>:
 80044bc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004660 <__ieee754_sqrt+0x1a4>
 80044c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	ea3c 0c01 	bics.w	ip, ip, r1
 80044c8:	460b      	mov	r3, r1
 80044ca:	4606      	mov	r6, r0
 80044cc:	460d      	mov	r5, r1
 80044ce:	460a      	mov	r2, r1
 80044d0:	4604      	mov	r4, r0
 80044d2:	d10e      	bne.n	80044f2 <__ieee754_sqrt+0x36>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f7fb ffff 	bl	80004d8 <__aeabi_dmul>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4630      	mov	r0, r6
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fb fe43 	bl	800016c <__adddf3>
 80044e6:	4606      	mov	r6, r0
 80044e8:	460d      	mov	r5, r1
 80044ea:	4630      	mov	r0, r6
 80044ec:	4629      	mov	r1, r5
 80044ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f2:	2900      	cmp	r1, #0
 80044f4:	dc0d      	bgt.n	8004512 <__ieee754_sqrt+0x56>
 80044f6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80044fa:	ea5c 0c00 	orrs.w	ip, ip, r0
 80044fe:	d0f4      	beq.n	80044ea <__ieee754_sqrt+0x2e>
 8004500:	b139      	cbz	r1, 8004512 <__ieee754_sqrt+0x56>
 8004502:	4602      	mov	r2, r0
 8004504:	f7fb fe30 	bl	8000168 <__aeabi_dsub>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	f7fc f90e 	bl	800072c <__aeabi_ddiv>
 8004510:	e7e9      	b.n	80044e6 <__ieee754_sqrt+0x2a>
 8004512:	1512      	asrs	r2, r2, #20
 8004514:	f000 8089 	beq.w	800462a <__ieee754_sqrt+0x16e>
 8004518:	2500      	movs	r5, #0
 800451a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800451e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004526:	07d2      	lsls	r2, r2, #31
 8004528:	bf5c      	itt	pl
 800452a:	005b      	lslpl	r3, r3, #1
 800452c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004530:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004534:	bf58      	it	pl
 8004536:	0064      	lslpl	r4, r4, #1
 8004538:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800453c:	0062      	lsls	r2, r4, #1
 800453e:	2016      	movs	r0, #22
 8004540:	4629      	mov	r1, r5
 8004542:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004546:	1076      	asrs	r6, r6, #1
 8004548:	190f      	adds	r7, r1, r4
 800454a:	429f      	cmp	r7, r3
 800454c:	bfde      	ittt	le
 800454e:	1bdb      	suble	r3, r3, r7
 8004550:	1939      	addle	r1, r7, r4
 8004552:	192d      	addle	r5, r5, r4
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	3801      	subs	r0, #1
 8004558:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800455c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004560:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004564:	d1f0      	bne.n	8004548 <__ieee754_sqrt+0x8c>
 8004566:	4604      	mov	r4, r0
 8004568:	2720      	movs	r7, #32
 800456a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800456e:	428b      	cmp	r3, r1
 8004570:	eb0c 0e00 	add.w	lr, ip, r0
 8004574:	dc02      	bgt.n	800457c <__ieee754_sqrt+0xc0>
 8004576:	d113      	bne.n	80045a0 <__ieee754_sqrt+0xe4>
 8004578:	4596      	cmp	lr, r2
 800457a:	d811      	bhi.n	80045a0 <__ieee754_sqrt+0xe4>
 800457c:	f1be 0f00 	cmp.w	lr, #0
 8004580:	eb0e 000c 	add.w	r0, lr, ip
 8004584:	da56      	bge.n	8004634 <__ieee754_sqrt+0x178>
 8004586:	2800      	cmp	r0, #0
 8004588:	db54      	blt.n	8004634 <__ieee754_sqrt+0x178>
 800458a:	f101 0801 	add.w	r8, r1, #1
 800458e:	1a5b      	subs	r3, r3, r1
 8004590:	4641      	mov	r1, r8
 8004592:	4596      	cmp	lr, r2
 8004594:	bf88      	it	hi
 8004596:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800459a:	eba2 020e 	sub.w	r2, r2, lr
 800459e:	4464      	add	r4, ip
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	3f01      	subs	r7, #1
 80045a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80045a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80045ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80045b0:	d1dd      	bne.n	800456e <__ieee754_sqrt+0xb2>
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d01b      	beq.n	80045ee <__ieee754_sqrt+0x132>
 80045b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004664 <__ieee754_sqrt+0x1a8>
 80045ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004668 <__ieee754_sqrt+0x1ac>
 80045be:	e9da 0100 	ldrd	r0, r1, [sl]
 80045c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80045c6:	f7fb fdcf 	bl	8000168 <__aeabi_dsub>
 80045ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4640      	mov	r0, r8
 80045d4:	4649      	mov	r1, r9
 80045d6:	f7fc f9fb 	bl	80009d0 <__aeabi_dcmple>
 80045da:	b140      	cbz	r0, 80045ee <__ieee754_sqrt+0x132>
 80045dc:	e9da 0100 	ldrd	r0, r1, [sl]
 80045e0:	e9db 2300 	ldrd	r2, r3, [fp]
 80045e4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80045e8:	d126      	bne.n	8004638 <__ieee754_sqrt+0x17c>
 80045ea:	463c      	mov	r4, r7
 80045ec:	3501      	adds	r5, #1
 80045ee:	106b      	asrs	r3, r5, #1
 80045f0:	0864      	lsrs	r4, r4, #1
 80045f2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80045f6:	07ea      	lsls	r2, r5, #31
 80045f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80045fc:	bf48      	it	mi
 80045fe:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004602:	4620      	mov	r0, r4
 8004604:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004608:	e76d      	b.n	80044e6 <__ieee754_sqrt+0x2a>
 800460a:	0ae3      	lsrs	r3, r4, #11
 800460c:	3915      	subs	r1, #21
 800460e:	0564      	lsls	r4, r4, #21
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0fa      	beq.n	800460a <__ieee754_sqrt+0x14e>
 8004614:	02d8      	lsls	r0, r3, #11
 8004616:	d50a      	bpl.n	800462e <__ieee754_sqrt+0x172>
 8004618:	f1c2 0020 	rsb	r0, r2, #32
 800461c:	fa24 f000 	lsr.w	r0, r4, r0
 8004620:	1e55      	subs	r5, r2, #1
 8004622:	4094      	lsls	r4, r2
 8004624:	4303      	orrs	r3, r0
 8004626:	1b4a      	subs	r2, r1, r5
 8004628:	e776      	b.n	8004518 <__ieee754_sqrt+0x5c>
 800462a:	4611      	mov	r1, r2
 800462c:	e7f0      	b.n	8004610 <__ieee754_sqrt+0x154>
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	3201      	adds	r2, #1
 8004632:	e7ef      	b.n	8004614 <__ieee754_sqrt+0x158>
 8004634:	4688      	mov	r8, r1
 8004636:	e7aa      	b.n	800458e <__ieee754_sqrt+0xd2>
 8004638:	f7fb fd98 	bl	800016c <__adddf3>
 800463c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4640      	mov	r0, r8
 8004646:	4649      	mov	r1, r9
 8004648:	f7fc f9b8 	bl	80009bc <__aeabi_dcmplt>
 800464c:	b120      	cbz	r0, 8004658 <__ieee754_sqrt+0x19c>
 800464e:	1ca1      	adds	r1, r4, #2
 8004650:	bf08      	it	eq
 8004652:	3501      	addeq	r5, #1
 8004654:	3402      	adds	r4, #2
 8004656:	e7ca      	b.n	80045ee <__ieee754_sqrt+0x132>
 8004658:	3401      	adds	r4, #1
 800465a:	f024 0401 	bic.w	r4, r4, #1
 800465e:	e7c6      	b.n	80045ee <__ieee754_sqrt+0x132>
 8004660:	7ff00000 	.word	0x7ff00000
 8004664:	20000010 	.word	0x20000010
 8004668:	20000018 	.word	0x20000018
 800466c:	00000000 	.word	0x00000000

08004670 <__ieee754_atan2>:
 8004670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004674:	4617      	mov	r7, r2
 8004676:	4692      	mov	sl, r2
 8004678:	4699      	mov	r9, r3
 800467a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800467e:	427b      	negs	r3, r7
 8004680:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004800 <__ieee754_atan2+0x190>
 8004684:	433b      	orrs	r3, r7
 8004686:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800468a:	4543      	cmp	r3, r8
 800468c:	4604      	mov	r4, r0
 800468e:	460d      	mov	r5, r1
 8004690:	d809      	bhi.n	80046a6 <__ieee754_atan2+0x36>
 8004692:	4246      	negs	r6, r0
 8004694:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004698:	4306      	orrs	r6, r0
 800469a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800469e:	4546      	cmp	r6, r8
 80046a0:	468e      	mov	lr, r1
 80046a2:	4683      	mov	fp, r0
 80046a4:	d908      	bls.n	80046b8 <__ieee754_atan2+0x48>
 80046a6:	4652      	mov	r2, sl
 80046a8:	464b      	mov	r3, r9
 80046aa:	4620      	mov	r0, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	f7fb fd5d 	bl	800016c <__adddf3>
 80046b2:	4604      	mov	r4, r0
 80046b4:	460d      	mov	r5, r1
 80046b6:	e019      	b.n	80046ec <__ieee754_atan2+0x7c>
 80046b8:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 80046bc:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80046c0:	433e      	orrs	r6, r7
 80046c2:	d103      	bne.n	80046cc <__ieee754_atan2+0x5c>
 80046c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c8:	f7ff bd6a 	b.w	80041a0 <atan>
 80046cc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80046d0:	f006 0602 	and.w	r6, r6, #2
 80046d4:	ea53 0b0b 	orrs.w	fp, r3, fp
 80046d8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80046dc:	d10a      	bne.n	80046f4 <__ieee754_atan2+0x84>
 80046de:	2e02      	cmp	r6, #2
 80046e0:	d067      	beq.n	80047b2 <__ieee754_atan2+0x142>
 80046e2:	2e03      	cmp	r6, #3
 80046e4:	d102      	bne.n	80046ec <__ieee754_atan2+0x7c>
 80046e6:	a53a      	add	r5, pc, #232	; (adr r5, 80047d0 <__ieee754_atan2+0x160>)
 80046e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f4:	4317      	orrs	r7, r2
 80046f6:	d106      	bne.n	8004706 <__ieee754_atan2+0x96>
 80046f8:	f1be 0f00 	cmp.w	lr, #0
 80046fc:	da64      	bge.n	80047c8 <__ieee754_atan2+0x158>
 80046fe:	a536      	add	r5, pc, #216	; (adr r5, 80047d8 <__ieee754_atan2+0x168>)
 8004700:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004704:	e7f2      	b.n	80046ec <__ieee754_atan2+0x7c>
 8004706:	4542      	cmp	r2, r8
 8004708:	d10f      	bne.n	800472a <__ieee754_atan2+0xba>
 800470a:	4293      	cmp	r3, r2
 800470c:	f106 36ff 	add.w	r6, r6, #4294967295
 8004710:	d107      	bne.n	8004722 <__ieee754_atan2+0xb2>
 8004712:	2e02      	cmp	r6, #2
 8004714:	d851      	bhi.n	80047ba <__ieee754_atan2+0x14a>
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <__ieee754_atan2+0x194>)
 8004718:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800471c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004720:	e7e4      	b.n	80046ec <__ieee754_atan2+0x7c>
 8004722:	2e02      	cmp	r6, #2
 8004724:	d84d      	bhi.n	80047c2 <__ieee754_atan2+0x152>
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <__ieee754_atan2+0x198>)
 8004728:	e7f6      	b.n	8004718 <__ieee754_atan2+0xa8>
 800472a:	4543      	cmp	r3, r8
 800472c:	d0e4      	beq.n	80046f8 <__ieee754_atan2+0x88>
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004734:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004738:	da21      	bge.n	800477e <__ieee754_atan2+0x10e>
 800473a:	f1b9 0f00 	cmp.w	r9, #0
 800473e:	da01      	bge.n	8004744 <__ieee754_atan2+0xd4>
 8004740:	323c      	adds	r2, #60	; 0x3c
 8004742:	db20      	blt.n	8004786 <__ieee754_atan2+0x116>
 8004744:	4652      	mov	r2, sl
 8004746:	464b      	mov	r3, r9
 8004748:	4620      	mov	r0, r4
 800474a:	4629      	mov	r1, r5
 800474c:	f7fb ffee 	bl	800072c <__aeabi_ddiv>
 8004750:	f7ff feb0 	bl	80044b4 <fabs>
 8004754:	f7ff fd24 	bl	80041a0 <atan>
 8004758:	4604      	mov	r4, r0
 800475a:	460d      	mov	r5, r1
 800475c:	2e01      	cmp	r6, #1
 800475e:	d015      	beq.n	800478c <__ieee754_atan2+0x11c>
 8004760:	2e02      	cmp	r6, #2
 8004762:	d017      	beq.n	8004794 <__ieee754_atan2+0x124>
 8004764:	2e00      	cmp	r6, #0
 8004766:	d0c1      	beq.n	80046ec <__ieee754_atan2+0x7c>
 8004768:	a31d      	add	r3, pc, #116	; (adr r3, 80047e0 <__ieee754_atan2+0x170>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	f7fb fcf9 	bl	8000168 <__aeabi_dsub>
 8004776:	a31c      	add	r3, pc, #112	; (adr r3, 80047e8 <__ieee754_atan2+0x178>)
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	e016      	b.n	80047ac <__ieee754_atan2+0x13c>
 800477e:	a51c      	add	r5, pc, #112	; (adr r5, 80047f0 <__ieee754_atan2+0x180>)
 8004780:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004784:	e7ea      	b.n	800475c <__ieee754_atan2+0xec>
 8004786:	2400      	movs	r4, #0
 8004788:	2500      	movs	r5, #0
 800478a:	e7e7      	b.n	800475c <__ieee754_atan2+0xec>
 800478c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004790:	461d      	mov	r5, r3
 8004792:	e7ab      	b.n	80046ec <__ieee754_atan2+0x7c>
 8004794:	a312      	add	r3, pc, #72	; (adr r3, 80047e0 <__ieee754_atan2+0x170>)
 8004796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb fce3 	bl	8000168 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	a110      	add	r1, pc, #64	; (adr r1, 80047e8 <__ieee754_atan2+0x178>)
 80047a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047ac:	f7fb fcdc 	bl	8000168 <__aeabi_dsub>
 80047b0:	e77f      	b.n	80046b2 <__ieee754_atan2+0x42>
 80047b2:	a50d      	add	r5, pc, #52	; (adr r5, 80047e8 <__ieee754_atan2+0x178>)
 80047b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80047b8:	e798      	b.n	80046ec <__ieee754_atan2+0x7c>
 80047ba:	a50f      	add	r5, pc, #60	; (adr r5, 80047f8 <__ieee754_atan2+0x188>)
 80047bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80047c0:	e794      	b.n	80046ec <__ieee754_atan2+0x7c>
 80047c2:	2400      	movs	r4, #0
 80047c4:	2500      	movs	r5, #0
 80047c6:	e791      	b.n	80046ec <__ieee754_atan2+0x7c>
 80047c8:	a509      	add	r5, pc, #36	; (adr r5, 80047f0 <__ieee754_atan2+0x180>)
 80047ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80047ce:	e78d      	b.n	80046ec <__ieee754_atan2+0x7c>
 80047d0:	54442d18 	.word	0x54442d18
 80047d4:	c00921fb 	.word	0xc00921fb
 80047d8:	54442d18 	.word	0x54442d18
 80047dc:	bff921fb 	.word	0xbff921fb
 80047e0:	33145c07 	.word	0x33145c07
 80047e4:	3ca1a626 	.word	0x3ca1a626
 80047e8:	54442d18 	.word	0x54442d18
 80047ec:	400921fb 	.word	0x400921fb
 80047f0:	54442d18 	.word	0x54442d18
 80047f4:	3ff921fb 	.word	0x3ff921fb
 80047f8:	54442d18 	.word	0x54442d18
 80047fc:	3fe921fb 	.word	0x3fe921fb
 8004800:	7ff00000 	.word	0x7ff00000
 8004804:	080075c8 	.word	0x080075c8
 8004808:	080075e0 	.word	0x080075e0

0800480c <__cvt>:
 800480c:	2b00      	cmp	r3, #0
 800480e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004812:	461f      	mov	r7, r3
 8004814:	bfbb      	ittet	lt
 8004816:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800481a:	461f      	movlt	r7, r3
 800481c:	2300      	movge	r3, #0
 800481e:	232d      	movlt	r3, #45	; 0x2d
 8004820:	b088      	sub	sp, #32
 8004822:	4614      	mov	r4, r2
 8004824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004826:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004828:	7013      	strb	r3, [r2, #0]
 800482a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800482c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004830:	f023 0820 	bic.w	r8, r3, #32
 8004834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004838:	d005      	beq.n	8004846 <__cvt+0x3a>
 800483a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800483e:	d100      	bne.n	8004842 <__cvt+0x36>
 8004840:	3501      	adds	r5, #1
 8004842:	2302      	movs	r3, #2
 8004844:	e000      	b.n	8004848 <__cvt+0x3c>
 8004846:	2303      	movs	r3, #3
 8004848:	aa07      	add	r2, sp, #28
 800484a:	9204      	str	r2, [sp, #16]
 800484c:	aa06      	add	r2, sp, #24
 800484e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004852:	e9cd 3500 	strd	r3, r5, [sp]
 8004856:	4622      	mov	r2, r4
 8004858:	463b      	mov	r3, r7
 800485a:	f000 fe71 	bl	8005540 <_dtoa_r>
 800485e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004862:	4606      	mov	r6, r0
 8004864:	d102      	bne.n	800486c <__cvt+0x60>
 8004866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004868:	07db      	lsls	r3, r3, #31
 800486a:	d522      	bpl.n	80048b2 <__cvt+0xa6>
 800486c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004870:	eb06 0905 	add.w	r9, r6, r5
 8004874:	d110      	bne.n	8004898 <__cvt+0x8c>
 8004876:	7833      	ldrb	r3, [r6, #0]
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d10a      	bne.n	8004892 <__cvt+0x86>
 800487c:	2200      	movs	r2, #0
 800487e:	2300      	movs	r3, #0
 8004880:	4620      	mov	r0, r4
 8004882:	4639      	mov	r1, r7
 8004884:	f7fc f890 	bl	80009a8 <__aeabi_dcmpeq>
 8004888:	b918      	cbnz	r0, 8004892 <__cvt+0x86>
 800488a:	f1c5 0501 	rsb	r5, r5, #1
 800488e:	f8ca 5000 	str.w	r5, [sl]
 8004892:	f8da 3000 	ldr.w	r3, [sl]
 8004896:	4499      	add	r9, r3
 8004898:	2200      	movs	r2, #0
 800489a:	2300      	movs	r3, #0
 800489c:	4620      	mov	r0, r4
 800489e:	4639      	mov	r1, r7
 80048a0:	f7fc f882 	bl	80009a8 <__aeabi_dcmpeq>
 80048a4:	b108      	cbz	r0, 80048aa <__cvt+0x9e>
 80048a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80048aa:	2230      	movs	r2, #48	; 0x30
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	454b      	cmp	r3, r9
 80048b0:	d307      	bcc.n	80048c2 <__cvt+0xb6>
 80048b2:	4630      	mov	r0, r6
 80048b4:	9b07      	ldr	r3, [sp, #28]
 80048b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80048b8:	1b9b      	subs	r3, r3, r6
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	b008      	add	sp, #32
 80048be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c2:	1c59      	adds	r1, r3, #1
 80048c4:	9107      	str	r1, [sp, #28]
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	e7f0      	b.n	80048ac <__cvt+0xa0>

080048ca <__exponent>:
 80048ca:	4603      	mov	r3, r0
 80048cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ce:	2900      	cmp	r1, #0
 80048d0:	f803 2b02 	strb.w	r2, [r3], #2
 80048d4:	bfb6      	itet	lt
 80048d6:	222d      	movlt	r2, #45	; 0x2d
 80048d8:	222b      	movge	r2, #43	; 0x2b
 80048da:	4249      	neglt	r1, r1
 80048dc:	2909      	cmp	r1, #9
 80048de:	7042      	strb	r2, [r0, #1]
 80048e0:	dd2a      	ble.n	8004938 <__exponent+0x6e>
 80048e2:	f10d 0207 	add.w	r2, sp, #7
 80048e6:	4617      	mov	r7, r2
 80048e8:	260a      	movs	r6, #10
 80048ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80048ee:	4694      	mov	ip, r2
 80048f0:	fb06 1415 	mls	r4, r6, r5, r1
 80048f4:	3430      	adds	r4, #48	; 0x30
 80048f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80048fa:	460c      	mov	r4, r1
 80048fc:	2c63      	cmp	r4, #99	; 0x63
 80048fe:	4629      	mov	r1, r5
 8004900:	f102 32ff 	add.w	r2, r2, #4294967295
 8004904:	dcf1      	bgt.n	80048ea <__exponent+0x20>
 8004906:	3130      	adds	r1, #48	; 0x30
 8004908:	f1ac 0402 	sub.w	r4, ip, #2
 800490c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004910:	4622      	mov	r2, r4
 8004912:	1c41      	adds	r1, r0, #1
 8004914:	42ba      	cmp	r2, r7
 8004916:	d30a      	bcc.n	800492e <__exponent+0x64>
 8004918:	f10d 0209 	add.w	r2, sp, #9
 800491c:	eba2 020c 	sub.w	r2, r2, ip
 8004920:	42bc      	cmp	r4, r7
 8004922:	bf88      	it	hi
 8004924:	2200      	movhi	r2, #0
 8004926:	4413      	add	r3, r2
 8004928:	1a18      	subs	r0, r3, r0
 800492a:	b003      	add	sp, #12
 800492c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004932:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004936:	e7ed      	b.n	8004914 <__exponent+0x4a>
 8004938:	2330      	movs	r3, #48	; 0x30
 800493a:	3130      	adds	r1, #48	; 0x30
 800493c:	7083      	strb	r3, [r0, #2]
 800493e:	70c1      	strb	r1, [r0, #3]
 8004940:	1d03      	adds	r3, r0, #4
 8004942:	e7f1      	b.n	8004928 <__exponent+0x5e>

08004944 <_printf_float>:
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	b091      	sub	sp, #68	; 0x44
 800494a:	460c      	mov	r4, r1
 800494c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004950:	4616      	mov	r6, r2
 8004952:	461f      	mov	r7, r3
 8004954:	4605      	mov	r5, r0
 8004956:	f000 fce5 	bl	8005324 <_localeconv_r>
 800495a:	6803      	ldr	r3, [r0, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	9309      	str	r3, [sp, #36]	; 0x24
 8004960:	f7fb fbf6 	bl	8000150 <strlen>
 8004964:	2300      	movs	r3, #0
 8004966:	930e      	str	r3, [sp, #56]	; 0x38
 8004968:	f8d8 3000 	ldr.w	r3, [r8]
 800496c:	900a      	str	r0, [sp, #40]	; 0x28
 800496e:	3307      	adds	r3, #7
 8004970:	f023 0307 	bic.w	r3, r3, #7
 8004974:	f103 0208 	add.w	r2, r3, #8
 8004978:	f894 9018 	ldrb.w	r9, [r4, #24]
 800497c:	f8d4 b000 	ldr.w	fp, [r4]
 8004980:	f8c8 2000 	str.w	r2, [r8]
 8004984:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004988:	4652      	mov	r2, sl
 800498a:	4643      	mov	r3, r8
 800498c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004990:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004994:	930b      	str	r3, [sp, #44]	; 0x2c
 8004996:	f04f 32ff 	mov.w	r2, #4294967295
 800499a:	4650      	mov	r0, sl
 800499c:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <_printf_float+0x2cc>)
 800499e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049a0:	f7fc f834 	bl	8000a0c <__aeabi_dcmpun>
 80049a4:	bb70      	cbnz	r0, 8004a04 <_printf_float+0xc0>
 80049a6:	f04f 32ff 	mov.w	r2, #4294967295
 80049aa:	4650      	mov	r0, sl
 80049ac:	4b98      	ldr	r3, [pc, #608]	; (8004c10 <_printf_float+0x2cc>)
 80049ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049b0:	f7fc f80e 	bl	80009d0 <__aeabi_dcmple>
 80049b4:	bb30      	cbnz	r0, 8004a04 <_printf_float+0xc0>
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	4650      	mov	r0, sl
 80049bc:	4641      	mov	r1, r8
 80049be:	f7fb fffd 	bl	80009bc <__aeabi_dcmplt>
 80049c2:	b110      	cbz	r0, 80049ca <_printf_float+0x86>
 80049c4:	232d      	movs	r3, #45	; 0x2d
 80049c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ca:	4a92      	ldr	r2, [pc, #584]	; (8004c14 <_printf_float+0x2d0>)
 80049cc:	4b92      	ldr	r3, [pc, #584]	; (8004c18 <_printf_float+0x2d4>)
 80049ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049d2:	bf94      	ite	ls
 80049d4:	4690      	movls	r8, r2
 80049d6:	4698      	movhi	r8, r3
 80049d8:	2303      	movs	r3, #3
 80049da:	f04f 0a00 	mov.w	sl, #0
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	f02b 0304 	bic.w	r3, fp, #4
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	4633      	mov	r3, r6
 80049e8:	4621      	mov	r1, r4
 80049ea:	4628      	mov	r0, r5
 80049ec:	9700      	str	r7, [sp, #0]
 80049ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80049f0:	f000 f9d6 	bl	8004da0 <_printf_common>
 80049f4:	3001      	adds	r0, #1
 80049f6:	f040 8090 	bne.w	8004b1a <_printf_float+0x1d6>
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	b011      	add	sp, #68	; 0x44
 8004a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a04:	4652      	mov	r2, sl
 8004a06:	4643      	mov	r3, r8
 8004a08:	4650      	mov	r0, sl
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	f7fb fffe 	bl	8000a0c <__aeabi_dcmpun>
 8004a10:	b148      	cbz	r0, 8004a26 <_printf_float+0xe2>
 8004a12:	f1b8 0f00 	cmp.w	r8, #0
 8004a16:	bfb8      	it	lt
 8004a18:	232d      	movlt	r3, #45	; 0x2d
 8004a1a:	4a80      	ldr	r2, [pc, #512]	; (8004c1c <_printf_float+0x2d8>)
 8004a1c:	bfb8      	it	lt
 8004a1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a22:	4b7f      	ldr	r3, [pc, #508]	; (8004c20 <_printf_float+0x2dc>)
 8004a24:	e7d3      	b.n	80049ce <_printf_float+0x8a>
 8004a26:	6863      	ldr	r3, [r4, #4]
 8004a28:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	d142      	bne.n	8004ab6 <_printf_float+0x172>
 8004a30:	2306      	movs	r3, #6
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	9206      	str	r2, [sp, #24]
 8004a38:	aa0e      	add	r2, sp, #56	; 0x38
 8004a3a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a3e:	aa0d      	add	r2, sp, #52	; 0x34
 8004a40:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a44:	9203      	str	r2, [sp, #12]
 8004a46:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	6863      	ldr	r3, [r4, #4]
 8004a52:	4652      	mov	r2, sl
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	4628      	mov	r0, r5
 8004a58:	4643      	mov	r3, r8
 8004a5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a5c:	f7ff fed6 	bl	800480c <__cvt>
 8004a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a62:	4680      	mov	r8, r0
 8004a64:	2947      	cmp	r1, #71	; 0x47
 8004a66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a68:	d108      	bne.n	8004a7c <_printf_float+0x138>
 8004a6a:	1cc8      	adds	r0, r1, #3
 8004a6c:	db02      	blt.n	8004a74 <_printf_float+0x130>
 8004a6e:	6863      	ldr	r3, [r4, #4]
 8004a70:	4299      	cmp	r1, r3
 8004a72:	dd40      	ble.n	8004af6 <_printf_float+0x1b2>
 8004a74:	f1a9 0902 	sub.w	r9, r9, #2
 8004a78:	fa5f f989 	uxtb.w	r9, r9
 8004a7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a80:	d81f      	bhi.n	8004ac2 <_printf_float+0x17e>
 8004a82:	464a      	mov	r2, r9
 8004a84:	3901      	subs	r1, #1
 8004a86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a8a:	910d      	str	r1, [sp, #52]	; 0x34
 8004a8c:	f7ff ff1d 	bl	80048ca <__exponent>
 8004a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a92:	4682      	mov	sl, r0
 8004a94:	1813      	adds	r3, r2, r0
 8004a96:	2a01      	cmp	r2, #1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	dc02      	bgt.n	8004aa2 <_printf_float+0x15e>
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	07d2      	lsls	r2, r2, #31
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_float+0x162>
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	6123      	str	r3, [r4, #16]
 8004aa6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d09b      	beq.n	80049e6 <_printf_float+0xa2>
 8004aae:	232d      	movs	r3, #45	; 0x2d
 8004ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab4:	e797      	b.n	80049e6 <_printf_float+0xa2>
 8004ab6:	2947      	cmp	r1, #71	; 0x47
 8004ab8:	d1bc      	bne.n	8004a34 <_printf_float+0xf0>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1ba      	bne.n	8004a34 <_printf_float+0xf0>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e7b7      	b.n	8004a32 <_printf_float+0xee>
 8004ac2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ac6:	d118      	bne.n	8004afa <_printf_float+0x1b6>
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	6863      	ldr	r3, [r4, #4]
 8004acc:	dd0b      	ble.n	8004ae6 <_printf_float+0x1a2>
 8004ace:	6121      	str	r1, [r4, #16]
 8004ad0:	b913      	cbnz	r3, 8004ad8 <_printf_float+0x194>
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	07d0      	lsls	r0, r2, #31
 8004ad6:	d502      	bpl.n	8004ade <_printf_float+0x19a>
 8004ad8:	3301      	adds	r3, #1
 8004ada:	440b      	add	r3, r1
 8004adc:	6123      	str	r3, [r4, #16]
 8004ade:	f04f 0a00 	mov.w	sl, #0
 8004ae2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ae4:	e7df      	b.n	8004aa6 <_printf_float+0x162>
 8004ae6:	b913      	cbnz	r3, 8004aee <_printf_float+0x1aa>
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	07d2      	lsls	r2, r2, #31
 8004aec:	d501      	bpl.n	8004af2 <_printf_float+0x1ae>
 8004aee:	3302      	adds	r3, #2
 8004af0:	e7f4      	b.n	8004adc <_printf_float+0x198>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7f2      	b.n	8004adc <_printf_float+0x198>
 8004af6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004afc:	4299      	cmp	r1, r3
 8004afe:	db05      	blt.n	8004b0c <_printf_float+0x1c8>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	6121      	str	r1, [r4, #16]
 8004b04:	07d8      	lsls	r0, r3, #31
 8004b06:	d5ea      	bpl.n	8004ade <_printf_float+0x19a>
 8004b08:	1c4b      	adds	r3, r1, #1
 8004b0a:	e7e7      	b.n	8004adc <_printf_float+0x198>
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	bfcc      	ite	gt
 8004b10:	2201      	movgt	r2, #1
 8004b12:	f1c1 0202 	rsble	r2, r1, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	e7e0      	b.n	8004adc <_printf_float+0x198>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	055a      	lsls	r2, r3, #21
 8004b1e:	d407      	bmi.n	8004b30 <_printf_float+0x1ec>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	4642      	mov	r2, r8
 8004b24:	4631      	mov	r1, r6
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d12b      	bne.n	8004b86 <_printf_float+0x242>
 8004b2e:	e764      	b.n	80049fa <_printf_float+0xb6>
 8004b30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b34:	f240 80dd 	bls.w	8004cf2 <_printf_float+0x3ae>
 8004b38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f7fb ff32 	bl	80009a8 <__aeabi_dcmpeq>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d033      	beq.n	8004bb0 <_printf_float+0x26c>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4628      	mov	r0, r5
 8004b4e:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <_printf_float+0x2e0>)
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f af51 	beq.w	80049fa <_printf_float+0xb6>
 8004b58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	db02      	blt.n	8004b66 <_printf_float+0x222>
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	07d8      	lsls	r0, r3, #31
 8004b64:	d50f      	bpl.n	8004b86 <_printf_float+0x242>
 8004b66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f af42 	beq.w	80049fa <_printf_float+0xb6>
 8004b76:	f04f 0800 	mov.w	r8, #0
 8004b7a:	f104 091a 	add.w	r9, r4, #26
 8004b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b80:	3b01      	subs	r3, #1
 8004b82:	4543      	cmp	r3, r8
 8004b84:	dc09      	bgt.n	8004b9a <_printf_float+0x256>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	079b      	lsls	r3, r3, #30
 8004b8a:	f100 8104 	bmi.w	8004d96 <_printf_float+0x452>
 8004b8e:	68e0      	ldr	r0, [r4, #12]
 8004b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b92:	4298      	cmp	r0, r3
 8004b94:	bfb8      	it	lt
 8004b96:	4618      	movlt	r0, r3
 8004b98:	e731      	b.n	80049fe <_printf_float+0xba>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	464a      	mov	r2, r9
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f43f af28 	beq.w	80049fa <_printf_float+0xb6>
 8004baa:	f108 0801 	add.w	r8, r8, #1
 8004bae:	e7e6      	b.n	8004b7e <_printf_float+0x23a>
 8004bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dc38      	bgt.n	8004c28 <_printf_float+0x2e4>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <_printf_float+0x2e0>)
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f af1a 	beq.w	80049fa <_printf_float+0xb6>
 8004bc6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	d102      	bne.n	8004bd4 <_printf_float+0x290>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	07d9      	lsls	r1, r3, #31
 8004bd2:	d5d8      	bpl.n	8004b86 <_printf_float+0x242>
 8004bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f af0b 	beq.w	80049fa <_printf_float+0xb6>
 8004be4:	f04f 0900 	mov.w	r9, #0
 8004be8:	f104 0a1a 	add.w	sl, r4, #26
 8004bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bee:	425b      	negs	r3, r3
 8004bf0:	454b      	cmp	r3, r9
 8004bf2:	dc01      	bgt.n	8004bf8 <_printf_float+0x2b4>
 8004bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf6:	e794      	b.n	8004b22 <_printf_float+0x1de>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f aef9 	beq.w	80049fa <_printf_float+0xb6>
 8004c08:	f109 0901 	add.w	r9, r9, #1
 8004c0c:	e7ee      	b.n	8004bec <_printf_float+0x2a8>
 8004c0e:	bf00      	nop
 8004c10:	7fefffff 	.word	0x7fefffff
 8004c14:	080075f8 	.word	0x080075f8
 8004c18:	080075fc 	.word	0x080075fc
 8004c1c:	08007600 	.word	0x08007600
 8004c20:	08007604 	.word	0x08007604
 8004c24:	08007608 	.word	0x08007608
 8004c28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	bfa8      	it	ge
 8004c30:	461a      	movge	r2, r3
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	4691      	mov	r9, r2
 8004c36:	dc37      	bgt.n	8004ca8 <_printf_float+0x364>
 8004c38:	f04f 0b00 	mov.w	fp, #0
 8004c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c40:	f104 021a 	add.w	r2, r4, #26
 8004c44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c48:	ebaa 0309 	sub.w	r3, sl, r9
 8004c4c:	455b      	cmp	r3, fp
 8004c4e:	dc33      	bgt.n	8004cb8 <_printf_float+0x374>
 8004c50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c54:	429a      	cmp	r2, r3
 8004c56:	db3b      	blt.n	8004cd0 <_printf_float+0x38c>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07da      	lsls	r2, r3, #31
 8004c5c:	d438      	bmi.n	8004cd0 <_printf_float+0x38c>
 8004c5e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c62:	eba2 0903 	sub.w	r9, r2, r3
 8004c66:	eba2 020a 	sub.w	r2, r2, sl
 8004c6a:	4591      	cmp	r9, r2
 8004c6c:	bfa8      	it	ge
 8004c6e:	4691      	movge	r9, r2
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	dc34      	bgt.n	8004ce0 <_printf_float+0x39c>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7e:	f104 0a1a 	add.w	sl, r4, #26
 8004c82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c86:	1a9b      	subs	r3, r3, r2
 8004c88:	eba3 0309 	sub.w	r3, r3, r9
 8004c8c:	4543      	cmp	r3, r8
 8004c8e:	f77f af7a 	ble.w	8004b86 <_printf_float+0x242>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f aeac 	beq.w	80049fa <_printf_float+0xb6>
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	e7ec      	b.n	8004c82 <_printf_float+0x33e>
 8004ca8:	4613      	mov	r3, r2
 8004caa:	4631      	mov	r1, r6
 8004cac:	4642      	mov	r2, r8
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d1c0      	bne.n	8004c38 <_printf_float+0x2f4>
 8004cb6:	e6a0      	b.n	80049fa <_printf_float+0xb6>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f43f ae99 	beq.w	80049fa <_printf_float+0xb6>
 8004cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cca:	f10b 0b01 	add.w	fp, fp, #1
 8004cce:	e7b9      	b.n	8004c44 <_printf_float+0x300>
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d1bf      	bne.n	8004c5e <_printf_float+0x31a>
 8004cde:	e68c      	b.n	80049fa <_printf_float+0xb6>
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	eb08 020a 	add.w	r2, r8, sl
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	d1c2      	bne.n	8004c76 <_printf_float+0x332>
 8004cf0:	e683      	b.n	80049fa <_printf_float+0xb6>
 8004cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cf4:	2a01      	cmp	r2, #1
 8004cf6:	dc01      	bgt.n	8004cfc <_printf_float+0x3b8>
 8004cf8:	07db      	lsls	r3, r3, #31
 8004cfa:	d539      	bpl.n	8004d70 <_printf_float+0x42c>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4642      	mov	r2, r8
 8004d00:	4631      	mov	r1, r6
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b8      	blx	r7
 8004d06:	3001      	adds	r0, #1
 8004d08:	f43f ae77 	beq.w	80049fa <_printf_float+0xb6>
 8004d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f ae6f 	beq.w	80049fa <_printf_float+0xb6>
 8004d1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d20:	2200      	movs	r2, #0
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004d28:	f7fb fe3e 	bl	80009a8 <__aeabi_dcmpeq>
 8004d2c:	b9d8      	cbnz	r0, 8004d66 <_printf_float+0x422>
 8004d2e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004d32:	f108 0201 	add.w	r2, r8, #1
 8004d36:	4631      	mov	r1, r6
 8004d38:	4628      	mov	r0, r5
 8004d3a:	47b8      	blx	r7
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d10e      	bne.n	8004d5e <_printf_float+0x41a>
 8004d40:	e65b      	b.n	80049fa <_printf_float+0xb6>
 8004d42:	2301      	movs	r3, #1
 8004d44:	464a      	mov	r2, r9
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f ae54 	beq.w	80049fa <_printf_float+0xb6>
 8004d52:	f108 0801 	add.w	r8, r8, #1
 8004d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4543      	cmp	r3, r8
 8004d5c:	dcf1      	bgt.n	8004d42 <_printf_float+0x3fe>
 8004d5e:	4653      	mov	r3, sl
 8004d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d64:	e6de      	b.n	8004b24 <_printf_float+0x1e0>
 8004d66:	f04f 0800 	mov.w	r8, #0
 8004d6a:	f104 091a 	add.w	r9, r4, #26
 8004d6e:	e7f2      	b.n	8004d56 <_printf_float+0x412>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4642      	mov	r2, r8
 8004d74:	e7df      	b.n	8004d36 <_printf_float+0x3f2>
 8004d76:	2301      	movs	r3, #1
 8004d78:	464a      	mov	r2, r9
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	47b8      	blx	r7
 8004d80:	3001      	adds	r0, #1
 8004d82:	f43f ae3a 	beq.w	80049fa <_printf_float+0xb6>
 8004d86:	f108 0801 	add.w	r8, r8, #1
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d8e:	1a5b      	subs	r3, r3, r1
 8004d90:	4543      	cmp	r3, r8
 8004d92:	dcf0      	bgt.n	8004d76 <_printf_float+0x432>
 8004d94:	e6fb      	b.n	8004b8e <_printf_float+0x24a>
 8004d96:	f04f 0800 	mov.w	r8, #0
 8004d9a:	f104 0919 	add.w	r9, r4, #25
 8004d9e:	e7f4      	b.n	8004d8a <_printf_float+0x446>

08004da0 <_printf_common>:
 8004da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004da4:	4616      	mov	r6, r2
 8004da6:	4699      	mov	r9, r3
 8004da8:	688a      	ldr	r2, [r1, #8]
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	4607      	mov	r7, r0
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bfb8      	it	lt
 8004db2:	4613      	movlt	r3, r2
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dba:	460c      	mov	r4, r1
 8004dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dc0:	b10a      	cbz	r2, 8004dc6 <_printf_common+0x26>
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	6033      	str	r3, [r6, #0]
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	0699      	lsls	r1, r3, #26
 8004dca:	bf42      	ittt	mi
 8004dcc:	6833      	ldrmi	r3, [r6, #0]
 8004dce:	3302      	addmi	r3, #2
 8004dd0:	6033      	strmi	r3, [r6, #0]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	f015 0506 	ands.w	r5, r5, #6
 8004dd8:	d106      	bne.n	8004de8 <_printf_common+0x48>
 8004dda:	f104 0a19 	add.w	sl, r4, #25
 8004dde:	68e3      	ldr	r3, [r4, #12]
 8004de0:	6832      	ldr	r2, [r6, #0]
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	dc2b      	bgt.n	8004e40 <_printf_common+0xa0>
 8004de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dec:	1e13      	subs	r3, r2, #0
 8004dee:	6822      	ldr	r2, [r4, #0]
 8004df0:	bf18      	it	ne
 8004df2:	2301      	movne	r3, #1
 8004df4:	0692      	lsls	r2, r2, #26
 8004df6:	d430      	bmi.n	8004e5a <_printf_common+0xba>
 8004df8:	4649      	mov	r1, r9
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e00:	47c0      	blx	r8
 8004e02:	3001      	adds	r0, #1
 8004e04:	d023      	beq.n	8004e4e <_printf_common+0xae>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	bf14      	ite	ne
 8004e12:	2500      	movne	r5, #0
 8004e14:	6833      	ldreq	r3, [r6, #0]
 8004e16:	f04f 0600 	mov.w	r6, #0
 8004e1a:	bf08      	it	eq
 8004e1c:	68e5      	ldreq	r5, [r4, #12]
 8004e1e:	f104 041a 	add.w	r4, r4, #26
 8004e22:	bf08      	it	eq
 8004e24:	1aed      	subeq	r5, r5, r3
 8004e26:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e2a:	bf08      	it	eq
 8004e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e30:	4293      	cmp	r3, r2
 8004e32:	bfc4      	itt	gt
 8004e34:	1a9b      	subgt	r3, r3, r2
 8004e36:	18ed      	addgt	r5, r5, r3
 8004e38:	42b5      	cmp	r5, r6
 8004e3a:	d11a      	bne.n	8004e72 <_printf_common+0xd2>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	e008      	b.n	8004e52 <_printf_common+0xb2>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4652      	mov	r2, sl
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d103      	bne.n	8004e56 <_printf_common+0xb6>
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e56:	3501      	adds	r5, #1
 8004e58:	e7c1      	b.n	8004dde <_printf_common+0x3e>
 8004e5a:	2030      	movs	r0, #48	; 0x30
 8004e5c:	18e1      	adds	r1, r4, r3
 8004e5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e68:	4422      	add	r2, r4
 8004e6a:	3302      	adds	r3, #2
 8004e6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e70:	e7c2      	b.n	8004df8 <_printf_common+0x58>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4622      	mov	r2, r4
 8004e76:	4649      	mov	r1, r9
 8004e78:	4638      	mov	r0, r7
 8004e7a:	47c0      	blx	r8
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d0e6      	beq.n	8004e4e <_printf_common+0xae>
 8004e80:	3601      	adds	r6, #1
 8004e82:	e7d9      	b.n	8004e38 <_printf_common+0x98>

08004e84 <_printf_i>:
 8004e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	7e0f      	ldrb	r7, [r1, #24]
 8004e8a:	4691      	mov	r9, r2
 8004e8c:	2f78      	cmp	r7, #120	; 0x78
 8004e8e:	4680      	mov	r8, r0
 8004e90:	460c      	mov	r4, r1
 8004e92:	469a      	mov	sl, r3
 8004e94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e9a:	d807      	bhi.n	8004eac <_printf_i+0x28>
 8004e9c:	2f62      	cmp	r7, #98	; 0x62
 8004e9e:	d80a      	bhi.n	8004eb6 <_printf_i+0x32>
 8004ea0:	2f00      	cmp	r7, #0
 8004ea2:	f000 80d5 	beq.w	8005050 <_printf_i+0x1cc>
 8004ea6:	2f58      	cmp	r7, #88	; 0x58
 8004ea8:	f000 80c1 	beq.w	800502e <_printf_i+0x1aa>
 8004eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004eb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eb4:	e03a      	b.n	8004f2c <_printf_i+0xa8>
 8004eb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eba:	2b15      	cmp	r3, #21
 8004ebc:	d8f6      	bhi.n	8004eac <_printf_i+0x28>
 8004ebe:	a101      	add	r1, pc, #4	; (adr r1, 8004ec4 <_printf_i+0x40>)
 8004ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f31 	.word	0x08004f31
 8004ecc:	08004ead 	.word	0x08004ead
 8004ed0:	08004ead 	.word	0x08004ead
 8004ed4:	08004ead 	.word	0x08004ead
 8004ed8:	08004ead 	.word	0x08004ead
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004ead 	.word	0x08004ead
 8004ee4:	08004ead 	.word	0x08004ead
 8004ee8:	08004ead 	.word	0x08004ead
 8004eec:	08004ead 	.word	0x08004ead
 8004ef0:	08005037 	.word	0x08005037
 8004ef4:	08004f5d 	.word	0x08004f5d
 8004ef8:	08004ff1 	.word	0x08004ff1
 8004efc:	08004ead 	.word	0x08004ead
 8004f00:	08004ead 	.word	0x08004ead
 8004f04:	08005059 	.word	0x08005059
 8004f08:	08004ead 	.word	0x08004ead
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	08004ead 	.word	0x08004ead
 8004f14:	08004ead 	.word	0x08004ead
 8004f18:	08004ff9 	.word	0x08004ff9
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	1d1a      	adds	r2, r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	602a      	str	r2, [r5, #0]
 8004f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0a0      	b.n	8005072 <_printf_i+0x1ee>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	0607      	lsls	r7, r0, #24
 8004f36:	f103 0104 	add.w	r1, r3, #4
 8004f3a:	6029      	str	r1, [r5, #0]
 8004f3c:	d501      	bpl.n	8004f42 <_printf_i+0xbe>
 8004f3e:	681e      	ldr	r6, [r3, #0]
 8004f40:	e003      	b.n	8004f4a <_printf_i+0xc6>
 8004f42:	0646      	lsls	r6, r0, #25
 8004f44:	d5fb      	bpl.n	8004f3e <_printf_i+0xba>
 8004f46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	da03      	bge.n	8004f56 <_printf_i+0xd2>
 8004f4e:	232d      	movs	r3, #45	; 0x2d
 8004f50:	4276      	negs	r6, r6
 8004f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f56:	230a      	movs	r3, #10
 8004f58:	4859      	ldr	r0, [pc, #356]	; (80050c0 <_printf_i+0x23c>)
 8004f5a:	e012      	b.n	8004f82 <_printf_i+0xfe>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	6820      	ldr	r0, [r4, #0]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	6029      	str	r1, [r5, #0]
 8004f64:	0605      	lsls	r5, r0, #24
 8004f66:	d501      	bpl.n	8004f6c <_printf_i+0xe8>
 8004f68:	681e      	ldr	r6, [r3, #0]
 8004f6a:	e002      	b.n	8004f72 <_printf_i+0xee>
 8004f6c:	0641      	lsls	r1, r0, #25
 8004f6e:	d5fb      	bpl.n	8004f68 <_printf_i+0xe4>
 8004f70:	881e      	ldrh	r6, [r3, #0]
 8004f72:	2f6f      	cmp	r7, #111	; 0x6f
 8004f74:	bf0c      	ite	eq
 8004f76:	2308      	moveq	r3, #8
 8004f78:	230a      	movne	r3, #10
 8004f7a:	4851      	ldr	r0, [pc, #324]	; (80050c0 <_printf_i+0x23c>)
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f82:	6865      	ldr	r5, [r4, #4]
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	bfa8      	it	ge
 8004f88:	6821      	ldrge	r1, [r4, #0]
 8004f8a:	60a5      	str	r5, [r4, #8]
 8004f8c:	bfa4      	itt	ge
 8004f8e:	f021 0104 	bicge.w	r1, r1, #4
 8004f92:	6021      	strge	r1, [r4, #0]
 8004f94:	b90e      	cbnz	r6, 8004f9a <_printf_i+0x116>
 8004f96:	2d00      	cmp	r5, #0
 8004f98:	d04b      	beq.n	8005032 <_printf_i+0x1ae>
 8004f9a:	4615      	mov	r5, r2
 8004f9c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fa0:	fb03 6711 	mls	r7, r3, r1, r6
 8004fa4:	5dc7      	ldrb	r7, [r0, r7]
 8004fa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004faa:	4637      	mov	r7, r6
 8004fac:	42bb      	cmp	r3, r7
 8004fae:	460e      	mov	r6, r1
 8004fb0:	d9f4      	bls.n	8004f9c <_printf_i+0x118>
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d10b      	bne.n	8004fce <_printf_i+0x14a>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	07de      	lsls	r6, r3, #31
 8004fba:	d508      	bpl.n	8004fce <_printf_i+0x14a>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	6861      	ldr	r1, [r4, #4]
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	bfde      	ittt	le
 8004fc4:	2330      	movle	r3, #48	; 0x30
 8004fc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fce:	1b52      	subs	r2, r2, r5
 8004fd0:	6122      	str	r2, [r4, #16]
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f8cd a000 	str.w	sl, [sp]
 8004fdc:	aa03      	add	r2, sp, #12
 8004fde:	f7ff fedf 	bl	8004da0 <_printf_common>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d14a      	bne.n	800507c <_printf_i+0x1f8>
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	b004      	add	sp, #16
 8004fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	f043 0320 	orr.w	r3, r3, #32
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	2778      	movs	r7, #120	; 0x78
 8004ffa:	4832      	ldr	r0, [pc, #200]	; (80050c4 <_printf_i+0x240>)
 8004ffc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	6829      	ldr	r1, [r5, #0]
 8005004:	061f      	lsls	r7, r3, #24
 8005006:	f851 6b04 	ldr.w	r6, [r1], #4
 800500a:	d402      	bmi.n	8005012 <_printf_i+0x18e>
 800500c:	065f      	lsls	r7, r3, #25
 800500e:	bf48      	it	mi
 8005010:	b2b6      	uxthmi	r6, r6
 8005012:	07df      	lsls	r7, r3, #31
 8005014:	bf48      	it	mi
 8005016:	f043 0320 	orrmi.w	r3, r3, #32
 800501a:	6029      	str	r1, [r5, #0]
 800501c:	bf48      	it	mi
 800501e:	6023      	strmi	r3, [r4, #0]
 8005020:	b91e      	cbnz	r6, 800502a <_printf_i+0x1a6>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f023 0320 	bic.w	r3, r3, #32
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	2310      	movs	r3, #16
 800502c:	e7a6      	b.n	8004f7c <_printf_i+0xf8>
 800502e:	4824      	ldr	r0, [pc, #144]	; (80050c0 <_printf_i+0x23c>)
 8005030:	e7e4      	b.n	8004ffc <_printf_i+0x178>
 8005032:	4615      	mov	r5, r2
 8005034:	e7bd      	b.n	8004fb2 <_printf_i+0x12e>
 8005036:	682b      	ldr	r3, [r5, #0]
 8005038:	6826      	ldr	r6, [r4, #0]
 800503a:	1d18      	adds	r0, r3, #4
 800503c:	6961      	ldr	r1, [r4, #20]
 800503e:	6028      	str	r0, [r5, #0]
 8005040:	0635      	lsls	r5, r6, #24
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	d501      	bpl.n	800504a <_printf_i+0x1c6>
 8005046:	6019      	str	r1, [r3, #0]
 8005048:	e002      	b.n	8005050 <_printf_i+0x1cc>
 800504a:	0670      	lsls	r0, r6, #25
 800504c:	d5fb      	bpl.n	8005046 <_printf_i+0x1c2>
 800504e:	8019      	strh	r1, [r3, #0]
 8005050:	2300      	movs	r3, #0
 8005052:	4615      	mov	r5, r2
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	e7bc      	b.n	8004fd2 <_printf_i+0x14e>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	2100      	movs	r1, #0
 800505c:	1d1a      	adds	r2, r3, #4
 800505e:	602a      	str	r2, [r5, #0]
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	6862      	ldr	r2, [r4, #4]
 8005064:	4628      	mov	r0, r5
 8005066:	f000 f9d4 	bl	8005412 <memchr>
 800506a:	b108      	cbz	r0, 8005070 <_printf_i+0x1ec>
 800506c:	1b40      	subs	r0, r0, r5
 800506e:	6060      	str	r0, [r4, #4]
 8005070:	6863      	ldr	r3, [r4, #4]
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	2300      	movs	r3, #0
 8005076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507a:	e7aa      	b.n	8004fd2 <_printf_i+0x14e>
 800507c:	462a      	mov	r2, r5
 800507e:	4649      	mov	r1, r9
 8005080:	4640      	mov	r0, r8
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	47d0      	blx	sl
 8005086:	3001      	adds	r0, #1
 8005088:	d0ad      	beq.n	8004fe6 <_printf_i+0x162>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	079b      	lsls	r3, r3, #30
 800508e:	d413      	bmi.n	80050b8 <_printf_i+0x234>
 8005090:	68e0      	ldr	r0, [r4, #12]
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	4298      	cmp	r0, r3
 8005096:	bfb8      	it	lt
 8005098:	4618      	movlt	r0, r3
 800509a:	e7a6      	b.n	8004fea <_printf_i+0x166>
 800509c:	2301      	movs	r3, #1
 800509e:	4632      	mov	r2, r6
 80050a0:	4649      	mov	r1, r9
 80050a2:	4640      	mov	r0, r8
 80050a4:	47d0      	blx	sl
 80050a6:	3001      	adds	r0, #1
 80050a8:	d09d      	beq.n	8004fe6 <_printf_i+0x162>
 80050aa:	3501      	adds	r5, #1
 80050ac:	68e3      	ldr	r3, [r4, #12]
 80050ae:	9903      	ldr	r1, [sp, #12]
 80050b0:	1a5b      	subs	r3, r3, r1
 80050b2:	42ab      	cmp	r3, r5
 80050b4:	dcf2      	bgt.n	800509c <_printf_i+0x218>
 80050b6:	e7eb      	b.n	8005090 <_printf_i+0x20c>
 80050b8:	2500      	movs	r5, #0
 80050ba:	f104 0619 	add.w	r6, r4, #25
 80050be:	e7f5      	b.n	80050ac <_printf_i+0x228>
 80050c0:	0800760a 	.word	0x0800760a
 80050c4:	0800761b 	.word	0x0800761b

080050c8 <std>:
 80050c8:	2300      	movs	r3, #0
 80050ca:	b510      	push	{r4, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	e9c0 3300 	strd	r3, r3, [r0]
 80050d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050d6:	6083      	str	r3, [r0, #8]
 80050d8:	8181      	strh	r1, [r0, #12]
 80050da:	6643      	str	r3, [r0, #100]	; 0x64
 80050dc:	81c2      	strh	r2, [r0, #14]
 80050de:	6183      	str	r3, [r0, #24]
 80050e0:	4619      	mov	r1, r3
 80050e2:	2208      	movs	r2, #8
 80050e4:	305c      	adds	r0, #92	; 0x5c
 80050e6:	f000 f914 	bl	8005312 <memset>
 80050ea:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <std+0x58>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	6263      	str	r3, [r4, #36]	; 0x24
 80050f0:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <std+0x5c>)
 80050f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <std+0x60>)
 80050f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <std+0x64>)
 80050fa:	6323      	str	r3, [r4, #48]	; 0x30
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <std+0x68>)
 80050fe:	429c      	cmp	r4, r3
 8005100:	d006      	beq.n	8005110 <std+0x48>
 8005102:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005106:	4294      	cmp	r4, r2
 8005108:	d002      	beq.n	8005110 <std+0x48>
 800510a:	33d0      	adds	r3, #208	; 0xd0
 800510c:	429c      	cmp	r4, r3
 800510e:	d105      	bne.n	800511c <std+0x54>
 8005110:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005118:	f000 b978 	b.w	800540c <__retarget_lock_init_recursive>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	bf00      	nop
 8005120:	0800528d 	.word	0x0800528d
 8005124:	080052af 	.word	0x080052af
 8005128:	080052e7 	.word	0x080052e7
 800512c:	0800530b 	.word	0x0800530b
 8005130:	200003b0 	.word	0x200003b0

08005134 <stdio_exit_handler>:
 8005134:	4a02      	ldr	r2, [pc, #8]	; (8005140 <stdio_exit_handler+0xc>)
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <stdio_exit_handler+0x10>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <stdio_exit_handler+0x14>)
 800513a:	f000 b869 	b.w	8005210 <_fwalk_sglue>
 800513e:	bf00      	nop
 8005140:	20000020 	.word	0x20000020
 8005144:	08006da5 	.word	0x08006da5
 8005148:	2000002c 	.word	0x2000002c

0800514c <cleanup_stdio>:
 800514c:	6841      	ldr	r1, [r0, #4]
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <cleanup_stdio+0x34>)
 8005150:	b510      	push	{r4, lr}
 8005152:	4299      	cmp	r1, r3
 8005154:	4604      	mov	r4, r0
 8005156:	d001      	beq.n	800515c <cleanup_stdio+0x10>
 8005158:	f001 fe24 	bl	8006da4 <_fflush_r>
 800515c:	68a1      	ldr	r1, [r4, #8]
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <cleanup_stdio+0x38>)
 8005160:	4299      	cmp	r1, r3
 8005162:	d002      	beq.n	800516a <cleanup_stdio+0x1e>
 8005164:	4620      	mov	r0, r4
 8005166:	f001 fe1d 	bl	8006da4 <_fflush_r>
 800516a:	68e1      	ldr	r1, [r4, #12]
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <cleanup_stdio+0x3c>)
 800516e:	4299      	cmp	r1, r3
 8005170:	d004      	beq.n	800517c <cleanup_stdio+0x30>
 8005172:	4620      	mov	r0, r4
 8005174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005178:	f001 be14 	b.w	8006da4 <_fflush_r>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	bf00      	nop
 8005180:	200003b0 	.word	0x200003b0
 8005184:	20000418 	.word	0x20000418
 8005188:	20000480 	.word	0x20000480

0800518c <global_stdio_init.part.0>:
 800518c:	b510      	push	{r4, lr}
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <global_stdio_init.part.0+0x30>)
 8005190:	4c0b      	ldr	r4, [pc, #44]	; (80051c0 <global_stdio_init.part.0+0x34>)
 8005192:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <global_stdio_init.part.0+0x38>)
 8005194:	4620      	mov	r0, r4
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	2104      	movs	r1, #4
 800519a:	2200      	movs	r2, #0
 800519c:	f7ff ff94 	bl	80050c8 <std>
 80051a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80051a4:	2201      	movs	r2, #1
 80051a6:	2109      	movs	r1, #9
 80051a8:	f7ff ff8e 	bl	80050c8 <std>
 80051ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80051b0:	2202      	movs	r2, #2
 80051b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b6:	2112      	movs	r1, #18
 80051b8:	f7ff bf86 	b.w	80050c8 <std>
 80051bc:	200004e8 	.word	0x200004e8
 80051c0:	200003b0 	.word	0x200003b0
 80051c4:	08005135 	.word	0x08005135

080051c8 <__sfp_lock_acquire>:
 80051c8:	4801      	ldr	r0, [pc, #4]	; (80051d0 <__sfp_lock_acquire+0x8>)
 80051ca:	f000 b920 	b.w	800540e <__retarget_lock_acquire_recursive>
 80051ce:	bf00      	nop
 80051d0:	200004f1 	.word	0x200004f1

080051d4 <__sfp_lock_release>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__sfp_lock_release+0x8>)
 80051d6:	f000 b91b 	b.w	8005410 <__retarget_lock_release_recursive>
 80051da:	bf00      	nop
 80051dc:	200004f1 	.word	0x200004f1

080051e0 <__sinit>:
 80051e0:	b510      	push	{r4, lr}
 80051e2:	4604      	mov	r4, r0
 80051e4:	f7ff fff0 	bl	80051c8 <__sfp_lock_acquire>
 80051e8:	6a23      	ldr	r3, [r4, #32]
 80051ea:	b11b      	cbz	r3, 80051f4 <__sinit+0x14>
 80051ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051f0:	f7ff bff0 	b.w	80051d4 <__sfp_lock_release>
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <__sinit+0x28>)
 80051f6:	6223      	str	r3, [r4, #32]
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__sinit+0x2c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f5      	bne.n	80051ec <__sinit+0xc>
 8005200:	f7ff ffc4 	bl	800518c <global_stdio_init.part.0>
 8005204:	e7f2      	b.n	80051ec <__sinit+0xc>
 8005206:	bf00      	nop
 8005208:	0800514d 	.word	0x0800514d
 800520c:	200004e8 	.word	0x200004e8

08005210 <_fwalk_sglue>:
 8005210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005214:	4607      	mov	r7, r0
 8005216:	4688      	mov	r8, r1
 8005218:	4614      	mov	r4, r2
 800521a:	2600      	movs	r6, #0
 800521c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005220:	f1b9 0901 	subs.w	r9, r9, #1
 8005224:	d505      	bpl.n	8005232 <_fwalk_sglue+0x22>
 8005226:	6824      	ldr	r4, [r4, #0]
 8005228:	2c00      	cmp	r4, #0
 800522a:	d1f7      	bne.n	800521c <_fwalk_sglue+0xc>
 800522c:	4630      	mov	r0, r6
 800522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005232:	89ab      	ldrh	r3, [r5, #12]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d907      	bls.n	8005248 <_fwalk_sglue+0x38>
 8005238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800523c:	3301      	adds	r3, #1
 800523e:	d003      	beq.n	8005248 <_fwalk_sglue+0x38>
 8005240:	4629      	mov	r1, r5
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	4306      	orrs	r6, r0
 8005248:	3568      	adds	r5, #104	; 0x68
 800524a:	e7e9      	b.n	8005220 <_fwalk_sglue+0x10>

0800524c <siprintf>:
 800524c:	b40e      	push	{r1, r2, r3}
 800524e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005252:	b500      	push	{lr}
 8005254:	b09c      	sub	sp, #112	; 0x70
 8005256:	ab1d      	add	r3, sp, #116	; 0x74
 8005258:	9002      	str	r0, [sp, #8]
 800525a:	9006      	str	r0, [sp, #24]
 800525c:	9107      	str	r1, [sp, #28]
 800525e:	9104      	str	r1, [sp, #16]
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <siprintf+0x38>)
 8005262:	4909      	ldr	r1, [pc, #36]	; (8005288 <siprintf+0x3c>)
 8005264:	f853 2b04 	ldr.w	r2, [r3], #4
 8005268:	9105      	str	r1, [sp, #20]
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	a902      	add	r1, sp, #8
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	f001 fc18 	bl	8006aa4 <_svfiprintf_r>
 8005274:	2200      	movs	r2, #0
 8005276:	9b02      	ldr	r3, [sp, #8]
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	b01c      	add	sp, #112	; 0x70
 800527c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005280:	b003      	add	sp, #12
 8005282:	4770      	bx	lr
 8005284:	20000078 	.word	0x20000078
 8005288:	ffff0208 	.word	0xffff0208

0800528c <__sread>:
 800528c:	b510      	push	{r4, lr}
 800528e:	460c      	mov	r4, r1
 8005290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005294:	f000 f86c 	bl	8005370 <_read_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	bfab      	itete	ge
 800529c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800529e:	89a3      	ldrhlt	r3, [r4, #12]
 80052a0:	181b      	addge	r3, r3, r0
 80052a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052a6:	bfac      	ite	ge
 80052a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80052aa:	81a3      	strhlt	r3, [r4, #12]
 80052ac:	bd10      	pop	{r4, pc}

080052ae <__swrite>:
 80052ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	461f      	mov	r7, r3
 80052b4:	898b      	ldrh	r3, [r1, #12]
 80052b6:	4605      	mov	r5, r0
 80052b8:	05db      	lsls	r3, r3, #23
 80052ba:	460c      	mov	r4, r1
 80052bc:	4616      	mov	r6, r2
 80052be:	d505      	bpl.n	80052cc <__swrite+0x1e>
 80052c0:	2302      	movs	r3, #2
 80052c2:	2200      	movs	r2, #0
 80052c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c8:	f000 f840 	bl	800534c <_lseek_r>
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	4632      	mov	r2, r6
 80052d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d4:	81a3      	strh	r3, [r4, #12]
 80052d6:	4628      	mov	r0, r5
 80052d8:	463b      	mov	r3, r7
 80052da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052e2:	f000 b857 	b.w	8005394 <_write_r>

080052e6 <__sseek>:
 80052e6:	b510      	push	{r4, lr}
 80052e8:	460c      	mov	r4, r1
 80052ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ee:	f000 f82d 	bl	800534c <_lseek_r>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	bf15      	itete	ne
 80052f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80052fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005302:	81a3      	strheq	r3, [r4, #12]
 8005304:	bf18      	it	ne
 8005306:	81a3      	strhne	r3, [r4, #12]
 8005308:	bd10      	pop	{r4, pc}

0800530a <__sclose>:
 800530a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800530e:	f000 b80d 	b.w	800532c <_close_r>

08005312 <memset>:
 8005312:	4603      	mov	r3, r0
 8005314:	4402      	add	r2, r0
 8005316:	4293      	cmp	r3, r2
 8005318:	d100      	bne.n	800531c <memset+0xa>
 800531a:	4770      	bx	lr
 800531c:	f803 1b01 	strb.w	r1, [r3], #1
 8005320:	e7f9      	b.n	8005316 <memset+0x4>
	...

08005324 <_localeconv_r>:
 8005324:	4800      	ldr	r0, [pc, #0]	; (8005328 <_localeconv_r+0x4>)
 8005326:	4770      	bx	lr
 8005328:	2000016c 	.word	0x2000016c

0800532c <_close_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	2300      	movs	r3, #0
 8005330:	4d05      	ldr	r5, [pc, #20]	; (8005348 <_close_r+0x1c>)
 8005332:	4604      	mov	r4, r0
 8005334:	4608      	mov	r0, r1
 8005336:	602b      	str	r3, [r5, #0]
 8005338:	f7fc fd51 	bl	8001dde <_close>
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	d102      	bne.n	8005346 <_close_r+0x1a>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b103      	cbz	r3, 8005346 <_close_r+0x1a>
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	bd38      	pop	{r3, r4, r5, pc}
 8005348:	200004ec 	.word	0x200004ec

0800534c <_lseek_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4604      	mov	r4, r0
 8005350:	4608      	mov	r0, r1
 8005352:	4611      	mov	r1, r2
 8005354:	2200      	movs	r2, #0
 8005356:	4d05      	ldr	r5, [pc, #20]	; (800536c <_lseek_r+0x20>)
 8005358:	602a      	str	r2, [r5, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	f7fc fd63 	bl	8001e26 <_lseek>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	d102      	bne.n	800536a <_lseek_r+0x1e>
 8005364:	682b      	ldr	r3, [r5, #0]
 8005366:	b103      	cbz	r3, 800536a <_lseek_r+0x1e>
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	bd38      	pop	{r3, r4, r5, pc}
 800536c:	200004ec 	.word	0x200004ec

08005370 <_read_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	4608      	mov	r0, r1
 8005376:	4611      	mov	r1, r2
 8005378:	2200      	movs	r2, #0
 800537a:	4d05      	ldr	r5, [pc, #20]	; (8005390 <_read_r+0x20>)
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	f7fc fcf4 	bl	8001d6c <_read>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_read_r+0x1e>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_read_r+0x1e>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	200004ec 	.word	0x200004ec

08005394 <_write_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	2200      	movs	r2, #0
 800539e:	4d05      	ldr	r5, [pc, #20]	; (80053b4 <_write_r+0x20>)
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fc fcff 	bl	8001da6 <_write>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_write_r+0x1e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_write_r+0x1e>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	200004ec 	.word	0x200004ec

080053b8 <__errno>:
 80053b8:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <__errno+0x8>)
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000078 	.word	0x20000078

080053c4 <__libc_init_array>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	2600      	movs	r6, #0
 80053c8:	4d0c      	ldr	r5, [pc, #48]	; (80053fc <__libc_init_array+0x38>)
 80053ca:	4c0d      	ldr	r4, [pc, #52]	; (8005400 <__libc_init_array+0x3c>)
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	42a6      	cmp	r6, r4
 80053d2:	d109      	bne.n	80053e8 <__libc_init_array+0x24>
 80053d4:	f002 f886 	bl	80074e4 <_init>
 80053d8:	2600      	movs	r6, #0
 80053da:	4d0a      	ldr	r5, [pc, #40]	; (8005404 <__libc_init_array+0x40>)
 80053dc:	4c0a      	ldr	r4, [pc, #40]	; (8005408 <__libc_init_array+0x44>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	42a6      	cmp	r6, r4
 80053e4:	d105      	bne.n	80053f2 <__libc_init_array+0x2e>
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ec:	4798      	blx	r3
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7ee      	b.n	80053d0 <__libc_init_array+0xc>
 80053f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f6:	4798      	blx	r3
 80053f8:	3601      	adds	r6, #1
 80053fa:	e7f2      	b.n	80053e2 <__libc_init_array+0x1e>
 80053fc:	0800796c 	.word	0x0800796c
 8005400:	0800796c 	.word	0x0800796c
 8005404:	0800796c 	.word	0x0800796c
 8005408:	08007974 	.word	0x08007974

0800540c <__retarget_lock_init_recursive>:
 800540c:	4770      	bx	lr

0800540e <__retarget_lock_acquire_recursive>:
 800540e:	4770      	bx	lr

08005410 <__retarget_lock_release_recursive>:
 8005410:	4770      	bx	lr

08005412 <memchr>:
 8005412:	4603      	mov	r3, r0
 8005414:	b510      	push	{r4, lr}
 8005416:	b2c9      	uxtb	r1, r1
 8005418:	4402      	add	r2, r0
 800541a:	4293      	cmp	r3, r2
 800541c:	4618      	mov	r0, r3
 800541e:	d101      	bne.n	8005424 <memchr+0x12>
 8005420:	2000      	movs	r0, #0
 8005422:	e003      	b.n	800542c <memchr+0x1a>
 8005424:	7804      	ldrb	r4, [r0, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	428c      	cmp	r4, r1
 800542a:	d1f6      	bne.n	800541a <memchr+0x8>
 800542c:	bd10      	pop	{r4, pc}

0800542e <quorem>:
 800542e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005432:	6903      	ldr	r3, [r0, #16]
 8005434:	690c      	ldr	r4, [r1, #16]
 8005436:	4607      	mov	r7, r0
 8005438:	42a3      	cmp	r3, r4
 800543a:	db7f      	blt.n	800553c <quorem+0x10e>
 800543c:	3c01      	subs	r4, #1
 800543e:	f100 0514 	add.w	r5, r0, #20
 8005442:	f101 0814 	add.w	r8, r1, #20
 8005446:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005450:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005454:	3301      	adds	r3, #1
 8005456:	429a      	cmp	r2, r3
 8005458:	fbb2 f6f3 	udiv	r6, r2, r3
 800545c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005460:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005464:	d331      	bcc.n	80054ca <quorem+0x9c>
 8005466:	f04f 0e00 	mov.w	lr, #0
 800546a:	4640      	mov	r0, r8
 800546c:	46ac      	mov	ip, r5
 800546e:	46f2      	mov	sl, lr
 8005470:	f850 2b04 	ldr.w	r2, [r0], #4
 8005474:	b293      	uxth	r3, r2
 8005476:	fb06 e303 	mla	r3, r6, r3, lr
 800547a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800547e:	0c1a      	lsrs	r2, r3, #16
 8005480:	b29b      	uxth	r3, r3
 8005482:	fb06 220e 	mla	r2, r6, lr, r2
 8005486:	ebaa 0303 	sub.w	r3, sl, r3
 800548a:	f8dc a000 	ldr.w	sl, [ip]
 800548e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005492:	fa1f fa8a 	uxth.w	sl, sl
 8005496:	4453      	add	r3, sl
 8005498:	f8dc a000 	ldr.w	sl, [ip]
 800549c:	b292      	uxth	r2, r2
 800549e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80054a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ac:	4581      	cmp	r9, r0
 80054ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80054b2:	f84c 3b04 	str.w	r3, [ip], #4
 80054b6:	d2db      	bcs.n	8005470 <quorem+0x42>
 80054b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80054bc:	b92b      	cbnz	r3, 80054ca <quorem+0x9c>
 80054be:	9b01      	ldr	r3, [sp, #4]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	429d      	cmp	r5, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	d32d      	bcc.n	8005524 <quorem+0xf6>
 80054c8:	613c      	str	r4, [r7, #16]
 80054ca:	4638      	mov	r0, r7
 80054cc:	f001 f992 	bl	80067f4 <__mcmp>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	db23      	blt.n	800551c <quorem+0xee>
 80054d4:	4629      	mov	r1, r5
 80054d6:	2000      	movs	r0, #0
 80054d8:	3601      	adds	r6, #1
 80054da:	f858 2b04 	ldr.w	r2, [r8], #4
 80054de:	f8d1 c000 	ldr.w	ip, [r1]
 80054e2:	b293      	uxth	r3, r2
 80054e4:	1ac3      	subs	r3, r0, r3
 80054e6:	0c12      	lsrs	r2, r2, #16
 80054e8:	fa1f f08c 	uxth.w	r0, ip
 80054ec:	4403      	add	r3, r0
 80054ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80054f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054fc:	45c1      	cmp	r9, r8
 80054fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005502:	f841 3b04 	str.w	r3, [r1], #4
 8005506:	d2e8      	bcs.n	80054da <quorem+0xac>
 8005508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800550c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005510:	b922      	cbnz	r2, 800551c <quorem+0xee>
 8005512:	3b04      	subs	r3, #4
 8005514:	429d      	cmp	r5, r3
 8005516:	461a      	mov	r2, r3
 8005518:	d30a      	bcc.n	8005530 <quorem+0x102>
 800551a:	613c      	str	r4, [r7, #16]
 800551c:	4630      	mov	r0, r6
 800551e:	b003      	add	sp, #12
 8005520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	3b04      	subs	r3, #4
 8005528:	2a00      	cmp	r2, #0
 800552a:	d1cd      	bne.n	80054c8 <quorem+0x9a>
 800552c:	3c01      	subs	r4, #1
 800552e:	e7c8      	b.n	80054c2 <quorem+0x94>
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	3b04      	subs	r3, #4
 8005534:	2a00      	cmp	r2, #0
 8005536:	d1f0      	bne.n	800551a <quorem+0xec>
 8005538:	3c01      	subs	r4, #1
 800553a:	e7eb      	b.n	8005514 <quorem+0xe6>
 800553c:	2000      	movs	r0, #0
 800553e:	e7ee      	b.n	800551e <quorem+0xf0>

08005540 <_dtoa_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	461f      	mov	r7, r3
 8005548:	69c4      	ldr	r4, [r0, #28]
 800554a:	b099      	sub	sp, #100	; 0x64
 800554c:	4605      	mov	r5, r0
 800554e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005552:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005556:	b974      	cbnz	r4, 8005576 <_dtoa_r+0x36>
 8005558:	2010      	movs	r0, #16
 800555a:	f000 fe1d 	bl	8006198 <malloc>
 800555e:	4602      	mov	r2, r0
 8005560:	61e8      	str	r0, [r5, #28]
 8005562:	b920      	cbnz	r0, 800556e <_dtoa_r+0x2e>
 8005564:	21ef      	movs	r1, #239	; 0xef
 8005566:	4bac      	ldr	r3, [pc, #688]	; (8005818 <_dtoa_r+0x2d8>)
 8005568:	48ac      	ldr	r0, [pc, #688]	; (800581c <_dtoa_r+0x2dc>)
 800556a:	f001 fc7b 	bl	8006e64 <__assert_func>
 800556e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005572:	6004      	str	r4, [r0, #0]
 8005574:	60c4      	str	r4, [r0, #12]
 8005576:	69eb      	ldr	r3, [r5, #28]
 8005578:	6819      	ldr	r1, [r3, #0]
 800557a:	b151      	cbz	r1, 8005592 <_dtoa_r+0x52>
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	2301      	movs	r3, #1
 8005580:	4093      	lsls	r3, r2
 8005582:	604a      	str	r2, [r1, #4]
 8005584:	608b      	str	r3, [r1, #8]
 8005586:	4628      	mov	r0, r5
 8005588:	f000 fefa 	bl	8006380 <_Bfree>
 800558c:	2200      	movs	r2, #0
 800558e:	69eb      	ldr	r3, [r5, #28]
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	1e3b      	subs	r3, r7, #0
 8005594:	bfaf      	iteee	ge
 8005596:	2300      	movge	r3, #0
 8005598:	2201      	movlt	r2, #1
 800559a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800559e:	9305      	strlt	r3, [sp, #20]
 80055a0:	bfa8      	it	ge
 80055a2:	f8c8 3000 	strge.w	r3, [r8]
 80055a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80055aa:	4b9d      	ldr	r3, [pc, #628]	; (8005820 <_dtoa_r+0x2e0>)
 80055ac:	bfb8      	it	lt
 80055ae:	f8c8 2000 	strlt.w	r2, [r8]
 80055b2:	ea33 0309 	bics.w	r3, r3, r9
 80055b6:	d119      	bne.n	80055ec <_dtoa_r+0xac>
 80055b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80055bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055c4:	4333      	orrs	r3, r6
 80055c6:	f000 8589 	beq.w	80060dc <_dtoa_r+0xb9c>
 80055ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055cc:	b953      	cbnz	r3, 80055e4 <_dtoa_r+0xa4>
 80055ce:	4b95      	ldr	r3, [pc, #596]	; (8005824 <_dtoa_r+0x2e4>)
 80055d0:	e023      	b.n	800561a <_dtoa_r+0xda>
 80055d2:	4b95      	ldr	r3, [pc, #596]	; (8005828 <_dtoa_r+0x2e8>)
 80055d4:	9303      	str	r3, [sp, #12]
 80055d6:	3308      	adds	r3, #8
 80055d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	9803      	ldr	r0, [sp, #12]
 80055de:	b019      	add	sp, #100	; 0x64
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	4b8f      	ldr	r3, [pc, #572]	; (8005824 <_dtoa_r+0x2e4>)
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	3303      	adds	r3, #3
 80055ea:	e7f5      	b.n	80055d8 <_dtoa_r+0x98>
 80055ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80055f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80055f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	f7fb f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8005600:	4680      	mov	r8, r0
 8005602:	b160      	cbz	r0, 800561e <_dtoa_r+0xde>
 8005604:	2301      	movs	r3, #1
 8005606:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8562 	beq.w	80060d6 <_dtoa_r+0xb96>
 8005612:	4b86      	ldr	r3, [pc, #536]	; (800582c <_dtoa_r+0x2ec>)
 8005614:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	e7de      	b.n	80055dc <_dtoa_r+0x9c>
 800561e:	ab16      	add	r3, sp, #88	; 0x58
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	ab17      	add	r3, sp, #92	; 0x5c
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	4628      	mov	r0, r5
 8005628:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800562c:	f001 f98a 	bl	8006944 <__d2b>
 8005630:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005634:	4682      	mov	sl, r0
 8005636:	2c00      	cmp	r4, #0
 8005638:	d07e      	beq.n	8005738 <_dtoa_r+0x1f8>
 800563a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800563e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005640:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005648:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800564c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005650:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005654:	4619      	mov	r1, r3
 8005656:	2200      	movs	r2, #0
 8005658:	4b75      	ldr	r3, [pc, #468]	; (8005830 <_dtoa_r+0x2f0>)
 800565a:	f7fa fd85 	bl	8000168 <__aeabi_dsub>
 800565e:	a368      	add	r3, pc, #416	; (adr r3, 8005800 <_dtoa_r+0x2c0>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa ff38 	bl	80004d8 <__aeabi_dmul>
 8005668:	a367      	add	r3, pc, #412	; (adr r3, 8005808 <_dtoa_r+0x2c8>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fd7d 	bl	800016c <__adddf3>
 8005672:	4606      	mov	r6, r0
 8005674:	4620      	mov	r0, r4
 8005676:	460f      	mov	r7, r1
 8005678:	f7fa fec4 	bl	8000404 <__aeabi_i2d>
 800567c:	a364      	add	r3, pc, #400	; (adr r3, 8005810 <_dtoa_r+0x2d0>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fa fd6d 	bl	800016c <__adddf3>
 8005692:	4606      	mov	r6, r0
 8005694:	460f      	mov	r7, r1
 8005696:	f7fb f9cf 	bl	8000a38 <__aeabi_d2iz>
 800569a:	2200      	movs	r2, #0
 800569c:	4683      	mov	fp, r0
 800569e:	2300      	movs	r3, #0
 80056a0:	4630      	mov	r0, r6
 80056a2:	4639      	mov	r1, r7
 80056a4:	f7fb f98a 	bl	80009bc <__aeabi_dcmplt>
 80056a8:	b148      	cbz	r0, 80056be <_dtoa_r+0x17e>
 80056aa:	4658      	mov	r0, fp
 80056ac:	f7fa feaa 	bl	8000404 <__aeabi_i2d>
 80056b0:	4632      	mov	r2, r6
 80056b2:	463b      	mov	r3, r7
 80056b4:	f7fb f978 	bl	80009a8 <__aeabi_dcmpeq>
 80056b8:	b908      	cbnz	r0, 80056be <_dtoa_r+0x17e>
 80056ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056be:	f1bb 0f16 	cmp.w	fp, #22
 80056c2:	d857      	bhi.n	8005774 <_dtoa_r+0x234>
 80056c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056c8:	4b5a      	ldr	r3, [pc, #360]	; (8005834 <_dtoa_r+0x2f4>)
 80056ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f7fb f973 	bl	80009bc <__aeabi_dcmplt>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d04e      	beq.n	8005778 <_dtoa_r+0x238>
 80056da:	2300      	movs	r3, #0
 80056dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80056e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056e4:	1b1b      	subs	r3, r3, r4
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	bf46      	itte	mi
 80056ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80056ee:	2300      	movmi	r3, #0
 80056f0:	f04f 0900 	movpl.w	r9, #0
 80056f4:	9209      	str	r2, [sp, #36]	; 0x24
 80056f6:	bf48      	it	mi
 80056f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80056fa:	f1bb 0f00 	cmp.w	fp, #0
 80056fe:	db3d      	blt.n	800577c <_dtoa_r+0x23c>
 8005700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005702:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005706:	445b      	add	r3, fp
 8005708:	9309      	str	r3, [sp, #36]	; 0x24
 800570a:	2300      	movs	r3, #0
 800570c:	930a      	str	r3, [sp, #40]	; 0x28
 800570e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005710:	2b09      	cmp	r3, #9
 8005712:	d867      	bhi.n	80057e4 <_dtoa_r+0x2a4>
 8005714:	2b05      	cmp	r3, #5
 8005716:	bfc4      	itt	gt
 8005718:	3b04      	subgt	r3, #4
 800571a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800571c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800571e:	bfc8      	it	gt
 8005720:	2400      	movgt	r4, #0
 8005722:	f1a3 0302 	sub.w	r3, r3, #2
 8005726:	bfd8      	it	le
 8005728:	2401      	movle	r4, #1
 800572a:	2b03      	cmp	r3, #3
 800572c:	f200 8086 	bhi.w	800583c <_dtoa_r+0x2fc>
 8005730:	e8df f003 	tbb	[pc, r3]
 8005734:	5637392c 	.word	0x5637392c
 8005738:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800573c:	441c      	add	r4, r3
 800573e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005742:	2b20      	cmp	r3, #32
 8005744:	bfc1      	itttt	gt
 8005746:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800574a:	fa09 f903 	lslgt.w	r9, r9, r3
 800574e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005752:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005756:	bfd6      	itet	le
 8005758:	f1c3 0320 	rsble	r3, r3, #32
 800575c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005760:	fa06 f003 	lslle.w	r0, r6, r3
 8005764:	f7fa fe3e 	bl	80003e4 <__aeabi_ui2d>
 8005768:	2201      	movs	r2, #1
 800576a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800576e:	3c01      	subs	r4, #1
 8005770:	9213      	str	r2, [sp, #76]	; 0x4c
 8005772:	e76f      	b.n	8005654 <_dtoa_r+0x114>
 8005774:	2301      	movs	r3, #1
 8005776:	e7b3      	b.n	80056e0 <_dtoa_r+0x1a0>
 8005778:	900f      	str	r0, [sp, #60]	; 0x3c
 800577a:	e7b2      	b.n	80056e2 <_dtoa_r+0x1a2>
 800577c:	f1cb 0300 	rsb	r3, fp, #0
 8005780:	930a      	str	r3, [sp, #40]	; 0x28
 8005782:	2300      	movs	r3, #0
 8005784:	eba9 090b 	sub.w	r9, r9, fp
 8005788:	930e      	str	r3, [sp, #56]	; 0x38
 800578a:	e7c0      	b.n	800570e <_dtoa_r+0x1ce>
 800578c:	2300      	movs	r3, #0
 800578e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005790:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005792:	2b00      	cmp	r3, #0
 8005794:	dc55      	bgt.n	8005842 <_dtoa_r+0x302>
 8005796:	2301      	movs	r3, #1
 8005798:	461a      	mov	r2, r3
 800579a:	9306      	str	r3, [sp, #24]
 800579c:	9308      	str	r3, [sp, #32]
 800579e:	9223      	str	r2, [sp, #140]	; 0x8c
 80057a0:	e00b      	b.n	80057ba <_dtoa_r+0x27a>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7f3      	b.n	800578e <_dtoa_r+0x24e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80057aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057ac:	445b      	add	r3, fp
 80057ae:	9306      	str	r3, [sp, #24]
 80057b0:	3301      	adds	r3, #1
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	9308      	str	r3, [sp, #32]
 80057b6:	bfb8      	it	lt
 80057b8:	2301      	movlt	r3, #1
 80057ba:	2100      	movs	r1, #0
 80057bc:	2204      	movs	r2, #4
 80057be:	69e8      	ldr	r0, [r5, #28]
 80057c0:	f102 0614 	add.w	r6, r2, #20
 80057c4:	429e      	cmp	r6, r3
 80057c6:	d940      	bls.n	800584a <_dtoa_r+0x30a>
 80057c8:	6041      	str	r1, [r0, #4]
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 fd98 	bl	8006300 <_Balloc>
 80057d0:	9003      	str	r0, [sp, #12]
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d13c      	bne.n	8005850 <_dtoa_r+0x310>
 80057d6:	4602      	mov	r2, r0
 80057d8:	f240 11af 	movw	r1, #431	; 0x1af
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <_dtoa_r+0x2f8>)
 80057de:	e6c3      	b.n	8005568 <_dtoa_r+0x28>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e7e1      	b.n	80057a8 <_dtoa_r+0x268>
 80057e4:	2401      	movs	r4, #1
 80057e6:	2300      	movs	r3, #0
 80057e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80057ea:	9322      	str	r3, [sp, #136]	; 0x88
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	2200      	movs	r2, #0
 80057f2:	9306      	str	r3, [sp, #24]
 80057f4:	9308      	str	r3, [sp, #32]
 80057f6:	2312      	movs	r3, #18
 80057f8:	e7d1      	b.n	800579e <_dtoa_r+0x25e>
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w
 8005800:	636f4361 	.word	0x636f4361
 8005804:	3fd287a7 	.word	0x3fd287a7
 8005808:	8b60c8b3 	.word	0x8b60c8b3
 800580c:	3fc68a28 	.word	0x3fc68a28
 8005810:	509f79fb 	.word	0x509f79fb
 8005814:	3fd34413 	.word	0x3fd34413
 8005818:	08007639 	.word	0x08007639
 800581c:	08007650 	.word	0x08007650
 8005820:	7ff00000 	.word	0x7ff00000
 8005824:	08007635 	.word	0x08007635
 8005828:	0800762c 	.word	0x0800762c
 800582c:	08007609 	.word	0x08007609
 8005830:	3ff80000 	.word	0x3ff80000
 8005834:	08007740 	.word	0x08007740
 8005838:	080076a8 	.word	0x080076a8
 800583c:	2301      	movs	r3, #1
 800583e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005840:	e7d4      	b.n	80057ec <_dtoa_r+0x2ac>
 8005842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005844:	9306      	str	r3, [sp, #24]
 8005846:	9308      	str	r3, [sp, #32]
 8005848:	e7b7      	b.n	80057ba <_dtoa_r+0x27a>
 800584a:	3101      	adds	r1, #1
 800584c:	0052      	lsls	r2, r2, #1
 800584e:	e7b7      	b.n	80057c0 <_dtoa_r+0x280>
 8005850:	69eb      	ldr	r3, [r5, #28]
 8005852:	9a03      	ldr	r2, [sp, #12]
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	9b08      	ldr	r3, [sp, #32]
 8005858:	2b0e      	cmp	r3, #14
 800585a:	f200 80a8 	bhi.w	80059ae <_dtoa_r+0x46e>
 800585e:	2c00      	cmp	r4, #0
 8005860:	f000 80a5 	beq.w	80059ae <_dtoa_r+0x46e>
 8005864:	f1bb 0f00 	cmp.w	fp, #0
 8005868:	dd34      	ble.n	80058d4 <_dtoa_r+0x394>
 800586a:	4b9a      	ldr	r3, [pc, #616]	; (8005ad4 <_dtoa_r+0x594>)
 800586c:	f00b 020f 	and.w	r2, fp, #15
 8005870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005874:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800587c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005880:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005884:	d016      	beq.n	80058b4 <_dtoa_r+0x374>
 8005886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800588a:	4b93      	ldr	r3, [pc, #588]	; (8005ad8 <_dtoa_r+0x598>)
 800588c:	2703      	movs	r7, #3
 800588e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005892:	f7fa ff4b 	bl	800072c <__aeabi_ddiv>
 8005896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800589a:	f004 040f 	and.w	r4, r4, #15
 800589e:	4e8e      	ldr	r6, [pc, #568]	; (8005ad8 <_dtoa_r+0x598>)
 80058a0:	b954      	cbnz	r4, 80058b8 <_dtoa_r+0x378>
 80058a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058aa:	f7fa ff3f 	bl	800072c <__aeabi_ddiv>
 80058ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b2:	e029      	b.n	8005908 <_dtoa_r+0x3c8>
 80058b4:	2702      	movs	r7, #2
 80058b6:	e7f2      	b.n	800589e <_dtoa_r+0x35e>
 80058b8:	07e1      	lsls	r1, r4, #31
 80058ba:	d508      	bpl.n	80058ce <_dtoa_r+0x38e>
 80058bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058c4:	f7fa fe08 	bl	80004d8 <__aeabi_dmul>
 80058c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058cc:	3701      	adds	r7, #1
 80058ce:	1064      	asrs	r4, r4, #1
 80058d0:	3608      	adds	r6, #8
 80058d2:	e7e5      	b.n	80058a0 <_dtoa_r+0x360>
 80058d4:	f000 80a5 	beq.w	8005a22 <_dtoa_r+0x4e2>
 80058d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058dc:	f1cb 0400 	rsb	r4, fp, #0
 80058e0:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <_dtoa_r+0x594>)
 80058e2:	f004 020f 	and.w	r2, r4, #15
 80058e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fdf3 	bl	80004d8 <__aeabi_dmul>
 80058f2:	2702      	movs	r7, #2
 80058f4:	2300      	movs	r3, #0
 80058f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058fa:	4e77      	ldr	r6, [pc, #476]	; (8005ad8 <_dtoa_r+0x598>)
 80058fc:	1124      	asrs	r4, r4, #4
 80058fe:	2c00      	cmp	r4, #0
 8005900:	f040 8084 	bne.w	8005a0c <_dtoa_r+0x4cc>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1d2      	bne.n	80058ae <_dtoa_r+0x36e>
 8005908:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800590c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8087 	beq.w	8005a26 <_dtoa_r+0x4e6>
 8005918:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800591c:	2200      	movs	r2, #0
 800591e:	4b6f      	ldr	r3, [pc, #444]	; (8005adc <_dtoa_r+0x59c>)
 8005920:	f7fb f84c 	bl	80009bc <__aeabi_dcmplt>
 8005924:	2800      	cmp	r0, #0
 8005926:	d07e      	beq.n	8005a26 <_dtoa_r+0x4e6>
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d07b      	beq.n	8005a26 <_dtoa_r+0x4e6>
 800592e:	9b06      	ldr	r3, [sp, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	dd38      	ble.n	80059a6 <_dtoa_r+0x466>
 8005934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005938:	2200      	movs	r2, #0
 800593a:	4b69      	ldr	r3, [pc, #420]	; (8005ae0 <_dtoa_r+0x5a0>)
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005944:	9c06      	ldr	r4, [sp, #24]
 8005946:	f10b 38ff 	add.w	r8, fp, #4294967295
 800594a:	3701      	adds	r7, #1
 800594c:	4638      	mov	r0, r7
 800594e:	f7fa fd59 	bl	8000404 <__aeabi_i2d>
 8005952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005956:	f7fa fdbf 	bl	80004d8 <__aeabi_dmul>
 800595a:	2200      	movs	r2, #0
 800595c:	4b61      	ldr	r3, [pc, #388]	; (8005ae4 <_dtoa_r+0x5a4>)
 800595e:	f7fa fc05 	bl	800016c <__adddf3>
 8005962:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800596a:	9611      	str	r6, [sp, #68]	; 0x44
 800596c:	2c00      	cmp	r4, #0
 800596e:	d15d      	bne.n	8005a2c <_dtoa_r+0x4ec>
 8005970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005974:	2200      	movs	r2, #0
 8005976:	4b5c      	ldr	r3, [pc, #368]	; (8005ae8 <_dtoa_r+0x5a8>)
 8005978:	f7fa fbf6 	bl	8000168 <__aeabi_dsub>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005984:	4633      	mov	r3, r6
 8005986:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005988:	f7fb f836 	bl	80009f8 <__aeabi_dcmpgt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f040 8295 	bne.w	8005ebc <_dtoa_r+0x97c>
 8005992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005996:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005998:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800599c:	f7fb f80e 	bl	80009bc <__aeabi_dcmplt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	f040 8289 	bne.w	8005eb8 <_dtoa_r+0x978>
 80059a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80059aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f2c0 8151 	blt.w	8005c58 <_dtoa_r+0x718>
 80059b6:	f1bb 0f0e 	cmp.w	fp, #14
 80059ba:	f300 814d 	bgt.w	8005c58 <_dtoa_r+0x718>
 80059be:	4b45      	ldr	r3, [pc, #276]	; (8005ad4 <_dtoa_r+0x594>)
 80059c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80059cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f280 80da 	bge.w	8005b88 <_dtoa_r+0x648>
 80059d4:	9b08      	ldr	r3, [sp, #32]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f300 80d6 	bgt.w	8005b88 <_dtoa_r+0x648>
 80059dc:	f040 826b 	bne.w	8005eb6 <_dtoa_r+0x976>
 80059e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e4:	2200      	movs	r2, #0
 80059e6:	4b40      	ldr	r3, [pc, #256]	; (8005ae8 <_dtoa_r+0x5a8>)
 80059e8:	f7fa fd76 	bl	80004d8 <__aeabi_dmul>
 80059ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f0:	f7fa fff8 	bl	80009e4 <__aeabi_dcmpge>
 80059f4:	9c08      	ldr	r4, [sp, #32]
 80059f6:	4626      	mov	r6, r4
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f040 8241 	bne.w	8005e80 <_dtoa_r+0x940>
 80059fe:	2331      	movs	r3, #49	; 0x31
 8005a00:	9f03      	ldr	r7, [sp, #12]
 8005a02:	f10b 0b01 	add.w	fp, fp, #1
 8005a06:	f807 3b01 	strb.w	r3, [r7], #1
 8005a0a:	e23d      	b.n	8005e88 <_dtoa_r+0x948>
 8005a0c:	07e2      	lsls	r2, r4, #31
 8005a0e:	d505      	bpl.n	8005a1c <_dtoa_r+0x4dc>
 8005a10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a14:	f7fa fd60 	bl	80004d8 <__aeabi_dmul>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	3701      	adds	r7, #1
 8005a1c:	1064      	asrs	r4, r4, #1
 8005a1e:	3608      	adds	r6, #8
 8005a20:	e76d      	b.n	80058fe <_dtoa_r+0x3be>
 8005a22:	2702      	movs	r7, #2
 8005a24:	e770      	b.n	8005908 <_dtoa_r+0x3c8>
 8005a26:	46d8      	mov	r8, fp
 8005a28:	9c08      	ldr	r4, [sp, #32]
 8005a2a:	e78f      	b.n	800594c <_dtoa_r+0x40c>
 8005a2c:	9903      	ldr	r1, [sp, #12]
 8005a2e:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <_dtoa_r+0x594>)
 8005a30:	4421      	add	r1, r4
 8005a32:	9112      	str	r1, [sp, #72]	; 0x48
 8005a34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005a3a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d054      	beq.n	8005af0 <_dtoa_r+0x5b0>
 8005a46:	2000      	movs	r0, #0
 8005a48:	4928      	ldr	r1, [pc, #160]	; (8005aec <_dtoa_r+0x5ac>)
 8005a4a:	f7fa fe6f 	bl	800072c <__aeabi_ddiv>
 8005a4e:	463b      	mov	r3, r7
 8005a50:	4632      	mov	r2, r6
 8005a52:	f7fa fb89 	bl	8000168 <__aeabi_dsub>
 8005a56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a5a:	9f03      	ldr	r7, [sp, #12]
 8005a5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a60:	f7fa ffea 	bl	8000a38 <__aeabi_d2iz>
 8005a64:	4604      	mov	r4, r0
 8005a66:	f7fa fccd 	bl	8000404 <__aeabi_i2d>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a72:	f7fa fb79 	bl	8000168 <__aeabi_dsub>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	3430      	adds	r4, #48	; 0x30
 8005a7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a84:	f807 4b01 	strb.w	r4, [r7], #1
 8005a88:	f7fa ff98 	bl	80009bc <__aeabi_dcmplt>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d173      	bne.n	8005b78 <_dtoa_r+0x638>
 8005a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a94:	2000      	movs	r0, #0
 8005a96:	4911      	ldr	r1, [pc, #68]	; (8005adc <_dtoa_r+0x59c>)
 8005a98:	f7fa fb66 	bl	8000168 <__aeabi_dsub>
 8005a9c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005aa0:	f7fa ff8c 	bl	80009bc <__aeabi_dcmplt>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f040 80b6 	bne.w	8005c16 <_dtoa_r+0x6d6>
 8005aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005aac:	429f      	cmp	r7, r3
 8005aae:	f43f af7a 	beq.w	80059a6 <_dtoa_r+0x466>
 8005ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <_dtoa_r+0x5a0>)
 8005aba:	f7fa fd0d 	bl	80004d8 <__aeabi_dmul>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <_dtoa_r+0x5a0>)
 8005aca:	f7fa fd05 	bl	80004d8 <__aeabi_dmul>
 8005ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ad2:	e7c3      	b.n	8005a5c <_dtoa_r+0x51c>
 8005ad4:	08007740 	.word	0x08007740
 8005ad8:	08007718 	.word	0x08007718
 8005adc:	3ff00000 	.word	0x3ff00000
 8005ae0:	40240000 	.word	0x40240000
 8005ae4:	401c0000 	.word	0x401c0000
 8005ae8:	40140000 	.word	0x40140000
 8005aec:	3fe00000 	.word	0x3fe00000
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fcf0 	bl	80004d8 <__aeabi_dmul>
 8005af8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005afa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005afe:	9c03      	ldr	r4, [sp, #12]
 8005b00:	9314      	str	r3, [sp, #80]	; 0x50
 8005b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b06:	f7fa ff97 	bl	8000a38 <__aeabi_d2iz>
 8005b0a:	9015      	str	r0, [sp, #84]	; 0x54
 8005b0c:	f7fa fc7a 	bl	8000404 <__aeabi_i2d>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b18:	f7fa fb26 	bl	8000168 <__aeabi_dsub>
 8005b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b1e:	4606      	mov	r6, r0
 8005b20:	3330      	adds	r3, #48	; 0x30
 8005b22:	f804 3b01 	strb.w	r3, [r4], #1
 8005b26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b28:	460f      	mov	r7, r1
 8005b2a:	429c      	cmp	r4, r3
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	d124      	bne.n	8005b7c <_dtoa_r+0x63c>
 8005b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b36:	4baf      	ldr	r3, [pc, #700]	; (8005df4 <_dtoa_r+0x8b4>)
 8005b38:	f7fa fb18 	bl	800016c <__adddf3>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	f7fa ff58 	bl	80009f8 <__aeabi_dcmpgt>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d163      	bne.n	8005c14 <_dtoa_r+0x6d4>
 8005b4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b50:	2000      	movs	r0, #0
 8005b52:	49a8      	ldr	r1, [pc, #672]	; (8005df4 <_dtoa_r+0x8b4>)
 8005b54:	f7fa fb08 	bl	8000168 <__aeabi_dsub>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4639      	mov	r1, r7
 8005b60:	f7fa ff2c 	bl	80009bc <__aeabi_dcmplt>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f43f af1e 	beq.w	80059a6 <_dtoa_r+0x466>
 8005b6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b6c:	1e7b      	subs	r3, r7, #1
 8005b6e:	9314      	str	r3, [sp, #80]	; 0x50
 8005b70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d0f8      	beq.n	8005b6a <_dtoa_r+0x62a>
 8005b78:	46c3      	mov	fp, r8
 8005b7a:	e03b      	b.n	8005bf4 <_dtoa_r+0x6b4>
 8005b7c:	4b9e      	ldr	r3, [pc, #632]	; (8005df8 <_dtoa_r+0x8b8>)
 8005b7e:	f7fa fcab 	bl	80004d8 <__aeabi_dmul>
 8005b82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b86:	e7bc      	b.n	8005b02 <_dtoa_r+0x5c2>
 8005b88:	9f03      	ldr	r7, [sp, #12]
 8005b8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005b8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b92:	4640      	mov	r0, r8
 8005b94:	4649      	mov	r1, r9
 8005b96:	f7fa fdc9 	bl	800072c <__aeabi_ddiv>
 8005b9a:	f7fa ff4d 	bl	8000a38 <__aeabi_d2iz>
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	f7fa fc30 	bl	8000404 <__aeabi_i2d>
 8005ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ba8:	f7fa fc96 	bl	80004d8 <__aeabi_dmul>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4640      	mov	r0, r8
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	f7fa fad8 	bl	8000168 <__aeabi_dsub>
 8005bb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005bbc:	f807 6b01 	strb.w	r6, [r7], #1
 8005bc0:	9e03      	ldr	r6, [sp, #12]
 8005bc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005bc6:	1bbe      	subs	r6, r7, r6
 8005bc8:	45b4      	cmp	ip, r6
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	d136      	bne.n	8005c3e <_dtoa_r+0x6fe>
 8005bd0:	f7fa facc 	bl	800016c <__adddf3>
 8005bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bd8:	4680      	mov	r8, r0
 8005bda:	4689      	mov	r9, r1
 8005bdc:	f7fa ff0c 	bl	80009f8 <__aeabi_dcmpgt>
 8005be0:	bb58      	cbnz	r0, 8005c3a <_dtoa_r+0x6fa>
 8005be2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005be6:	4640      	mov	r0, r8
 8005be8:	4649      	mov	r1, r9
 8005bea:	f7fa fedd 	bl	80009a8 <__aeabi_dcmpeq>
 8005bee:	b108      	cbz	r0, 8005bf4 <_dtoa_r+0x6b4>
 8005bf0:	07e3      	lsls	r3, r4, #31
 8005bf2:	d422      	bmi.n	8005c3a <_dtoa_r+0x6fa>
 8005bf4:	4651      	mov	r1, sl
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 fbc2 	bl	8006380 <_Bfree>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005c00:	703b      	strb	r3, [r7, #0]
 8005c02:	f10b 0301 	add.w	r3, fp, #1
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f43f ace6 	beq.w	80055dc <_dtoa_r+0x9c>
 8005c10:	601f      	str	r7, [r3, #0]
 8005c12:	e4e3      	b.n	80055dc <_dtoa_r+0x9c>
 8005c14:	4627      	mov	r7, r4
 8005c16:	463b      	mov	r3, r7
 8005c18:	461f      	mov	r7, r3
 8005c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c1e:	2a39      	cmp	r2, #57	; 0x39
 8005c20:	d107      	bne.n	8005c32 <_dtoa_r+0x6f2>
 8005c22:	9a03      	ldr	r2, [sp, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d1f7      	bne.n	8005c18 <_dtoa_r+0x6d8>
 8005c28:	2230      	movs	r2, #48	; 0x30
 8005c2a:	9903      	ldr	r1, [sp, #12]
 8005c2c:	f108 0801 	add.w	r8, r8, #1
 8005c30:	700a      	strb	r2, [r1, #0]
 8005c32:	781a      	ldrb	r2, [r3, #0]
 8005c34:	3201      	adds	r2, #1
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e79e      	b.n	8005b78 <_dtoa_r+0x638>
 8005c3a:	46d8      	mov	r8, fp
 8005c3c:	e7eb      	b.n	8005c16 <_dtoa_r+0x6d6>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4b6d      	ldr	r3, [pc, #436]	; (8005df8 <_dtoa_r+0x8b8>)
 8005c42:	f7fa fc49 	bl	80004d8 <__aeabi_dmul>
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	4689      	mov	r9, r1
 8005c4e:	f7fa feab 	bl	80009a8 <__aeabi_dcmpeq>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d09b      	beq.n	8005b8e <_dtoa_r+0x64e>
 8005c56:	e7cd      	b.n	8005bf4 <_dtoa_r+0x6b4>
 8005c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	f000 80c4 	beq.w	8005de8 <_dtoa_r+0x8a8>
 8005c60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005c62:	2a01      	cmp	r2, #1
 8005c64:	f300 80a8 	bgt.w	8005db8 <_dtoa_r+0x878>
 8005c68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	f000 80a0 	beq.w	8005db0 <_dtoa_r+0x870>
 8005c70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c74:	464f      	mov	r7, r9
 8005c76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	4628      	mov	r0, r5
 8005c80:	4499      	add	r9, r3
 8005c82:	9209      	str	r2, [sp, #36]	; 0x24
 8005c84:	f000 fc32 	bl	80064ec <__i2b>
 8005c88:	4606      	mov	r6, r0
 8005c8a:	b15f      	cbz	r7, 8005ca4 <_dtoa_r+0x764>
 8005c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dd08      	ble.n	8005ca4 <_dtoa_r+0x764>
 8005c92:	42bb      	cmp	r3, r7
 8005c94:	bfa8      	it	ge
 8005c96:	463b      	movge	r3, r7
 8005c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c9a:	eba9 0903 	sub.w	r9, r9, r3
 8005c9e:	1aff      	subs	r7, r7, r3
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca6:	b1f3      	cbz	r3, 8005ce6 <_dtoa_r+0x7a6>
 8005ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80a0 	beq.w	8005df0 <_dtoa_r+0x8b0>
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	dd10      	ble.n	8005cd6 <_dtoa_r+0x796>
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4622      	mov	r2, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fcd5 	bl	8006668 <__pow5mult>
 8005cbe:	4652      	mov	r2, sl
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 fc27 	bl	8006518 <__multiply>
 8005cca:	4680      	mov	r8, r0
 8005ccc:	4651      	mov	r1, sl
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 fb56 	bl	8006380 <_Bfree>
 8005cd4:	46c2      	mov	sl, r8
 8005cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd8:	1b1a      	subs	r2, r3, r4
 8005cda:	d004      	beq.n	8005ce6 <_dtoa_r+0x7a6>
 8005cdc:	4651      	mov	r1, sl
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 fcc2 	bl	8006668 <__pow5mult>
 8005ce4:	4682      	mov	sl, r0
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f000 fbff 	bl	80064ec <__i2b>
 8005cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cf0:	4604      	mov	r4, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f340 8082 	ble.w	8005dfc <_dtoa_r+0x8bc>
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 fcb3 	bl	8006668 <__pow5mult>
 8005d02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d04:	4604      	mov	r4, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	dd7b      	ble.n	8005e02 <_dtoa_r+0x8c2>
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005d14:	6918      	ldr	r0, [r3, #16]
 8005d16:	f000 fb9b 	bl	8006450 <__hi0bits>
 8005d1a:	f1c0 0020 	rsb	r0, r0, #32
 8005d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d20:	4418      	add	r0, r3
 8005d22:	f010 001f 	ands.w	r0, r0, #31
 8005d26:	f000 8092 	beq.w	8005e4e <_dtoa_r+0x90e>
 8005d2a:	f1c0 0320 	rsb	r3, r0, #32
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	f340 8085 	ble.w	8005e3e <_dtoa_r+0x8fe>
 8005d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d36:	f1c0 001c 	rsb	r0, r0, #28
 8005d3a:	4403      	add	r3, r0
 8005d3c:	4481      	add	r9, r0
 8005d3e:	4407      	add	r7, r0
 8005d40:	9309      	str	r3, [sp, #36]	; 0x24
 8005d42:	f1b9 0f00 	cmp.w	r9, #0
 8005d46:	dd05      	ble.n	8005d54 <_dtoa_r+0x814>
 8005d48:	4651      	mov	r1, sl
 8005d4a:	464a      	mov	r2, r9
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 fce5 	bl	800671c <__lshift>
 8005d52:	4682      	mov	sl, r0
 8005d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dd05      	ble.n	8005d66 <_dtoa_r+0x826>
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 fcdc 	bl	800671c <__lshift>
 8005d64:	4604      	mov	r4, r0
 8005d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d072      	beq.n	8005e52 <_dtoa_r+0x912>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4650      	mov	r0, sl
 8005d70:	f000 fd40 	bl	80067f4 <__mcmp>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	da6c      	bge.n	8005e52 <_dtoa_r+0x912>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	220a      	movs	r2, #10
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 fb20 	bl	80063c4 <__multadd>
 8005d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d86:	4682      	mov	sl, r0
 8005d88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 81ac 	beq.w	80060ea <_dtoa_r+0xbaa>
 8005d92:	2300      	movs	r3, #0
 8005d94:	4631      	mov	r1, r6
 8005d96:	220a      	movs	r2, #10
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f000 fb13 	bl	80063c4 <__multadd>
 8005d9e:	9b06      	ldr	r3, [sp, #24]
 8005da0:	4606      	mov	r6, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f300 8093 	bgt.w	8005ece <_dtoa_r+0x98e>
 8005da8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	dc59      	bgt.n	8005e62 <_dtoa_r+0x922>
 8005dae:	e08e      	b.n	8005ece <_dtoa_r+0x98e>
 8005db0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005db2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005db6:	e75d      	b.n	8005c74 <_dtoa_r+0x734>
 8005db8:	9b08      	ldr	r3, [sp, #32]
 8005dba:	1e5c      	subs	r4, r3, #1
 8005dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	bfbf      	itttt	lt
 8005dc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005dc4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005dc6:	1ae3      	sublt	r3, r4, r3
 8005dc8:	18d2      	addlt	r2, r2, r3
 8005dca:	bfa8      	it	ge
 8005dcc:	1b1c      	subge	r4, r3, r4
 8005dce:	9b08      	ldr	r3, [sp, #32]
 8005dd0:	bfbe      	ittt	lt
 8005dd2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005dd4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005dd6:	2400      	movlt	r4, #0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	bfb5      	itete	lt
 8005ddc:	eba9 0703 	sublt.w	r7, r9, r3
 8005de0:	464f      	movge	r7, r9
 8005de2:	2300      	movlt	r3, #0
 8005de4:	9b08      	ldrge	r3, [sp, #32]
 8005de6:	e747      	b.n	8005c78 <_dtoa_r+0x738>
 8005de8:	464f      	mov	r7, r9
 8005dea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005dec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005dee:	e74c      	b.n	8005c8a <_dtoa_r+0x74a>
 8005df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005df2:	e773      	b.n	8005cdc <_dtoa_r+0x79c>
 8005df4:	3fe00000 	.word	0x3fe00000
 8005df8:	40240000 	.word	0x40240000
 8005dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	dc18      	bgt.n	8005e34 <_dtoa_r+0x8f4>
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	b9b3      	cbnz	r3, 8005e34 <_dtoa_r+0x8f4>
 8005e06:	9b05      	ldr	r3, [sp, #20]
 8005e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e0c:	b993      	cbnz	r3, 8005e34 <_dtoa_r+0x8f4>
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e14:	0d1b      	lsrs	r3, r3, #20
 8005e16:	051b      	lsls	r3, r3, #20
 8005e18:	b17b      	cbz	r3, 8005e3a <_dtoa_r+0x8fa>
 8005e1a:	f04f 0801 	mov.w	r8, #1
 8005e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e20:	f109 0901 	add.w	r9, r9, #1
 8005e24:	3301      	adds	r3, #1
 8005e26:	9309      	str	r3, [sp, #36]	; 0x24
 8005e28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f47f af6f 	bne.w	8005d0e <_dtoa_r+0x7ce>
 8005e30:	2001      	movs	r0, #1
 8005e32:	e774      	b.n	8005d1e <_dtoa_r+0x7de>
 8005e34:	f04f 0800 	mov.w	r8, #0
 8005e38:	e7f6      	b.n	8005e28 <_dtoa_r+0x8e8>
 8005e3a:	4698      	mov	r8, r3
 8005e3c:	e7f4      	b.n	8005e28 <_dtoa_r+0x8e8>
 8005e3e:	d080      	beq.n	8005d42 <_dtoa_r+0x802>
 8005e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e42:	331c      	adds	r3, #28
 8005e44:	441a      	add	r2, r3
 8005e46:	4499      	add	r9, r3
 8005e48:	441f      	add	r7, r3
 8005e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e4c:	e779      	b.n	8005d42 <_dtoa_r+0x802>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	e7f6      	b.n	8005e40 <_dtoa_r+0x900>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dc34      	bgt.n	8005ec2 <_dtoa_r+0x982>
 8005e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	dd31      	ble.n	8005ec2 <_dtoa_r+0x982>
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	9306      	str	r3, [sp, #24]
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	b963      	cbnz	r3, 8005e80 <_dtoa_r+0x940>
 8005e66:	4621      	mov	r1, r4
 8005e68:	2205      	movs	r2, #5
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 faaa 	bl	80063c4 <__multadd>
 8005e70:	4601      	mov	r1, r0
 8005e72:	4604      	mov	r4, r0
 8005e74:	4650      	mov	r0, sl
 8005e76:	f000 fcbd 	bl	80067f4 <__mcmp>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f73f adbf 	bgt.w	80059fe <_dtoa_r+0x4be>
 8005e80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e82:	9f03      	ldr	r7, [sp, #12]
 8005e84:	ea6f 0b03 	mvn.w	fp, r3
 8005e88:	f04f 0800 	mov.w	r8, #0
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fa76 	bl	8006380 <_Bfree>
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	f43f aead 	beq.w	8005bf4 <_dtoa_r+0x6b4>
 8005e9a:	f1b8 0f00 	cmp.w	r8, #0
 8005e9e:	d005      	beq.n	8005eac <_dtoa_r+0x96c>
 8005ea0:	45b0      	cmp	r8, r6
 8005ea2:	d003      	beq.n	8005eac <_dtoa_r+0x96c>
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fa6a 	bl	8006380 <_Bfree>
 8005eac:	4631      	mov	r1, r6
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fa66 	bl	8006380 <_Bfree>
 8005eb4:	e69e      	b.n	8005bf4 <_dtoa_r+0x6b4>
 8005eb6:	2400      	movs	r4, #0
 8005eb8:	4626      	mov	r6, r4
 8005eba:	e7e1      	b.n	8005e80 <_dtoa_r+0x940>
 8005ebc:	46c3      	mov	fp, r8
 8005ebe:	4626      	mov	r6, r4
 8005ec0:	e59d      	b.n	80059fe <_dtoa_r+0x4be>
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80c8 	beq.w	800605a <_dtoa_r+0xb1a>
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	9306      	str	r3, [sp, #24]
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	dd05      	ble.n	8005ede <_dtoa_r+0x99e>
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	463a      	mov	r2, r7
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fc20 	bl	800671c <__lshift>
 8005edc:	4606      	mov	r6, r0
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	d05b      	beq.n	8005f9c <_dtoa_r+0xa5c>
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	6871      	ldr	r1, [r6, #4]
 8005ee8:	f000 fa0a 	bl	8006300 <_Balloc>
 8005eec:	4607      	mov	r7, r0
 8005eee:	b928      	cbnz	r0, 8005efc <_dtoa_r+0x9bc>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005ef6:	4b81      	ldr	r3, [pc, #516]	; (80060fc <_dtoa_r+0xbbc>)
 8005ef8:	f7ff bb36 	b.w	8005568 <_dtoa_r+0x28>
 8005efc:	6932      	ldr	r2, [r6, #16]
 8005efe:	f106 010c 	add.w	r1, r6, #12
 8005f02:	3202      	adds	r2, #2
 8005f04:	0092      	lsls	r2, r2, #2
 8005f06:	300c      	adds	r0, #12
 8005f08:	f000 ff9e 	bl	8006e48 <memcpy>
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fc03 	bl	800671c <__lshift>
 8005f16:	46b0      	mov	r8, r6
 8005f18:	4606      	mov	r6, r0
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	9a03      	ldr	r2, [sp, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	9308      	str	r3, [sp, #32]
 8005f22:	9b06      	ldr	r3, [sp, #24]
 8005f24:	4413      	add	r3, r2
 8005f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f28:	9b04      	ldr	r3, [sp, #16]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005f30:	9b08      	ldr	r3, [sp, #32]
 8005f32:	4621      	mov	r1, r4
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4650      	mov	r0, sl
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	f7ff fa78 	bl	800542e <quorem>
 8005f3e:	4641      	mov	r1, r8
 8005f40:	9006      	str	r0, [sp, #24]
 8005f42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f46:	4650      	mov	r0, sl
 8005f48:	f000 fc54 	bl	80067f4 <__mcmp>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	9009      	str	r0, [sp, #36]	; 0x24
 8005f50:	4621      	mov	r1, r4
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 fc6a 	bl	800682c <__mdiff>
 8005f58:	68c2      	ldr	r2, [r0, #12]
 8005f5a:	4607      	mov	r7, r0
 8005f5c:	bb02      	cbnz	r2, 8005fa0 <_dtoa_r+0xa60>
 8005f5e:	4601      	mov	r1, r0
 8005f60:	4650      	mov	r0, sl
 8005f62:	f000 fc47 	bl	80067f4 <__mcmp>
 8005f66:	4602      	mov	r2, r0
 8005f68:	4639      	mov	r1, r7
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	920c      	str	r2, [sp, #48]	; 0x30
 8005f6e:	f000 fa07 	bl	8006380 <_Bfree>
 8005f72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f76:	9f08      	ldr	r7, [sp, #32]
 8005f78:	ea43 0102 	orr.w	r1, r3, r2
 8005f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7e:	4319      	orrs	r1, r3
 8005f80:	d110      	bne.n	8005fa4 <_dtoa_r+0xa64>
 8005f82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f86:	d029      	beq.n	8005fdc <_dtoa_r+0xa9c>
 8005f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd02      	ble.n	8005f94 <_dtoa_r+0xa54>
 8005f8e:	9b06      	ldr	r3, [sp, #24]
 8005f90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f94:	9b04      	ldr	r3, [sp, #16]
 8005f96:	f883 9000 	strb.w	r9, [r3]
 8005f9a:	e777      	b.n	8005e8c <_dtoa_r+0x94c>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	e7ba      	b.n	8005f16 <_dtoa_r+0x9d6>
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	e7e1      	b.n	8005f68 <_dtoa_r+0xa28>
 8005fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	db04      	blt.n	8005fb4 <_dtoa_r+0xa74>
 8005faa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005fac:	430b      	orrs	r3, r1
 8005fae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d120      	bne.n	8005ff6 <_dtoa_r+0xab6>
 8005fb4:	2a00      	cmp	r2, #0
 8005fb6:	dded      	ble.n	8005f94 <_dtoa_r+0xa54>
 8005fb8:	4651      	mov	r1, sl
 8005fba:	2201      	movs	r2, #1
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 fbad 	bl	800671c <__lshift>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	f000 fc15 	bl	80067f4 <__mcmp>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	dc03      	bgt.n	8005fd6 <_dtoa_r+0xa96>
 8005fce:	d1e1      	bne.n	8005f94 <_dtoa_r+0xa54>
 8005fd0:	f019 0f01 	tst.w	r9, #1
 8005fd4:	d0de      	beq.n	8005f94 <_dtoa_r+0xa54>
 8005fd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fda:	d1d8      	bne.n	8005f8e <_dtoa_r+0xa4e>
 8005fdc:	2339      	movs	r3, #57	; 0x39
 8005fde:	9a04      	ldr	r2, [sp, #16]
 8005fe0:	7013      	strb	r3, [r2, #0]
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	461f      	mov	r7, r3
 8005fe6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	2a39      	cmp	r2, #57	; 0x39
 8005fee:	d06b      	beq.n	80060c8 <_dtoa_r+0xb88>
 8005ff0:	3201      	adds	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	e74a      	b.n	8005e8c <_dtoa_r+0x94c>
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	dd07      	ble.n	800600a <_dtoa_r+0xaca>
 8005ffa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ffe:	d0ed      	beq.n	8005fdc <_dtoa_r+0xa9c>
 8006000:	9a04      	ldr	r2, [sp, #16]
 8006002:	f109 0301 	add.w	r3, r9, #1
 8006006:	7013      	strb	r3, [r2, #0]
 8006008:	e740      	b.n	8005e8c <_dtoa_r+0x94c>
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800600e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006012:	4293      	cmp	r3, r2
 8006014:	d042      	beq.n	800609c <_dtoa_r+0xb5c>
 8006016:	4651      	mov	r1, sl
 8006018:	2300      	movs	r3, #0
 800601a:	220a      	movs	r2, #10
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f9d1 	bl	80063c4 <__multadd>
 8006022:	45b0      	cmp	r8, r6
 8006024:	4682      	mov	sl, r0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	f04f 020a 	mov.w	r2, #10
 800602e:	4641      	mov	r1, r8
 8006030:	4628      	mov	r0, r5
 8006032:	d107      	bne.n	8006044 <_dtoa_r+0xb04>
 8006034:	f000 f9c6 	bl	80063c4 <__multadd>
 8006038:	4680      	mov	r8, r0
 800603a:	4606      	mov	r6, r0
 800603c:	9b08      	ldr	r3, [sp, #32]
 800603e:	3301      	adds	r3, #1
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	e775      	b.n	8005f30 <_dtoa_r+0x9f0>
 8006044:	f000 f9be 	bl	80063c4 <__multadd>
 8006048:	4631      	mov	r1, r6
 800604a:	4680      	mov	r8, r0
 800604c:	2300      	movs	r3, #0
 800604e:	220a      	movs	r2, #10
 8006050:	4628      	mov	r0, r5
 8006052:	f000 f9b7 	bl	80063c4 <__multadd>
 8006056:	4606      	mov	r6, r0
 8006058:	e7f0      	b.n	800603c <_dtoa_r+0xafc>
 800605a:	9b08      	ldr	r3, [sp, #32]
 800605c:	9306      	str	r3, [sp, #24]
 800605e:	9f03      	ldr	r7, [sp, #12]
 8006060:	4621      	mov	r1, r4
 8006062:	4650      	mov	r0, sl
 8006064:	f7ff f9e3 	bl	800542e <quorem>
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800606e:	f807 9b01 	strb.w	r9, [r7], #1
 8006072:	1afa      	subs	r2, r7, r3
 8006074:	9b06      	ldr	r3, [sp, #24]
 8006076:	4293      	cmp	r3, r2
 8006078:	dd07      	ble.n	800608a <_dtoa_r+0xb4a>
 800607a:	4651      	mov	r1, sl
 800607c:	2300      	movs	r3, #0
 800607e:	220a      	movs	r2, #10
 8006080:	4628      	mov	r0, r5
 8006082:	f000 f99f 	bl	80063c4 <__multadd>
 8006086:	4682      	mov	sl, r0
 8006088:	e7ea      	b.n	8006060 <_dtoa_r+0xb20>
 800608a:	9b06      	ldr	r3, [sp, #24]
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	bfcc      	ite	gt
 8006094:	461f      	movgt	r7, r3
 8006096:	2701      	movle	r7, #1
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	441f      	add	r7, r3
 800609c:	4651      	mov	r1, sl
 800609e:	2201      	movs	r2, #1
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 fb3b 	bl	800671c <__lshift>
 80060a6:	4621      	mov	r1, r4
 80060a8:	4682      	mov	sl, r0
 80060aa:	f000 fba3 	bl	80067f4 <__mcmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	dc97      	bgt.n	8005fe2 <_dtoa_r+0xaa2>
 80060b2:	d102      	bne.n	80060ba <_dtoa_r+0xb7a>
 80060b4:	f019 0f01 	tst.w	r9, #1
 80060b8:	d193      	bne.n	8005fe2 <_dtoa_r+0xaa2>
 80060ba:	463b      	mov	r3, r7
 80060bc:	461f      	mov	r7, r3
 80060be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060c2:	2a30      	cmp	r2, #48	; 0x30
 80060c4:	d0fa      	beq.n	80060bc <_dtoa_r+0xb7c>
 80060c6:	e6e1      	b.n	8005e8c <_dtoa_r+0x94c>
 80060c8:	9a03      	ldr	r2, [sp, #12]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d18a      	bne.n	8005fe4 <_dtoa_r+0xaa4>
 80060ce:	2331      	movs	r3, #49	; 0x31
 80060d0:	f10b 0b01 	add.w	fp, fp, #1
 80060d4:	e797      	b.n	8006006 <_dtoa_r+0xac6>
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <_dtoa_r+0xbc0>)
 80060d8:	f7ff ba9f 	b.w	800561a <_dtoa_r+0xda>
 80060dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f47f aa77 	bne.w	80055d2 <_dtoa_r+0x92>
 80060e4:	4b07      	ldr	r3, [pc, #28]	; (8006104 <_dtoa_r+0xbc4>)
 80060e6:	f7ff ba98 	b.w	800561a <_dtoa_r+0xda>
 80060ea:	9b06      	ldr	r3, [sp, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dcb6      	bgt.n	800605e <_dtoa_r+0xb1e>
 80060f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	f73f aeb5 	bgt.w	8005e62 <_dtoa_r+0x922>
 80060f8:	e7b1      	b.n	800605e <_dtoa_r+0xb1e>
 80060fa:	bf00      	nop
 80060fc:	080076a8 	.word	0x080076a8
 8006100:	08007608 	.word	0x08007608
 8006104:	0800762c 	.word	0x0800762c

08006108 <_free_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4605      	mov	r5, r0
 800610c:	2900      	cmp	r1, #0
 800610e:	d040      	beq.n	8006192 <_free_r+0x8a>
 8006110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006114:	1f0c      	subs	r4, r1, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	bfb8      	it	lt
 800611a:	18e4      	addlt	r4, r4, r3
 800611c:	f000 f8e4 	bl	80062e8 <__malloc_lock>
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <_free_r+0x8c>)
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	b933      	cbnz	r3, 8006134 <_free_r+0x2c>
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	6014      	str	r4, [r2, #0]
 800612a:	4628      	mov	r0, r5
 800612c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006130:	f000 b8e0 	b.w	80062f4 <__malloc_unlock>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d908      	bls.n	800614a <_free_r+0x42>
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	1821      	adds	r1, r4, r0
 800613c:	428b      	cmp	r3, r1
 800613e:	bf01      	itttt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	1809      	addeq	r1, r1, r0
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	e7ed      	b.n	8006126 <_free_r+0x1e>
 800614a:	461a      	mov	r2, r3
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b10b      	cbz	r3, 8006154 <_free_r+0x4c>
 8006150:	42a3      	cmp	r3, r4
 8006152:	d9fa      	bls.n	800614a <_free_r+0x42>
 8006154:	6811      	ldr	r1, [r2, #0]
 8006156:	1850      	adds	r0, r2, r1
 8006158:	42a0      	cmp	r0, r4
 800615a:	d10b      	bne.n	8006174 <_free_r+0x6c>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	4401      	add	r1, r0
 8006160:	1850      	adds	r0, r2, r1
 8006162:	4283      	cmp	r3, r0
 8006164:	6011      	str	r1, [r2, #0]
 8006166:	d1e0      	bne.n	800612a <_free_r+0x22>
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4408      	add	r0, r1
 800616e:	6010      	str	r0, [r2, #0]
 8006170:	6053      	str	r3, [r2, #4]
 8006172:	e7da      	b.n	800612a <_free_r+0x22>
 8006174:	d902      	bls.n	800617c <_free_r+0x74>
 8006176:	230c      	movs	r3, #12
 8006178:	602b      	str	r3, [r5, #0]
 800617a:	e7d6      	b.n	800612a <_free_r+0x22>
 800617c:	6820      	ldr	r0, [r4, #0]
 800617e:	1821      	adds	r1, r4, r0
 8006180:	428b      	cmp	r3, r1
 8006182:	bf01      	itttt	eq
 8006184:	6819      	ldreq	r1, [r3, #0]
 8006186:	685b      	ldreq	r3, [r3, #4]
 8006188:	1809      	addeq	r1, r1, r0
 800618a:	6021      	streq	r1, [r4, #0]
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	6054      	str	r4, [r2, #4]
 8006190:	e7cb      	b.n	800612a <_free_r+0x22>
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	200004f4 	.word	0x200004f4

08006198 <malloc>:
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <malloc+0xc>)
 800619a:	4601      	mov	r1, r0
 800619c:	6818      	ldr	r0, [r3, #0]
 800619e:	f000 b823 	b.w	80061e8 <_malloc_r>
 80061a2:	bf00      	nop
 80061a4:	20000078 	.word	0x20000078

080061a8 <sbrk_aligned>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4e0e      	ldr	r6, [pc, #56]	; (80061e4 <sbrk_aligned+0x3c>)
 80061ac:	460c      	mov	r4, r1
 80061ae:	6831      	ldr	r1, [r6, #0]
 80061b0:	4605      	mov	r5, r0
 80061b2:	b911      	cbnz	r1, 80061ba <sbrk_aligned+0x12>
 80061b4:	f000 fe38 	bl	8006e28 <_sbrk_r>
 80061b8:	6030      	str	r0, [r6, #0]
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 fe33 	bl	8006e28 <_sbrk_r>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d00a      	beq.n	80061dc <sbrk_aligned+0x34>
 80061c6:	1cc4      	adds	r4, r0, #3
 80061c8:	f024 0403 	bic.w	r4, r4, #3
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d007      	beq.n	80061e0 <sbrk_aligned+0x38>
 80061d0:	1a21      	subs	r1, r4, r0
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 fe28 	bl	8006e28 <_sbrk_r>
 80061d8:	3001      	adds	r0, #1
 80061da:	d101      	bne.n	80061e0 <sbrk_aligned+0x38>
 80061dc:	f04f 34ff 	mov.w	r4, #4294967295
 80061e0:	4620      	mov	r0, r4
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	200004f8 	.word	0x200004f8

080061e8 <_malloc_r>:
 80061e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ec:	1ccd      	adds	r5, r1, #3
 80061ee:	f025 0503 	bic.w	r5, r5, #3
 80061f2:	3508      	adds	r5, #8
 80061f4:	2d0c      	cmp	r5, #12
 80061f6:	bf38      	it	cc
 80061f8:	250c      	movcc	r5, #12
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	4607      	mov	r7, r0
 80061fe:	db01      	blt.n	8006204 <_malloc_r+0x1c>
 8006200:	42a9      	cmp	r1, r5
 8006202:	d905      	bls.n	8006210 <_malloc_r+0x28>
 8006204:	230c      	movs	r3, #12
 8006206:	2600      	movs	r6, #0
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	4630      	mov	r0, r6
 800620c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006210:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062e4 <_malloc_r+0xfc>
 8006214:	f000 f868 	bl	80062e8 <__malloc_lock>
 8006218:	f8d8 3000 	ldr.w	r3, [r8]
 800621c:	461c      	mov	r4, r3
 800621e:	bb5c      	cbnz	r4, 8006278 <_malloc_r+0x90>
 8006220:	4629      	mov	r1, r5
 8006222:	4638      	mov	r0, r7
 8006224:	f7ff ffc0 	bl	80061a8 <sbrk_aligned>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	4604      	mov	r4, r0
 800622c:	d155      	bne.n	80062da <_malloc_r+0xf2>
 800622e:	f8d8 4000 	ldr.w	r4, [r8]
 8006232:	4626      	mov	r6, r4
 8006234:	2e00      	cmp	r6, #0
 8006236:	d145      	bne.n	80062c4 <_malloc_r+0xdc>
 8006238:	2c00      	cmp	r4, #0
 800623a:	d048      	beq.n	80062ce <_malloc_r+0xe6>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	4631      	mov	r1, r6
 8006240:	4638      	mov	r0, r7
 8006242:	eb04 0903 	add.w	r9, r4, r3
 8006246:	f000 fdef 	bl	8006e28 <_sbrk_r>
 800624a:	4581      	cmp	r9, r0
 800624c:	d13f      	bne.n	80062ce <_malloc_r+0xe6>
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	4638      	mov	r0, r7
 8006252:	1a6d      	subs	r5, r5, r1
 8006254:	4629      	mov	r1, r5
 8006256:	f7ff ffa7 	bl	80061a8 <sbrk_aligned>
 800625a:	3001      	adds	r0, #1
 800625c:	d037      	beq.n	80062ce <_malloc_r+0xe6>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	442b      	add	r3, r5
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	f8d8 3000 	ldr.w	r3, [r8]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d038      	beq.n	80062de <_malloc_r+0xf6>
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	42a2      	cmp	r2, r4
 8006270:	d12b      	bne.n	80062ca <_malloc_r+0xe2>
 8006272:	2200      	movs	r2, #0
 8006274:	605a      	str	r2, [r3, #4]
 8006276:	e00f      	b.n	8006298 <_malloc_r+0xb0>
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	1b52      	subs	r2, r2, r5
 800627c:	d41f      	bmi.n	80062be <_malloc_r+0xd6>
 800627e:	2a0b      	cmp	r2, #11
 8006280:	d917      	bls.n	80062b2 <_malloc_r+0xca>
 8006282:	1961      	adds	r1, r4, r5
 8006284:	42a3      	cmp	r3, r4
 8006286:	6025      	str	r5, [r4, #0]
 8006288:	bf18      	it	ne
 800628a:	6059      	strne	r1, [r3, #4]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	bf08      	it	eq
 8006290:	f8c8 1000 	streq.w	r1, [r8]
 8006294:	5162      	str	r2, [r4, r5]
 8006296:	604b      	str	r3, [r1, #4]
 8006298:	4638      	mov	r0, r7
 800629a:	f104 060b 	add.w	r6, r4, #11
 800629e:	f000 f829 	bl	80062f4 <__malloc_unlock>
 80062a2:	f026 0607 	bic.w	r6, r6, #7
 80062a6:	1d23      	adds	r3, r4, #4
 80062a8:	1af2      	subs	r2, r6, r3
 80062aa:	d0ae      	beq.n	800620a <_malloc_r+0x22>
 80062ac:	1b9b      	subs	r3, r3, r6
 80062ae:	50a3      	str	r3, [r4, r2]
 80062b0:	e7ab      	b.n	800620a <_malloc_r+0x22>
 80062b2:	42a3      	cmp	r3, r4
 80062b4:	6862      	ldr	r2, [r4, #4]
 80062b6:	d1dd      	bne.n	8006274 <_malloc_r+0x8c>
 80062b8:	f8c8 2000 	str.w	r2, [r8]
 80062bc:	e7ec      	b.n	8006298 <_malloc_r+0xb0>
 80062be:	4623      	mov	r3, r4
 80062c0:	6864      	ldr	r4, [r4, #4]
 80062c2:	e7ac      	b.n	800621e <_malloc_r+0x36>
 80062c4:	4634      	mov	r4, r6
 80062c6:	6876      	ldr	r6, [r6, #4]
 80062c8:	e7b4      	b.n	8006234 <_malloc_r+0x4c>
 80062ca:	4613      	mov	r3, r2
 80062cc:	e7cc      	b.n	8006268 <_malloc_r+0x80>
 80062ce:	230c      	movs	r3, #12
 80062d0:	4638      	mov	r0, r7
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	f000 f80e 	bl	80062f4 <__malloc_unlock>
 80062d8:	e797      	b.n	800620a <_malloc_r+0x22>
 80062da:	6025      	str	r5, [r4, #0]
 80062dc:	e7dc      	b.n	8006298 <_malloc_r+0xb0>
 80062de:	605b      	str	r3, [r3, #4]
 80062e0:	deff      	udf	#255	; 0xff
 80062e2:	bf00      	nop
 80062e4:	200004f4 	.word	0x200004f4

080062e8 <__malloc_lock>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__malloc_lock+0x8>)
 80062ea:	f7ff b890 	b.w	800540e <__retarget_lock_acquire_recursive>
 80062ee:	bf00      	nop
 80062f0:	200004f0 	.word	0x200004f0

080062f4 <__malloc_unlock>:
 80062f4:	4801      	ldr	r0, [pc, #4]	; (80062fc <__malloc_unlock+0x8>)
 80062f6:	f7ff b88b 	b.w	8005410 <__retarget_lock_release_recursive>
 80062fa:	bf00      	nop
 80062fc:	200004f0 	.word	0x200004f0

08006300 <_Balloc>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	69c6      	ldr	r6, [r0, #28]
 8006304:	4604      	mov	r4, r0
 8006306:	460d      	mov	r5, r1
 8006308:	b976      	cbnz	r6, 8006328 <_Balloc+0x28>
 800630a:	2010      	movs	r0, #16
 800630c:	f7ff ff44 	bl	8006198 <malloc>
 8006310:	4602      	mov	r2, r0
 8006312:	61e0      	str	r0, [r4, #28]
 8006314:	b920      	cbnz	r0, 8006320 <_Balloc+0x20>
 8006316:	216b      	movs	r1, #107	; 0x6b
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <_Balloc+0x78>)
 800631a:	4818      	ldr	r0, [pc, #96]	; (800637c <_Balloc+0x7c>)
 800631c:	f000 fda2 	bl	8006e64 <__assert_func>
 8006320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006324:	6006      	str	r6, [r0, #0]
 8006326:	60c6      	str	r6, [r0, #12]
 8006328:	69e6      	ldr	r6, [r4, #28]
 800632a:	68f3      	ldr	r3, [r6, #12]
 800632c:	b183      	cbz	r3, 8006350 <_Balloc+0x50>
 800632e:	69e3      	ldr	r3, [r4, #28]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006336:	b9b8      	cbnz	r0, 8006368 <_Balloc+0x68>
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f605 	lsl.w	r6, r1, r5
 800633e:	1d72      	adds	r2, r6, #5
 8006340:	4620      	mov	r0, r4
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	f000 fdac 	bl	8006ea0 <_calloc_r>
 8006348:	b160      	cbz	r0, 8006364 <_Balloc+0x64>
 800634a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800634e:	e00e      	b.n	800636e <_Balloc+0x6e>
 8006350:	2221      	movs	r2, #33	; 0x21
 8006352:	2104      	movs	r1, #4
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fda3 	bl	8006ea0 <_calloc_r>
 800635a:	69e3      	ldr	r3, [r4, #28]
 800635c:	60f0      	str	r0, [r6, #12]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e4      	bne.n	800632e <_Balloc+0x2e>
 8006364:	2000      	movs	r0, #0
 8006366:	bd70      	pop	{r4, r5, r6, pc}
 8006368:	6802      	ldr	r2, [r0, #0]
 800636a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800636e:	2300      	movs	r3, #0
 8006370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006374:	e7f7      	b.n	8006366 <_Balloc+0x66>
 8006376:	bf00      	nop
 8006378:	08007639 	.word	0x08007639
 800637c:	080076b9 	.word	0x080076b9

08006380 <_Bfree>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	69c6      	ldr	r6, [r0, #28]
 8006384:	4605      	mov	r5, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b976      	cbnz	r6, 80063a8 <_Bfree+0x28>
 800638a:	2010      	movs	r0, #16
 800638c:	f7ff ff04 	bl	8006198 <malloc>
 8006390:	4602      	mov	r2, r0
 8006392:	61e8      	str	r0, [r5, #28]
 8006394:	b920      	cbnz	r0, 80063a0 <_Bfree+0x20>
 8006396:	218f      	movs	r1, #143	; 0x8f
 8006398:	4b08      	ldr	r3, [pc, #32]	; (80063bc <_Bfree+0x3c>)
 800639a:	4809      	ldr	r0, [pc, #36]	; (80063c0 <_Bfree+0x40>)
 800639c:	f000 fd62 	bl	8006e64 <__assert_func>
 80063a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a4:	6006      	str	r6, [r0, #0]
 80063a6:	60c6      	str	r6, [r0, #12]
 80063a8:	b13c      	cbz	r4, 80063ba <_Bfree+0x3a>
 80063aa:	69eb      	ldr	r3, [r5, #28]
 80063ac:	6862      	ldr	r2, [r4, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063b4:	6021      	str	r1, [r4, #0]
 80063b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	08007639 	.word	0x08007639
 80063c0:	080076b9 	.word	0x080076b9

080063c4 <__multadd>:
 80063c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c8:	4607      	mov	r7, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	461e      	mov	r6, r3
 80063ce:	2000      	movs	r0, #0
 80063d0:	690d      	ldr	r5, [r1, #16]
 80063d2:	f101 0c14 	add.w	ip, r1, #20
 80063d6:	f8dc 3000 	ldr.w	r3, [ip]
 80063da:	3001      	adds	r0, #1
 80063dc:	b299      	uxth	r1, r3
 80063de:	fb02 6101 	mla	r1, r2, r1, r6
 80063e2:	0c1e      	lsrs	r6, r3, #16
 80063e4:	0c0b      	lsrs	r3, r1, #16
 80063e6:	fb02 3306 	mla	r3, r2, r6, r3
 80063ea:	b289      	uxth	r1, r1
 80063ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063f0:	4285      	cmp	r5, r0
 80063f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063f6:	f84c 1b04 	str.w	r1, [ip], #4
 80063fa:	dcec      	bgt.n	80063d6 <__multadd+0x12>
 80063fc:	b30e      	cbz	r6, 8006442 <__multadd+0x7e>
 80063fe:	68a3      	ldr	r3, [r4, #8]
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc19      	bgt.n	8006438 <__multadd+0x74>
 8006404:	6861      	ldr	r1, [r4, #4]
 8006406:	4638      	mov	r0, r7
 8006408:	3101      	adds	r1, #1
 800640a:	f7ff ff79 	bl	8006300 <_Balloc>
 800640e:	4680      	mov	r8, r0
 8006410:	b928      	cbnz	r0, 800641e <__multadd+0x5a>
 8006412:	4602      	mov	r2, r0
 8006414:	21ba      	movs	r1, #186	; 0xba
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <__multadd+0x84>)
 8006418:	480c      	ldr	r0, [pc, #48]	; (800644c <__multadd+0x88>)
 800641a:	f000 fd23 	bl	8006e64 <__assert_func>
 800641e:	6922      	ldr	r2, [r4, #16]
 8006420:	f104 010c 	add.w	r1, r4, #12
 8006424:	3202      	adds	r2, #2
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	300c      	adds	r0, #12
 800642a:	f000 fd0d 	bl	8006e48 <memcpy>
 800642e:	4621      	mov	r1, r4
 8006430:	4638      	mov	r0, r7
 8006432:	f7ff ffa5 	bl	8006380 <_Bfree>
 8006436:	4644      	mov	r4, r8
 8006438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800643c:	3501      	adds	r5, #1
 800643e:	615e      	str	r6, [r3, #20]
 8006440:	6125      	str	r5, [r4, #16]
 8006442:	4620      	mov	r0, r4
 8006444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006448:	080076a8 	.word	0x080076a8
 800644c:	080076b9 	.word	0x080076b9

08006450 <__hi0bits>:
 8006450:	0c02      	lsrs	r2, r0, #16
 8006452:	0412      	lsls	r2, r2, #16
 8006454:	4603      	mov	r3, r0
 8006456:	b9ca      	cbnz	r2, 800648c <__hi0bits+0x3c>
 8006458:	0403      	lsls	r3, r0, #16
 800645a:	2010      	movs	r0, #16
 800645c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006460:	bf04      	itt	eq
 8006462:	021b      	lsleq	r3, r3, #8
 8006464:	3008      	addeq	r0, #8
 8006466:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800646a:	bf04      	itt	eq
 800646c:	011b      	lsleq	r3, r3, #4
 800646e:	3004      	addeq	r0, #4
 8006470:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006474:	bf04      	itt	eq
 8006476:	009b      	lsleq	r3, r3, #2
 8006478:	3002      	addeq	r0, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	db05      	blt.n	800648a <__hi0bits+0x3a>
 800647e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006482:	f100 0001 	add.w	r0, r0, #1
 8006486:	bf08      	it	eq
 8006488:	2020      	moveq	r0, #32
 800648a:	4770      	bx	lr
 800648c:	2000      	movs	r0, #0
 800648e:	e7e5      	b.n	800645c <__hi0bits+0xc>

08006490 <__lo0bits>:
 8006490:	6803      	ldr	r3, [r0, #0]
 8006492:	4602      	mov	r2, r0
 8006494:	f013 0007 	ands.w	r0, r3, #7
 8006498:	d00b      	beq.n	80064b2 <__lo0bits+0x22>
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	d421      	bmi.n	80064e2 <__lo0bits+0x52>
 800649e:	0798      	lsls	r0, r3, #30
 80064a0:	bf49      	itett	mi
 80064a2:	085b      	lsrmi	r3, r3, #1
 80064a4:	089b      	lsrpl	r3, r3, #2
 80064a6:	2001      	movmi	r0, #1
 80064a8:	6013      	strmi	r3, [r2, #0]
 80064aa:	bf5c      	itt	pl
 80064ac:	2002      	movpl	r0, #2
 80064ae:	6013      	strpl	r3, [r2, #0]
 80064b0:	4770      	bx	lr
 80064b2:	b299      	uxth	r1, r3
 80064b4:	b909      	cbnz	r1, 80064ba <__lo0bits+0x2a>
 80064b6:	2010      	movs	r0, #16
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	b2d9      	uxtb	r1, r3
 80064bc:	b909      	cbnz	r1, 80064c2 <__lo0bits+0x32>
 80064be:	3008      	adds	r0, #8
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	0719      	lsls	r1, r3, #28
 80064c4:	bf04      	itt	eq
 80064c6:	091b      	lsreq	r3, r3, #4
 80064c8:	3004      	addeq	r0, #4
 80064ca:	0799      	lsls	r1, r3, #30
 80064cc:	bf04      	itt	eq
 80064ce:	089b      	lsreq	r3, r3, #2
 80064d0:	3002      	addeq	r0, #2
 80064d2:	07d9      	lsls	r1, r3, #31
 80064d4:	d403      	bmi.n	80064de <__lo0bits+0x4e>
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	f100 0001 	add.w	r0, r0, #1
 80064dc:	d003      	beq.n	80064e6 <__lo0bits+0x56>
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4770      	bx	lr
 80064e2:	2000      	movs	r0, #0
 80064e4:	4770      	bx	lr
 80064e6:	2020      	movs	r0, #32
 80064e8:	4770      	bx	lr
	...

080064ec <__i2b>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	2101      	movs	r1, #1
 80064f2:	f7ff ff05 	bl	8006300 <_Balloc>
 80064f6:	4602      	mov	r2, r0
 80064f8:	b928      	cbnz	r0, 8006506 <__i2b+0x1a>
 80064fa:	f240 1145 	movw	r1, #325	; 0x145
 80064fe:	4b04      	ldr	r3, [pc, #16]	; (8006510 <__i2b+0x24>)
 8006500:	4804      	ldr	r0, [pc, #16]	; (8006514 <__i2b+0x28>)
 8006502:	f000 fcaf 	bl	8006e64 <__assert_func>
 8006506:	2301      	movs	r3, #1
 8006508:	6144      	str	r4, [r0, #20]
 800650a:	6103      	str	r3, [r0, #16]
 800650c:	bd10      	pop	{r4, pc}
 800650e:	bf00      	nop
 8006510:	080076a8 	.word	0x080076a8
 8006514:	080076b9 	.word	0x080076b9

08006518 <__multiply>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4691      	mov	r9, r2
 800651e:	690a      	ldr	r2, [r1, #16]
 8006520:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006524:	460c      	mov	r4, r1
 8006526:	429a      	cmp	r2, r3
 8006528:	bfbe      	ittt	lt
 800652a:	460b      	movlt	r3, r1
 800652c:	464c      	movlt	r4, r9
 800652e:	4699      	movlt	r9, r3
 8006530:	6927      	ldr	r7, [r4, #16]
 8006532:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	6861      	ldr	r1, [r4, #4]
 800653a:	eb07 060a 	add.w	r6, r7, sl
 800653e:	42b3      	cmp	r3, r6
 8006540:	b085      	sub	sp, #20
 8006542:	bfb8      	it	lt
 8006544:	3101      	addlt	r1, #1
 8006546:	f7ff fedb 	bl	8006300 <_Balloc>
 800654a:	b930      	cbnz	r0, 800655a <__multiply+0x42>
 800654c:	4602      	mov	r2, r0
 800654e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006552:	4b43      	ldr	r3, [pc, #268]	; (8006660 <__multiply+0x148>)
 8006554:	4843      	ldr	r0, [pc, #268]	; (8006664 <__multiply+0x14c>)
 8006556:	f000 fc85 	bl	8006e64 <__assert_func>
 800655a:	f100 0514 	add.w	r5, r0, #20
 800655e:	462b      	mov	r3, r5
 8006560:	2200      	movs	r2, #0
 8006562:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006566:	4543      	cmp	r3, r8
 8006568:	d321      	bcc.n	80065ae <__multiply+0x96>
 800656a:	f104 0314 	add.w	r3, r4, #20
 800656e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006572:	f109 0314 	add.w	r3, r9, #20
 8006576:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800657a:	9202      	str	r2, [sp, #8]
 800657c:	1b3a      	subs	r2, r7, r4
 800657e:	3a15      	subs	r2, #21
 8006580:	f022 0203 	bic.w	r2, r2, #3
 8006584:	3204      	adds	r2, #4
 8006586:	f104 0115 	add.w	r1, r4, #21
 800658a:	428f      	cmp	r7, r1
 800658c:	bf38      	it	cc
 800658e:	2204      	movcc	r2, #4
 8006590:	9201      	str	r2, [sp, #4]
 8006592:	9a02      	ldr	r2, [sp, #8]
 8006594:	9303      	str	r3, [sp, #12]
 8006596:	429a      	cmp	r2, r3
 8006598:	d80c      	bhi.n	80065b4 <__multiply+0x9c>
 800659a:	2e00      	cmp	r6, #0
 800659c:	dd03      	ble.n	80065a6 <__multiply+0x8e>
 800659e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d05a      	beq.n	800665c <__multiply+0x144>
 80065a6:	6106      	str	r6, [r0, #16]
 80065a8:	b005      	add	sp, #20
 80065aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ae:	f843 2b04 	str.w	r2, [r3], #4
 80065b2:	e7d8      	b.n	8006566 <__multiply+0x4e>
 80065b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80065b8:	f1ba 0f00 	cmp.w	sl, #0
 80065bc:	d023      	beq.n	8006606 <__multiply+0xee>
 80065be:	46a9      	mov	r9, r5
 80065c0:	f04f 0c00 	mov.w	ip, #0
 80065c4:	f104 0e14 	add.w	lr, r4, #20
 80065c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065cc:	f8d9 1000 	ldr.w	r1, [r9]
 80065d0:	fa1f fb82 	uxth.w	fp, r2
 80065d4:	b289      	uxth	r1, r1
 80065d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80065da:	4461      	add	r1, ip
 80065dc:	f8d9 c000 	ldr.w	ip, [r9]
 80065e0:	0c12      	lsrs	r2, r2, #16
 80065e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80065e6:	fb0a c202 	mla	r2, sl, r2, ip
 80065ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80065ee:	b289      	uxth	r1, r1
 80065f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80065f4:	4577      	cmp	r7, lr
 80065f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80065fa:	f849 1b04 	str.w	r1, [r9], #4
 80065fe:	d8e3      	bhi.n	80065c8 <__multiply+0xb0>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	f845 c002 	str.w	ip, [r5, r2]
 8006606:	9a03      	ldr	r2, [sp, #12]
 8006608:	3304      	adds	r3, #4
 800660a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800660e:	f1b9 0f00 	cmp.w	r9, #0
 8006612:	d021      	beq.n	8006658 <__multiply+0x140>
 8006614:	46ae      	mov	lr, r5
 8006616:	f04f 0a00 	mov.w	sl, #0
 800661a:	6829      	ldr	r1, [r5, #0]
 800661c:	f104 0c14 	add.w	ip, r4, #20
 8006620:	f8bc b000 	ldrh.w	fp, [ip]
 8006624:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006628:	b289      	uxth	r1, r1
 800662a:	fb09 220b 	mla	r2, r9, fp, r2
 800662e:	4452      	add	r2, sl
 8006630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006634:	f84e 1b04 	str.w	r1, [lr], #4
 8006638:	f85c 1b04 	ldr.w	r1, [ip], #4
 800663c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006640:	f8be 1000 	ldrh.w	r1, [lr]
 8006644:	4567      	cmp	r7, ip
 8006646:	fb09 110a 	mla	r1, r9, sl, r1
 800664a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800664e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006652:	d8e5      	bhi.n	8006620 <__multiply+0x108>
 8006654:	9a01      	ldr	r2, [sp, #4]
 8006656:	50a9      	str	r1, [r5, r2]
 8006658:	3504      	adds	r5, #4
 800665a:	e79a      	b.n	8006592 <__multiply+0x7a>
 800665c:	3e01      	subs	r6, #1
 800665e:	e79c      	b.n	800659a <__multiply+0x82>
 8006660:	080076a8 	.word	0x080076a8
 8006664:	080076b9 	.word	0x080076b9

08006668 <__pow5mult>:
 8006668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800666c:	4615      	mov	r5, r2
 800666e:	f012 0203 	ands.w	r2, r2, #3
 8006672:	4606      	mov	r6, r0
 8006674:	460f      	mov	r7, r1
 8006676:	d007      	beq.n	8006688 <__pow5mult+0x20>
 8006678:	4c25      	ldr	r4, [pc, #148]	; (8006710 <__pow5mult+0xa8>)
 800667a:	3a01      	subs	r2, #1
 800667c:	2300      	movs	r3, #0
 800667e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006682:	f7ff fe9f 	bl	80063c4 <__multadd>
 8006686:	4607      	mov	r7, r0
 8006688:	10ad      	asrs	r5, r5, #2
 800668a:	d03d      	beq.n	8006708 <__pow5mult+0xa0>
 800668c:	69f4      	ldr	r4, [r6, #28]
 800668e:	b97c      	cbnz	r4, 80066b0 <__pow5mult+0x48>
 8006690:	2010      	movs	r0, #16
 8006692:	f7ff fd81 	bl	8006198 <malloc>
 8006696:	4602      	mov	r2, r0
 8006698:	61f0      	str	r0, [r6, #28]
 800669a:	b928      	cbnz	r0, 80066a8 <__pow5mult+0x40>
 800669c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80066a0:	4b1c      	ldr	r3, [pc, #112]	; (8006714 <__pow5mult+0xac>)
 80066a2:	481d      	ldr	r0, [pc, #116]	; (8006718 <__pow5mult+0xb0>)
 80066a4:	f000 fbde 	bl	8006e64 <__assert_func>
 80066a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066ac:	6004      	str	r4, [r0, #0]
 80066ae:	60c4      	str	r4, [r0, #12]
 80066b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80066b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066b8:	b94c      	cbnz	r4, 80066ce <__pow5mult+0x66>
 80066ba:	f240 2171 	movw	r1, #625	; 0x271
 80066be:	4630      	mov	r0, r6
 80066c0:	f7ff ff14 	bl	80064ec <__i2b>
 80066c4:	2300      	movs	r3, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80066cc:	6003      	str	r3, [r0, #0]
 80066ce:	f04f 0900 	mov.w	r9, #0
 80066d2:	07eb      	lsls	r3, r5, #31
 80066d4:	d50a      	bpl.n	80066ec <__pow5mult+0x84>
 80066d6:	4639      	mov	r1, r7
 80066d8:	4622      	mov	r2, r4
 80066da:	4630      	mov	r0, r6
 80066dc:	f7ff ff1c 	bl	8006518 <__multiply>
 80066e0:	4680      	mov	r8, r0
 80066e2:	4639      	mov	r1, r7
 80066e4:	4630      	mov	r0, r6
 80066e6:	f7ff fe4b 	bl	8006380 <_Bfree>
 80066ea:	4647      	mov	r7, r8
 80066ec:	106d      	asrs	r5, r5, #1
 80066ee:	d00b      	beq.n	8006708 <__pow5mult+0xa0>
 80066f0:	6820      	ldr	r0, [r4, #0]
 80066f2:	b938      	cbnz	r0, 8006704 <__pow5mult+0x9c>
 80066f4:	4622      	mov	r2, r4
 80066f6:	4621      	mov	r1, r4
 80066f8:	4630      	mov	r0, r6
 80066fa:	f7ff ff0d 	bl	8006518 <__multiply>
 80066fe:	6020      	str	r0, [r4, #0]
 8006700:	f8c0 9000 	str.w	r9, [r0]
 8006704:	4604      	mov	r4, r0
 8006706:	e7e4      	b.n	80066d2 <__pow5mult+0x6a>
 8006708:	4638      	mov	r0, r7
 800670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670e:	bf00      	nop
 8006710:	08007808 	.word	0x08007808
 8006714:	08007639 	.word	0x08007639
 8006718:	080076b9 	.word	0x080076b9

0800671c <__lshift>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	460c      	mov	r4, r1
 8006722:	4607      	mov	r7, r0
 8006724:	4691      	mov	r9, r2
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6849      	ldr	r1, [r1, #4]
 800672a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800672e:	68a3      	ldr	r3, [r4, #8]
 8006730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006734:	f108 0601 	add.w	r6, r8, #1
 8006738:	42b3      	cmp	r3, r6
 800673a:	db0b      	blt.n	8006754 <__lshift+0x38>
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff fddf 	bl	8006300 <_Balloc>
 8006742:	4605      	mov	r5, r0
 8006744:	b948      	cbnz	r0, 800675a <__lshift+0x3e>
 8006746:	4602      	mov	r2, r0
 8006748:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <__lshift+0xd0>)
 800674e:	4828      	ldr	r0, [pc, #160]	; (80067f0 <__lshift+0xd4>)
 8006750:	f000 fb88 	bl	8006e64 <__assert_func>
 8006754:	3101      	adds	r1, #1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	e7ee      	b.n	8006738 <__lshift+0x1c>
 800675a:	2300      	movs	r3, #0
 800675c:	f100 0114 	add.w	r1, r0, #20
 8006760:	f100 0210 	add.w	r2, r0, #16
 8006764:	4618      	mov	r0, r3
 8006766:	4553      	cmp	r3, sl
 8006768:	db33      	blt.n	80067d2 <__lshift+0xb6>
 800676a:	6920      	ldr	r0, [r4, #16]
 800676c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006770:	f104 0314 	add.w	r3, r4, #20
 8006774:	f019 091f 	ands.w	r9, r9, #31
 8006778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800677c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006780:	d02b      	beq.n	80067da <__lshift+0xbe>
 8006782:	468a      	mov	sl, r1
 8006784:	2200      	movs	r2, #0
 8006786:	f1c9 0e20 	rsb	lr, r9, #32
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	fa00 f009 	lsl.w	r0, r0, r9
 8006790:	4310      	orrs	r0, r2
 8006792:	f84a 0b04 	str.w	r0, [sl], #4
 8006796:	f853 2b04 	ldr.w	r2, [r3], #4
 800679a:	459c      	cmp	ip, r3
 800679c:	fa22 f20e 	lsr.w	r2, r2, lr
 80067a0:	d8f3      	bhi.n	800678a <__lshift+0x6e>
 80067a2:	ebac 0304 	sub.w	r3, ip, r4
 80067a6:	3b15      	subs	r3, #21
 80067a8:	f023 0303 	bic.w	r3, r3, #3
 80067ac:	3304      	adds	r3, #4
 80067ae:	f104 0015 	add.w	r0, r4, #21
 80067b2:	4584      	cmp	ip, r0
 80067b4:	bf38      	it	cc
 80067b6:	2304      	movcc	r3, #4
 80067b8:	50ca      	str	r2, [r1, r3]
 80067ba:	b10a      	cbz	r2, 80067c0 <__lshift+0xa4>
 80067bc:	f108 0602 	add.w	r6, r8, #2
 80067c0:	3e01      	subs	r6, #1
 80067c2:	4638      	mov	r0, r7
 80067c4:	4621      	mov	r1, r4
 80067c6:	612e      	str	r6, [r5, #16]
 80067c8:	f7ff fdda 	bl	8006380 <_Bfree>
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80067d6:	3301      	adds	r3, #1
 80067d8:	e7c5      	b.n	8006766 <__lshift+0x4a>
 80067da:	3904      	subs	r1, #4
 80067dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e0:	459c      	cmp	ip, r3
 80067e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80067e6:	d8f9      	bhi.n	80067dc <__lshift+0xc0>
 80067e8:	e7ea      	b.n	80067c0 <__lshift+0xa4>
 80067ea:	bf00      	nop
 80067ec:	080076a8 	.word	0x080076a8
 80067f0:	080076b9 	.word	0x080076b9

080067f4 <__mcmp>:
 80067f4:	4603      	mov	r3, r0
 80067f6:	690a      	ldr	r2, [r1, #16]
 80067f8:	6900      	ldr	r0, [r0, #16]
 80067fa:	b530      	push	{r4, r5, lr}
 80067fc:	1a80      	subs	r0, r0, r2
 80067fe:	d10d      	bne.n	800681c <__mcmp+0x28>
 8006800:	3314      	adds	r3, #20
 8006802:	3114      	adds	r1, #20
 8006804:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006808:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800680c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006810:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006814:	4295      	cmp	r5, r2
 8006816:	d002      	beq.n	800681e <__mcmp+0x2a>
 8006818:	d304      	bcc.n	8006824 <__mcmp+0x30>
 800681a:	2001      	movs	r0, #1
 800681c:	bd30      	pop	{r4, r5, pc}
 800681e:	42a3      	cmp	r3, r4
 8006820:	d3f4      	bcc.n	800680c <__mcmp+0x18>
 8006822:	e7fb      	b.n	800681c <__mcmp+0x28>
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e7f8      	b.n	800681c <__mcmp+0x28>
	...

0800682c <__mdiff>:
 800682c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	460d      	mov	r5, r1
 8006832:	4607      	mov	r7, r0
 8006834:	4611      	mov	r1, r2
 8006836:	4628      	mov	r0, r5
 8006838:	4614      	mov	r4, r2
 800683a:	f7ff ffdb 	bl	80067f4 <__mcmp>
 800683e:	1e06      	subs	r6, r0, #0
 8006840:	d111      	bne.n	8006866 <__mdiff+0x3a>
 8006842:	4631      	mov	r1, r6
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fd5b 	bl	8006300 <_Balloc>
 800684a:	4602      	mov	r2, r0
 800684c:	b928      	cbnz	r0, 800685a <__mdiff+0x2e>
 800684e:	f240 2137 	movw	r1, #567	; 0x237
 8006852:	4b3a      	ldr	r3, [pc, #232]	; (800693c <__mdiff+0x110>)
 8006854:	483a      	ldr	r0, [pc, #232]	; (8006940 <__mdiff+0x114>)
 8006856:	f000 fb05 	bl	8006e64 <__assert_func>
 800685a:	2301      	movs	r3, #1
 800685c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006860:	4610      	mov	r0, r2
 8006862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	bfa4      	itt	ge
 8006868:	4623      	movge	r3, r4
 800686a:	462c      	movge	r4, r5
 800686c:	4638      	mov	r0, r7
 800686e:	6861      	ldr	r1, [r4, #4]
 8006870:	bfa6      	itte	ge
 8006872:	461d      	movge	r5, r3
 8006874:	2600      	movge	r6, #0
 8006876:	2601      	movlt	r6, #1
 8006878:	f7ff fd42 	bl	8006300 <_Balloc>
 800687c:	4602      	mov	r2, r0
 800687e:	b918      	cbnz	r0, 8006888 <__mdiff+0x5c>
 8006880:	f240 2145 	movw	r1, #581	; 0x245
 8006884:	4b2d      	ldr	r3, [pc, #180]	; (800693c <__mdiff+0x110>)
 8006886:	e7e5      	b.n	8006854 <__mdiff+0x28>
 8006888:	f102 0814 	add.w	r8, r2, #20
 800688c:	46c2      	mov	sl, r8
 800688e:	f04f 0c00 	mov.w	ip, #0
 8006892:	6927      	ldr	r7, [r4, #16]
 8006894:	60c6      	str	r6, [r0, #12]
 8006896:	692e      	ldr	r6, [r5, #16]
 8006898:	f104 0014 	add.w	r0, r4, #20
 800689c:	f105 0914 	add.w	r9, r5, #20
 80068a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068a8:	3410      	adds	r4, #16
 80068aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80068b2:	fa1f f18b 	uxth.w	r1, fp
 80068b6:	4461      	add	r1, ip
 80068b8:	fa1f fc83 	uxth.w	ip, r3
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	eba1 010c 	sub.w	r1, r1, ip
 80068c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068ca:	b289      	uxth	r1, r1
 80068cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80068d0:	454e      	cmp	r6, r9
 80068d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068d6:	f84a 1b04 	str.w	r1, [sl], #4
 80068da:	d8e6      	bhi.n	80068aa <__mdiff+0x7e>
 80068dc:	1b73      	subs	r3, r6, r5
 80068de:	3b15      	subs	r3, #21
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	3515      	adds	r5, #21
 80068e6:	3304      	adds	r3, #4
 80068e8:	42ae      	cmp	r6, r5
 80068ea:	bf38      	it	cc
 80068ec:	2304      	movcc	r3, #4
 80068ee:	4418      	add	r0, r3
 80068f0:	4443      	add	r3, r8
 80068f2:	461e      	mov	r6, r3
 80068f4:	4605      	mov	r5, r0
 80068f6:	4575      	cmp	r5, lr
 80068f8:	d30e      	bcc.n	8006918 <__mdiff+0xec>
 80068fa:	f10e 0103 	add.w	r1, lr, #3
 80068fe:	1a09      	subs	r1, r1, r0
 8006900:	f021 0103 	bic.w	r1, r1, #3
 8006904:	3803      	subs	r0, #3
 8006906:	4586      	cmp	lr, r0
 8006908:	bf38      	it	cc
 800690a:	2100      	movcc	r1, #0
 800690c:	440b      	add	r3, r1
 800690e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006912:	b189      	cbz	r1, 8006938 <__mdiff+0x10c>
 8006914:	6117      	str	r7, [r2, #16]
 8006916:	e7a3      	b.n	8006860 <__mdiff+0x34>
 8006918:	f855 8b04 	ldr.w	r8, [r5], #4
 800691c:	fa1f f188 	uxth.w	r1, r8
 8006920:	4461      	add	r1, ip
 8006922:	140c      	asrs	r4, r1, #16
 8006924:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006928:	b289      	uxth	r1, r1
 800692a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800692e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006932:	f846 1b04 	str.w	r1, [r6], #4
 8006936:	e7de      	b.n	80068f6 <__mdiff+0xca>
 8006938:	3f01      	subs	r7, #1
 800693a:	e7e8      	b.n	800690e <__mdiff+0xe2>
 800693c:	080076a8 	.word	0x080076a8
 8006940:	080076b9 	.word	0x080076b9

08006944 <__d2b>:
 8006944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006946:	2101      	movs	r1, #1
 8006948:	4617      	mov	r7, r2
 800694a:	461c      	mov	r4, r3
 800694c:	9e08      	ldr	r6, [sp, #32]
 800694e:	f7ff fcd7 	bl	8006300 <_Balloc>
 8006952:	4605      	mov	r5, r0
 8006954:	b930      	cbnz	r0, 8006964 <__d2b+0x20>
 8006956:	4602      	mov	r2, r0
 8006958:	f240 310f 	movw	r1, #783	; 0x30f
 800695c:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <__d2b+0xa4>)
 800695e:	4823      	ldr	r0, [pc, #140]	; (80069ec <__d2b+0xa8>)
 8006960:	f000 fa80 	bl	8006e64 <__assert_func>
 8006964:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006968:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800696c:	bb24      	cbnz	r4, 80069b8 <__d2b+0x74>
 800696e:	2f00      	cmp	r7, #0
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	d026      	beq.n	80069c2 <__d2b+0x7e>
 8006974:	4668      	mov	r0, sp
 8006976:	9700      	str	r7, [sp, #0]
 8006978:	f7ff fd8a 	bl	8006490 <__lo0bits>
 800697c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006980:	b1e8      	cbz	r0, 80069be <__d2b+0x7a>
 8006982:	f1c0 0320 	rsb	r3, r0, #32
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	430b      	orrs	r3, r1
 800698c:	40c2      	lsrs	r2, r0
 800698e:	616b      	str	r3, [r5, #20]
 8006990:	9201      	str	r2, [sp, #4]
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	bf14      	ite	ne
 8006998:	2102      	movne	r1, #2
 800699a:	2101      	moveq	r1, #1
 800699c:	61ab      	str	r3, [r5, #24]
 800699e:	6129      	str	r1, [r5, #16]
 80069a0:	b1bc      	cbz	r4, 80069d2 <__d2b+0x8e>
 80069a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80069a6:	4404      	add	r4, r0
 80069a8:	6034      	str	r4, [r6, #0]
 80069aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b0:	6018      	str	r0, [r3, #0]
 80069b2:	4628      	mov	r0, r5
 80069b4:	b003      	add	sp, #12
 80069b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069bc:	e7d7      	b.n	800696e <__d2b+0x2a>
 80069be:	6169      	str	r1, [r5, #20]
 80069c0:	e7e7      	b.n	8006992 <__d2b+0x4e>
 80069c2:	a801      	add	r0, sp, #4
 80069c4:	f7ff fd64 	bl	8006490 <__lo0bits>
 80069c8:	9b01      	ldr	r3, [sp, #4]
 80069ca:	2101      	movs	r1, #1
 80069cc:	616b      	str	r3, [r5, #20]
 80069ce:	3020      	adds	r0, #32
 80069d0:	e7e5      	b.n	800699e <__d2b+0x5a>
 80069d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80069d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80069da:	6030      	str	r0, [r6, #0]
 80069dc:	6918      	ldr	r0, [r3, #16]
 80069de:	f7ff fd37 	bl	8006450 <__hi0bits>
 80069e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80069e6:	e7e2      	b.n	80069ae <__d2b+0x6a>
 80069e8:	080076a8 	.word	0x080076a8
 80069ec:	080076b9 	.word	0x080076b9

080069f0 <__ssputs_r>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	461f      	mov	r7, r3
 80069f6:	688e      	ldr	r6, [r1, #8]
 80069f8:	4682      	mov	sl, r0
 80069fa:	42be      	cmp	r6, r7
 80069fc:	460c      	mov	r4, r1
 80069fe:	4690      	mov	r8, r2
 8006a00:	680b      	ldr	r3, [r1, #0]
 8006a02:	d82c      	bhi.n	8006a5e <__ssputs_r+0x6e>
 8006a04:	898a      	ldrh	r2, [r1, #12]
 8006a06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a0a:	d026      	beq.n	8006a5a <__ssputs_r+0x6a>
 8006a0c:	6965      	ldr	r5, [r4, #20]
 8006a0e:	6909      	ldr	r1, [r1, #16]
 8006a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a14:	eba3 0901 	sub.w	r9, r3, r1
 8006a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a1c:	1c7b      	adds	r3, r7, #1
 8006a1e:	444b      	add	r3, r9
 8006a20:	106d      	asrs	r5, r5, #1
 8006a22:	429d      	cmp	r5, r3
 8006a24:	bf38      	it	cc
 8006a26:	461d      	movcc	r5, r3
 8006a28:	0553      	lsls	r3, r2, #21
 8006a2a:	d527      	bpl.n	8006a7c <__ssputs_r+0x8c>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	f7ff fbdb 	bl	80061e8 <_malloc_r>
 8006a32:	4606      	mov	r6, r0
 8006a34:	b360      	cbz	r0, 8006a90 <__ssputs_r+0xa0>
 8006a36:	464a      	mov	r2, r9
 8006a38:	6921      	ldr	r1, [r4, #16]
 8006a3a:	f000 fa05 	bl	8006e48 <memcpy>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	6126      	str	r6, [r4, #16]
 8006a4c:	444e      	add	r6, r9
 8006a4e:	6026      	str	r6, [r4, #0]
 8006a50:	463e      	mov	r6, r7
 8006a52:	6165      	str	r5, [r4, #20]
 8006a54:	eba5 0509 	sub.w	r5, r5, r9
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	42be      	cmp	r6, r7
 8006a5c:	d900      	bls.n	8006a60 <__ssputs_r+0x70>
 8006a5e:	463e      	mov	r6, r7
 8006a60:	4632      	mov	r2, r6
 8006a62:	4641      	mov	r1, r8
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	f000 f9c5 	bl	8006df4 <memmove>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	1b9b      	subs	r3, r3, r6
 8006a70:	60a3      	str	r3, [r4, #8]
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4433      	add	r3, r6
 8006a76:	6023      	str	r3, [r4, #0]
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	f000 fa35 	bl	8006eec <_realloc_r>
 8006a82:	4606      	mov	r6, r0
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d1e0      	bne.n	8006a4a <__ssputs_r+0x5a>
 8006a88:	4650      	mov	r0, sl
 8006a8a:	6921      	ldr	r1, [r4, #16]
 8006a8c:	f7ff fb3c 	bl	8006108 <_free_r>
 8006a90:	230c      	movs	r3, #12
 8006a92:	f8ca 3000 	str.w	r3, [sl]
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	e7e9      	b.n	8006a78 <__ssputs_r+0x88>

08006aa4 <_svfiprintf_r>:
 8006aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4698      	mov	r8, r3
 8006aaa:	898b      	ldrh	r3, [r1, #12]
 8006aac:	4607      	mov	r7, r0
 8006aae:	061b      	lsls	r3, r3, #24
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	4614      	mov	r4, r2
 8006ab4:	b09d      	sub	sp, #116	; 0x74
 8006ab6:	d50e      	bpl.n	8006ad6 <_svfiprintf_r+0x32>
 8006ab8:	690b      	ldr	r3, [r1, #16]
 8006aba:	b963      	cbnz	r3, 8006ad6 <_svfiprintf_r+0x32>
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	f7ff fb93 	bl	80061e8 <_malloc_r>
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	6128      	str	r0, [r5, #16]
 8006ac6:	b920      	cbnz	r0, 8006ad2 <_svfiprintf_r+0x2e>
 8006ac8:	230c      	movs	r3, #12
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	e0d0      	b.n	8006c74 <_svfiprintf_r+0x1d0>
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	616b      	str	r3, [r5, #20]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	2320      	movs	r3, #32
 8006adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae0:	2330      	movs	r3, #48	; 0x30
 8006ae2:	f04f 0901 	mov.w	r9, #1
 8006ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006c8c <_svfiprintf_r+0x1e8>
 8006aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af2:	4623      	mov	r3, r4
 8006af4:	469a      	mov	sl, r3
 8006af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afa:	b10a      	cbz	r2, 8006b00 <_svfiprintf_r+0x5c>
 8006afc:	2a25      	cmp	r2, #37	; 0x25
 8006afe:	d1f9      	bne.n	8006af4 <_svfiprintf_r+0x50>
 8006b00:	ebba 0b04 	subs.w	fp, sl, r4
 8006b04:	d00b      	beq.n	8006b1e <_svfiprintf_r+0x7a>
 8006b06:	465b      	mov	r3, fp
 8006b08:	4622      	mov	r2, r4
 8006b0a:	4629      	mov	r1, r5
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7ff ff6f 	bl	80069f0 <__ssputs_r>
 8006b12:	3001      	adds	r0, #1
 8006b14:	f000 80a9 	beq.w	8006c6a <_svfiprintf_r+0x1c6>
 8006b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1a:	445a      	add	r2, fp
 8006b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80a1 	beq.w	8006c6a <_svfiprintf_r+0x1c6>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b32:	f10a 0a01 	add.w	sl, sl, #1
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006b40:	4654      	mov	r4, sl
 8006b42:	2205      	movs	r2, #5
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	4850      	ldr	r0, [pc, #320]	; (8006c8c <_svfiprintf_r+0x1e8>)
 8006b4a:	f7fe fc62 	bl	8005412 <memchr>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	b9d8      	cbnz	r0, 8006b8a <_svfiprintf_r+0xe6>
 8006b52:	06d0      	lsls	r0, r2, #27
 8006b54:	bf44      	itt	mi
 8006b56:	2320      	movmi	r3, #32
 8006b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b5c:	0711      	lsls	r1, r2, #28
 8006b5e:	bf44      	itt	mi
 8006b60:	232b      	movmi	r3, #43	; 0x2b
 8006b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b66:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6c:	d015      	beq.n	8006b9a <_svfiprintf_r+0xf6>
 8006b6e:	4654      	mov	r4, sl
 8006b70:	2000      	movs	r0, #0
 8006b72:	f04f 0c0a 	mov.w	ip, #10
 8006b76:	9a07      	ldr	r2, [sp, #28]
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b7e:	3b30      	subs	r3, #48	; 0x30
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d94d      	bls.n	8006c20 <_svfiprintf_r+0x17c>
 8006b84:	b1b0      	cbz	r0, 8006bb4 <_svfiprintf_r+0x110>
 8006b86:	9207      	str	r2, [sp, #28]
 8006b88:	e014      	b.n	8006bb4 <_svfiprintf_r+0x110>
 8006b8a:	eba0 0308 	sub.w	r3, r0, r8
 8006b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006b92:	4313      	orrs	r3, r2
 8006b94:	46a2      	mov	sl, r4
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	e7d2      	b.n	8006b40 <_svfiprintf_r+0x9c>
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	9103      	str	r1, [sp, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbb      	ittet	lt
 8006ba6:	425b      	neglt	r3, r3
 8006ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8006bac:	9307      	strge	r3, [sp, #28]
 8006bae:	9307      	strlt	r3, [sp, #28]
 8006bb0:	bfb8      	it	lt
 8006bb2:	9204      	strlt	r2, [sp, #16]
 8006bb4:	7823      	ldrb	r3, [r4, #0]
 8006bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bb8:	d10c      	bne.n	8006bd4 <_svfiprintf_r+0x130>
 8006bba:	7863      	ldrb	r3, [r4, #1]
 8006bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bbe:	d134      	bne.n	8006c2a <_svfiprintf_r+0x186>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	3402      	adds	r4, #2
 8006bc4:	1d1a      	adds	r2, r3, #4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	9203      	str	r2, [sp, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfb8      	it	lt
 8006bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd2:	9305      	str	r3, [sp, #20]
 8006bd4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006c90 <_svfiprintf_r+0x1ec>
 8006bd8:	2203      	movs	r2, #3
 8006bda:	4650      	mov	r0, sl
 8006bdc:	7821      	ldrb	r1, [r4, #0]
 8006bde:	f7fe fc18 	bl	8005412 <memchr>
 8006be2:	b138      	cbz	r0, 8006bf4 <_svfiprintf_r+0x150>
 8006be4:	2240      	movs	r2, #64	; 0x40
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	eba0 000a 	sub.w	r0, r0, sl
 8006bec:	4082      	lsls	r2, r0
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	3401      	adds	r4, #1
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	2206      	movs	r2, #6
 8006bfa:	4826      	ldr	r0, [pc, #152]	; (8006c94 <_svfiprintf_r+0x1f0>)
 8006bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c00:	f7fe fc07 	bl	8005412 <memchr>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d038      	beq.n	8006c7a <_svfiprintf_r+0x1d6>
 8006c08:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <_svfiprintf_r+0x1f4>)
 8006c0a:	bb1b      	cbnz	r3, 8006c54 <_svfiprintf_r+0x1b0>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	3307      	adds	r3, #7
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	3308      	adds	r3, #8
 8006c16:	9303      	str	r3, [sp, #12]
 8006c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c1a:	4433      	add	r3, r6
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	e768      	b.n	8006af2 <_svfiprintf_r+0x4e>
 8006c20:	460c      	mov	r4, r1
 8006c22:	2001      	movs	r0, #1
 8006c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c28:	e7a6      	b.n	8006b78 <_svfiprintf_r+0xd4>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f04f 0c0a 	mov.w	ip, #10
 8006c30:	4619      	mov	r1, r3
 8006c32:	3401      	adds	r4, #1
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	4620      	mov	r0, r4
 8006c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c3c:	3a30      	subs	r2, #48	; 0x30
 8006c3e:	2a09      	cmp	r2, #9
 8006c40:	d903      	bls.n	8006c4a <_svfiprintf_r+0x1a6>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d0c6      	beq.n	8006bd4 <_svfiprintf_r+0x130>
 8006c46:	9105      	str	r1, [sp, #20]
 8006c48:	e7c4      	b.n	8006bd4 <_svfiprintf_r+0x130>
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c52:	e7f0      	b.n	8006c36 <_svfiprintf_r+0x192>
 8006c54:	ab03      	add	r3, sp, #12
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c5e:	a904      	add	r1, sp, #16
 8006c60:	f7fd fe70 	bl	8004944 <_printf_float>
 8006c64:	1c42      	adds	r2, r0, #1
 8006c66:	4606      	mov	r6, r0
 8006c68:	d1d6      	bne.n	8006c18 <_svfiprintf_r+0x174>
 8006c6a:	89ab      	ldrh	r3, [r5, #12]
 8006c6c:	065b      	lsls	r3, r3, #25
 8006c6e:	f53f af2d 	bmi.w	8006acc <_svfiprintf_r+0x28>
 8006c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c74:	b01d      	add	sp, #116	; 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	ab03      	add	r3, sp, #12
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	462a      	mov	r2, r5
 8006c80:	4638      	mov	r0, r7
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <_svfiprintf_r+0x1f8>)
 8006c84:	a904      	add	r1, sp, #16
 8006c86:	f7fe f8fd 	bl	8004e84 <_printf_i>
 8006c8a:	e7eb      	b.n	8006c64 <_svfiprintf_r+0x1c0>
 8006c8c:	08007814 	.word	0x08007814
 8006c90:	0800781a 	.word	0x0800781a
 8006c94:	0800781e 	.word	0x0800781e
 8006c98:	08004945 	.word	0x08004945
 8006c9c:	080069f1 	.word	0x080069f1

08006ca0 <__sflush_r>:
 8006ca0:	898a      	ldrh	r2, [r1, #12]
 8006ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	0710      	lsls	r0, r2, #28
 8006ca8:	460c      	mov	r4, r1
 8006caa:	d457      	bmi.n	8006d5c <__sflush_r+0xbc>
 8006cac:	684b      	ldr	r3, [r1, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dc04      	bgt.n	8006cbc <__sflush_r+0x1c>
 8006cb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc01      	bgt.n	8006cbc <__sflush_r+0x1c>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d0fa      	beq.n	8006cb8 <__sflush_r+0x18>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cc8:	682f      	ldr	r7, [r5, #0]
 8006cca:	6a21      	ldr	r1, [r4, #32]
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	d032      	beq.n	8006d36 <__sflush_r+0x96>
 8006cd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	075a      	lsls	r2, r3, #29
 8006cd6:	d505      	bpl.n	8006ce4 <__sflush_r+0x44>
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	1ac0      	subs	r0, r0, r3
 8006cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cde:	b10b      	cbz	r3, 8006ce4 <__sflush_r+0x44>
 8006ce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce2:	1ac0      	subs	r0, r0, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cea:	4628      	mov	r0, r5
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	47b0      	blx	r6
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	d106      	bne.n	8006d04 <__sflush_r+0x64>
 8006cf6:	6829      	ldr	r1, [r5, #0]
 8006cf8:	291d      	cmp	r1, #29
 8006cfa:	d82b      	bhi.n	8006d54 <__sflush_r+0xb4>
 8006cfc:	4a28      	ldr	r2, [pc, #160]	; (8006da0 <__sflush_r+0x100>)
 8006cfe:	410a      	asrs	r2, r1
 8006d00:	07d6      	lsls	r6, r2, #31
 8006d02:	d427      	bmi.n	8006d54 <__sflush_r+0xb4>
 8006d04:	2200      	movs	r2, #0
 8006d06:	6062      	str	r2, [r4, #4]
 8006d08:	6922      	ldr	r2, [r4, #16]
 8006d0a:	04d9      	lsls	r1, r3, #19
 8006d0c:	6022      	str	r2, [r4, #0]
 8006d0e:	d504      	bpl.n	8006d1a <__sflush_r+0x7a>
 8006d10:	1c42      	adds	r2, r0, #1
 8006d12:	d101      	bne.n	8006d18 <__sflush_r+0x78>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b903      	cbnz	r3, 8006d1a <__sflush_r+0x7a>
 8006d18:	6560      	str	r0, [r4, #84]	; 0x54
 8006d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1c:	602f      	str	r7, [r5, #0]
 8006d1e:	2900      	cmp	r1, #0
 8006d20:	d0ca      	beq.n	8006cb8 <__sflush_r+0x18>
 8006d22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d26:	4299      	cmp	r1, r3
 8006d28:	d002      	beq.n	8006d30 <__sflush_r+0x90>
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f7ff f9ec 	bl	8006108 <_free_r>
 8006d30:	2000      	movs	r0, #0
 8006d32:	6360      	str	r0, [r4, #52]	; 0x34
 8006d34:	e7c1      	b.n	8006cba <__sflush_r+0x1a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	4628      	mov	r0, r5
 8006d3a:	47b0      	blx	r6
 8006d3c:	1c41      	adds	r1, r0, #1
 8006d3e:	d1c8      	bne.n	8006cd2 <__sflush_r+0x32>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0c5      	beq.n	8006cd2 <__sflush_r+0x32>
 8006d46:	2b1d      	cmp	r3, #29
 8006d48:	d001      	beq.n	8006d4e <__sflush_r+0xae>
 8006d4a:	2b16      	cmp	r3, #22
 8006d4c:	d101      	bne.n	8006d52 <__sflush_r+0xb2>
 8006d4e:	602f      	str	r7, [r5, #0]
 8006d50:	e7b2      	b.n	8006cb8 <__sflush_r+0x18>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d58:	81a3      	strh	r3, [r4, #12]
 8006d5a:	e7ae      	b.n	8006cba <__sflush_r+0x1a>
 8006d5c:	690f      	ldr	r7, [r1, #16]
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	d0aa      	beq.n	8006cb8 <__sflush_r+0x18>
 8006d62:	0793      	lsls	r3, r2, #30
 8006d64:	bf18      	it	ne
 8006d66:	2300      	movne	r3, #0
 8006d68:	680e      	ldr	r6, [r1, #0]
 8006d6a:	bf08      	it	eq
 8006d6c:	694b      	ldreq	r3, [r1, #20]
 8006d6e:	1bf6      	subs	r6, r6, r7
 8006d70:	600f      	str	r7, [r1, #0]
 8006d72:	608b      	str	r3, [r1, #8]
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	dd9f      	ble.n	8006cb8 <__sflush_r+0x18>
 8006d78:	4633      	mov	r3, r6
 8006d7a:	463a      	mov	r2, r7
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	6a21      	ldr	r1, [r4, #32]
 8006d80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006d84:	47e0      	blx	ip
 8006d86:	2800      	cmp	r0, #0
 8006d88:	dc06      	bgt.n	8006d98 <__sflush_r+0xf8>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	e790      	b.n	8006cba <__sflush_r+0x1a>
 8006d98:	4407      	add	r7, r0
 8006d9a:	1a36      	subs	r6, r6, r0
 8006d9c:	e7ea      	b.n	8006d74 <__sflush_r+0xd4>
 8006d9e:	bf00      	nop
 8006da0:	dfbffffe 	.word	0xdfbffffe

08006da4 <_fflush_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	690b      	ldr	r3, [r1, #16]
 8006da8:	4605      	mov	r5, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	b913      	cbnz	r3, 8006db4 <_fflush_r+0x10>
 8006dae:	2500      	movs	r5, #0
 8006db0:	4628      	mov	r0, r5
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
 8006db4:	b118      	cbz	r0, 8006dbe <_fflush_r+0x1a>
 8006db6:	6a03      	ldr	r3, [r0, #32]
 8006db8:	b90b      	cbnz	r3, 8006dbe <_fflush_r+0x1a>
 8006dba:	f7fe fa11 	bl	80051e0 <__sinit>
 8006dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f3      	beq.n	8006dae <_fflush_r+0xa>
 8006dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dc8:	07d0      	lsls	r0, r2, #31
 8006dca:	d404      	bmi.n	8006dd6 <_fflush_r+0x32>
 8006dcc:	0599      	lsls	r1, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_fflush_r+0x32>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f7fe fb1c 	bl	800540e <__retarget_lock_acquire_recursive>
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	4621      	mov	r1, r4
 8006dda:	f7ff ff61 	bl	8006ca0 <__sflush_r>
 8006dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006de0:	4605      	mov	r5, r0
 8006de2:	07da      	lsls	r2, r3, #31
 8006de4:	d4e4      	bmi.n	8006db0 <_fflush_r+0xc>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	059b      	lsls	r3, r3, #22
 8006dea:	d4e1      	bmi.n	8006db0 <_fflush_r+0xc>
 8006dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dee:	f7fe fb0f 	bl	8005410 <__retarget_lock_release_recursive>
 8006df2:	e7dd      	b.n	8006db0 <_fflush_r+0xc>

08006df4 <memmove>:
 8006df4:	4288      	cmp	r0, r1
 8006df6:	b510      	push	{r4, lr}
 8006df8:	eb01 0402 	add.w	r4, r1, r2
 8006dfc:	d902      	bls.n	8006e04 <memmove+0x10>
 8006dfe:	4284      	cmp	r4, r0
 8006e00:	4623      	mov	r3, r4
 8006e02:	d807      	bhi.n	8006e14 <memmove+0x20>
 8006e04:	1e43      	subs	r3, r0, #1
 8006e06:	42a1      	cmp	r1, r4
 8006e08:	d008      	beq.n	8006e1c <memmove+0x28>
 8006e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e12:	e7f8      	b.n	8006e06 <memmove+0x12>
 8006e14:	4601      	mov	r1, r0
 8006e16:	4402      	add	r2, r0
 8006e18:	428a      	cmp	r2, r1
 8006e1a:	d100      	bne.n	8006e1e <memmove+0x2a>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e26:	e7f7      	b.n	8006e18 <memmove+0x24>

08006e28 <_sbrk_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4d05      	ldr	r5, [pc, #20]	; (8006e44 <_sbrk_r+0x1c>)
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	f7fb f804 	bl	8001e40 <_sbrk>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_sbrk_r+0x1a>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_sbrk_r+0x1a>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	200004ec 	.word	0x200004ec

08006e48 <memcpy>:
 8006e48:	440a      	add	r2, r1
 8006e4a:	4291      	cmp	r1, r2
 8006e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e50:	d100      	bne.n	8006e54 <memcpy+0xc>
 8006e52:	4770      	bx	lr
 8006e54:	b510      	push	{r4, lr}
 8006e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e60:	d1f9      	bne.n	8006e56 <memcpy+0xe>
 8006e62:	bd10      	pop	{r4, pc}

08006e64 <__assert_func>:
 8006e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e66:	4614      	mov	r4, r2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <__assert_func+0x2c>)
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68d8      	ldr	r0, [r3, #12]
 8006e72:	b14c      	cbz	r4, 8006e88 <__assert_func+0x24>
 8006e74:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <__assert_func+0x30>)
 8006e76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e7a:	9100      	str	r1, [sp, #0]
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	4906      	ldr	r1, [pc, #24]	; (8006e98 <__assert_func+0x34>)
 8006e80:	f000 f870 	bl	8006f64 <fiprintf>
 8006e84:	f000 f880 	bl	8006f88 <abort>
 8006e88:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <__assert_func+0x38>)
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	e7f3      	b.n	8006e76 <__assert_func+0x12>
 8006e8e:	bf00      	nop
 8006e90:	20000078 	.word	0x20000078
 8006e94:	0800782f 	.word	0x0800782f
 8006e98:	0800783c 	.word	0x0800783c
 8006e9c:	0800786a 	.word	0x0800786a

08006ea0 <_calloc_r>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ea6:	b934      	cbnz	r4, 8006eb6 <_calloc_r+0x16>
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7ff f99d 	bl	80061e8 <_malloc_r>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	b928      	cbnz	r0, 8006ebe <_calloc_r+0x1e>
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	220c      	movs	r2, #12
 8006eb8:	2600      	movs	r6, #0
 8006eba:	6002      	str	r2, [r0, #0]
 8006ebc:	e7f9      	b.n	8006eb2 <_calloc_r+0x12>
 8006ebe:	462a      	mov	r2, r5
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f7fe fa26 	bl	8005312 <memset>
 8006ec6:	e7f4      	b.n	8006eb2 <_calloc_r+0x12>

08006ec8 <__ascii_mbtowc>:
 8006ec8:	b082      	sub	sp, #8
 8006eca:	b901      	cbnz	r1, 8006ece <__ascii_mbtowc+0x6>
 8006ecc:	a901      	add	r1, sp, #4
 8006ece:	b142      	cbz	r2, 8006ee2 <__ascii_mbtowc+0x1a>
 8006ed0:	b14b      	cbz	r3, 8006ee6 <__ascii_mbtowc+0x1e>
 8006ed2:	7813      	ldrb	r3, [r2, #0]
 8006ed4:	600b      	str	r3, [r1, #0]
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	1e10      	subs	r0, r2, #0
 8006eda:	bf18      	it	ne
 8006edc:	2001      	movne	r0, #1
 8006ede:	b002      	add	sp, #8
 8006ee0:	4770      	bx	lr
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	e7fb      	b.n	8006ede <__ascii_mbtowc+0x16>
 8006ee6:	f06f 0001 	mvn.w	r0, #1
 8006eea:	e7f8      	b.n	8006ede <__ascii_mbtowc+0x16>

08006eec <_realloc_r>:
 8006eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	460e      	mov	r6, r1
 8006ef6:	b921      	cbnz	r1, 8006f02 <_realloc_r+0x16>
 8006ef8:	4611      	mov	r1, r2
 8006efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efe:	f7ff b973 	b.w	80061e8 <_malloc_r>
 8006f02:	b92a      	cbnz	r2, 8006f10 <_realloc_r+0x24>
 8006f04:	f7ff f900 	bl	8006108 <_free_r>
 8006f08:	4625      	mov	r5, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	f000 f841 	bl	8006f96 <_malloc_usable_size_r>
 8006f14:	4284      	cmp	r4, r0
 8006f16:	4607      	mov	r7, r0
 8006f18:	d802      	bhi.n	8006f20 <_realloc_r+0x34>
 8006f1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f1e:	d812      	bhi.n	8006f46 <_realloc_r+0x5a>
 8006f20:	4621      	mov	r1, r4
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7ff f960 	bl	80061e8 <_malloc_r>
 8006f28:	4605      	mov	r5, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d0ed      	beq.n	8006f0a <_realloc_r+0x1e>
 8006f2e:	42bc      	cmp	r4, r7
 8006f30:	4622      	mov	r2, r4
 8006f32:	4631      	mov	r1, r6
 8006f34:	bf28      	it	cs
 8006f36:	463a      	movcs	r2, r7
 8006f38:	f7ff ff86 	bl	8006e48 <memcpy>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff f8e2 	bl	8006108 <_free_r>
 8006f44:	e7e1      	b.n	8006f0a <_realloc_r+0x1e>
 8006f46:	4635      	mov	r5, r6
 8006f48:	e7df      	b.n	8006f0a <_realloc_r+0x1e>

08006f4a <__ascii_wctomb>:
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	b141      	cbz	r1, 8006f62 <__ascii_wctomb+0x18>
 8006f50:	2aff      	cmp	r2, #255	; 0xff
 8006f52:	d904      	bls.n	8006f5e <__ascii_wctomb+0x14>
 8006f54:	228a      	movs	r2, #138	; 0x8a
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	4770      	bx	lr
 8006f5e:	2001      	movs	r0, #1
 8006f60:	700a      	strb	r2, [r1, #0]
 8006f62:	4770      	bx	lr

08006f64 <fiprintf>:
 8006f64:	b40e      	push	{r1, r2, r3}
 8006f66:	b503      	push	{r0, r1, lr}
 8006f68:	4601      	mov	r1, r0
 8006f6a:	ab03      	add	r3, sp, #12
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <fiprintf+0x20>)
 8006f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f72:	6800      	ldr	r0, [r0, #0]
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	f000 f83d 	bl	8006ff4 <_vfiprintf_r>
 8006f7a:	b002      	add	sp, #8
 8006f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f80:	b003      	add	sp, #12
 8006f82:	4770      	bx	lr
 8006f84:	20000078 	.word	0x20000078

08006f88 <abort>:
 8006f88:	2006      	movs	r0, #6
 8006f8a:	b508      	push	{r3, lr}
 8006f8c:	f000 fa0a 	bl	80073a4 <raise>
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fa fee1 	bl	8001d58 <_exit>

08006f96 <_malloc_usable_size_r>:
 8006f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f9a:	1f18      	subs	r0, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfbc      	itt	lt
 8006fa0:	580b      	ldrlt	r3, [r1, r0]
 8006fa2:	18c0      	addlt	r0, r0, r3
 8006fa4:	4770      	bx	lr

08006fa6 <__sfputc_r>:
 8006fa6:	6893      	ldr	r3, [r2, #8]
 8006fa8:	b410      	push	{r4}
 8006faa:	3b01      	subs	r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	6093      	str	r3, [r2, #8]
 8006fb0:	da07      	bge.n	8006fc2 <__sfputc_r+0x1c>
 8006fb2:	6994      	ldr	r4, [r2, #24]
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	db01      	blt.n	8006fbc <__sfputc_r+0x16>
 8006fb8:	290a      	cmp	r1, #10
 8006fba:	d102      	bne.n	8006fc2 <__sfputc_r+0x1c>
 8006fbc:	bc10      	pop	{r4}
 8006fbe:	f000 b933 	b.w	8007228 <__swbuf_r>
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	1c58      	adds	r0, r3, #1
 8006fc6:	6010      	str	r0, [r2, #0]
 8006fc8:	7019      	strb	r1, [r3, #0]
 8006fca:	4608      	mov	r0, r1
 8006fcc:	bc10      	pop	{r4}
 8006fce:	4770      	bx	lr

08006fd0 <__sfputs_r>:
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460f      	mov	r7, r1
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	18d5      	adds	r5, r2, r3
 8006fda:	42ac      	cmp	r4, r5
 8006fdc:	d101      	bne.n	8006fe2 <__sfputs_r+0x12>
 8006fde:	2000      	movs	r0, #0
 8006fe0:	e007      	b.n	8006ff2 <__sfputs_r+0x22>
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fea:	f7ff ffdc 	bl	8006fa6 <__sfputc_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d1f3      	bne.n	8006fda <__sfputs_r+0xa>
 8006ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ff4 <_vfiprintf_r>:
 8006ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff8:	460d      	mov	r5, r1
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	4606      	mov	r6, r0
 8007000:	b09d      	sub	sp, #116	; 0x74
 8007002:	b118      	cbz	r0, 800700c <_vfiprintf_r+0x18>
 8007004:	6a03      	ldr	r3, [r0, #32]
 8007006:	b90b      	cbnz	r3, 800700c <_vfiprintf_r+0x18>
 8007008:	f7fe f8ea 	bl	80051e0 <__sinit>
 800700c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800700e:	07d9      	lsls	r1, r3, #31
 8007010:	d405      	bmi.n	800701e <_vfiprintf_r+0x2a>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	059a      	lsls	r2, r3, #22
 8007016:	d402      	bmi.n	800701e <_vfiprintf_r+0x2a>
 8007018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701a:	f7fe f9f8 	bl	800540e <__retarget_lock_acquire_recursive>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	d501      	bpl.n	8007028 <_vfiprintf_r+0x34>
 8007024:	692b      	ldr	r3, [r5, #16]
 8007026:	b99b      	cbnz	r3, 8007050 <_vfiprintf_r+0x5c>
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f000 f93a 	bl	80072a4 <__swsetup_r>
 8007030:	b170      	cbz	r0, 8007050 <_vfiprintf_r+0x5c>
 8007032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007034:	07dc      	lsls	r4, r3, #31
 8007036:	d504      	bpl.n	8007042 <_vfiprintf_r+0x4e>
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	b01d      	add	sp, #116	; 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	89ab      	ldrh	r3, [r5, #12]
 8007044:	0598      	lsls	r0, r3, #22
 8007046:	d4f7      	bmi.n	8007038 <_vfiprintf_r+0x44>
 8007048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800704a:	f7fe f9e1 	bl	8005410 <__retarget_lock_release_recursive>
 800704e:	e7f3      	b.n	8007038 <_vfiprintf_r+0x44>
 8007050:	2300      	movs	r3, #0
 8007052:	9309      	str	r3, [sp, #36]	; 0x24
 8007054:	2320      	movs	r3, #32
 8007056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800705a:	2330      	movs	r3, #48	; 0x30
 800705c:	f04f 0901 	mov.w	r9, #1
 8007060:	f8cd 800c 	str.w	r8, [sp, #12]
 8007064:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007214 <_vfiprintf_r+0x220>
 8007068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800706c:	4623      	mov	r3, r4
 800706e:	469a      	mov	sl, r3
 8007070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007074:	b10a      	cbz	r2, 800707a <_vfiprintf_r+0x86>
 8007076:	2a25      	cmp	r2, #37	; 0x25
 8007078:	d1f9      	bne.n	800706e <_vfiprintf_r+0x7a>
 800707a:	ebba 0b04 	subs.w	fp, sl, r4
 800707e:	d00b      	beq.n	8007098 <_vfiprintf_r+0xa4>
 8007080:	465b      	mov	r3, fp
 8007082:	4622      	mov	r2, r4
 8007084:	4629      	mov	r1, r5
 8007086:	4630      	mov	r0, r6
 8007088:	f7ff ffa2 	bl	8006fd0 <__sfputs_r>
 800708c:	3001      	adds	r0, #1
 800708e:	f000 80a9 	beq.w	80071e4 <_vfiprintf_r+0x1f0>
 8007092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007094:	445a      	add	r2, fp
 8007096:	9209      	str	r2, [sp, #36]	; 0x24
 8007098:	f89a 3000 	ldrb.w	r3, [sl]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 80a1 	beq.w	80071e4 <_vfiprintf_r+0x1f0>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f04f 32ff 	mov.w	r2, #4294967295
 80070a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ac:	f10a 0a01 	add.w	sl, sl, #1
 80070b0:	9304      	str	r3, [sp, #16]
 80070b2:	9307      	str	r3, [sp, #28]
 80070b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070b8:	931a      	str	r3, [sp, #104]	; 0x68
 80070ba:	4654      	mov	r4, sl
 80070bc:	2205      	movs	r2, #5
 80070be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c2:	4854      	ldr	r0, [pc, #336]	; (8007214 <_vfiprintf_r+0x220>)
 80070c4:	f7fe f9a5 	bl	8005412 <memchr>
 80070c8:	9a04      	ldr	r2, [sp, #16]
 80070ca:	b9d8      	cbnz	r0, 8007104 <_vfiprintf_r+0x110>
 80070cc:	06d1      	lsls	r1, r2, #27
 80070ce:	bf44      	itt	mi
 80070d0:	2320      	movmi	r3, #32
 80070d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d6:	0713      	lsls	r3, r2, #28
 80070d8:	bf44      	itt	mi
 80070da:	232b      	movmi	r3, #43	; 0x2b
 80070dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e0:	f89a 3000 	ldrb.w	r3, [sl]
 80070e4:	2b2a      	cmp	r3, #42	; 0x2a
 80070e6:	d015      	beq.n	8007114 <_vfiprintf_r+0x120>
 80070e8:	4654      	mov	r4, sl
 80070ea:	2000      	movs	r0, #0
 80070ec:	f04f 0c0a 	mov.w	ip, #10
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	4621      	mov	r1, r4
 80070f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070f8:	3b30      	subs	r3, #48	; 0x30
 80070fa:	2b09      	cmp	r3, #9
 80070fc:	d94d      	bls.n	800719a <_vfiprintf_r+0x1a6>
 80070fe:	b1b0      	cbz	r0, 800712e <_vfiprintf_r+0x13a>
 8007100:	9207      	str	r2, [sp, #28]
 8007102:	e014      	b.n	800712e <_vfiprintf_r+0x13a>
 8007104:	eba0 0308 	sub.w	r3, r0, r8
 8007108:	fa09 f303 	lsl.w	r3, r9, r3
 800710c:	4313      	orrs	r3, r2
 800710e:	46a2      	mov	sl, r4
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	e7d2      	b.n	80070ba <_vfiprintf_r+0xc6>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	1d19      	adds	r1, r3, #4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	9103      	str	r1, [sp, #12]
 800711c:	2b00      	cmp	r3, #0
 800711e:	bfbb      	ittet	lt
 8007120:	425b      	neglt	r3, r3
 8007122:	f042 0202 	orrlt.w	r2, r2, #2
 8007126:	9307      	strge	r3, [sp, #28]
 8007128:	9307      	strlt	r3, [sp, #28]
 800712a:	bfb8      	it	lt
 800712c:	9204      	strlt	r2, [sp, #16]
 800712e:	7823      	ldrb	r3, [r4, #0]
 8007130:	2b2e      	cmp	r3, #46	; 0x2e
 8007132:	d10c      	bne.n	800714e <_vfiprintf_r+0x15a>
 8007134:	7863      	ldrb	r3, [r4, #1]
 8007136:	2b2a      	cmp	r3, #42	; 0x2a
 8007138:	d134      	bne.n	80071a4 <_vfiprintf_r+0x1b0>
 800713a:	9b03      	ldr	r3, [sp, #12]
 800713c:	3402      	adds	r4, #2
 800713e:	1d1a      	adds	r2, r3, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	9203      	str	r2, [sp, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bfb8      	it	lt
 8007148:	f04f 33ff 	movlt.w	r3, #4294967295
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007218 <_vfiprintf_r+0x224>
 8007152:	2203      	movs	r2, #3
 8007154:	4650      	mov	r0, sl
 8007156:	7821      	ldrb	r1, [r4, #0]
 8007158:	f7fe f95b 	bl	8005412 <memchr>
 800715c:	b138      	cbz	r0, 800716e <_vfiprintf_r+0x17a>
 800715e:	2240      	movs	r2, #64	; 0x40
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	eba0 000a 	sub.w	r0, r0, sl
 8007166:	4082      	lsls	r2, r0
 8007168:	4313      	orrs	r3, r2
 800716a:	3401      	adds	r4, #1
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007172:	2206      	movs	r2, #6
 8007174:	4829      	ldr	r0, [pc, #164]	; (800721c <_vfiprintf_r+0x228>)
 8007176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800717a:	f7fe f94a 	bl	8005412 <memchr>
 800717e:	2800      	cmp	r0, #0
 8007180:	d03f      	beq.n	8007202 <_vfiprintf_r+0x20e>
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <_vfiprintf_r+0x22c>)
 8007184:	bb1b      	cbnz	r3, 80071ce <_vfiprintf_r+0x1da>
 8007186:	9b03      	ldr	r3, [sp, #12]
 8007188:	3307      	adds	r3, #7
 800718a:	f023 0307 	bic.w	r3, r3, #7
 800718e:	3308      	adds	r3, #8
 8007190:	9303      	str	r3, [sp, #12]
 8007192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007194:	443b      	add	r3, r7
 8007196:	9309      	str	r3, [sp, #36]	; 0x24
 8007198:	e768      	b.n	800706c <_vfiprintf_r+0x78>
 800719a:	460c      	mov	r4, r1
 800719c:	2001      	movs	r0, #1
 800719e:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a2:	e7a6      	b.n	80070f2 <_vfiprintf_r+0xfe>
 80071a4:	2300      	movs	r3, #0
 80071a6:	f04f 0c0a 	mov.w	ip, #10
 80071aa:	4619      	mov	r1, r3
 80071ac:	3401      	adds	r4, #1
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	4620      	mov	r0, r4
 80071b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071b6:	3a30      	subs	r2, #48	; 0x30
 80071b8:	2a09      	cmp	r2, #9
 80071ba:	d903      	bls.n	80071c4 <_vfiprintf_r+0x1d0>
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0c6      	beq.n	800714e <_vfiprintf_r+0x15a>
 80071c0:	9105      	str	r1, [sp, #20]
 80071c2:	e7c4      	b.n	800714e <_vfiprintf_r+0x15a>
 80071c4:	4604      	mov	r4, r0
 80071c6:	2301      	movs	r3, #1
 80071c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80071cc:	e7f0      	b.n	80071b0 <_vfiprintf_r+0x1bc>
 80071ce:	ab03      	add	r3, sp, #12
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	462a      	mov	r2, r5
 80071d4:	4630      	mov	r0, r6
 80071d6:	4b13      	ldr	r3, [pc, #76]	; (8007224 <_vfiprintf_r+0x230>)
 80071d8:	a904      	add	r1, sp, #16
 80071da:	f7fd fbb3 	bl	8004944 <_printf_float>
 80071de:	4607      	mov	r7, r0
 80071e0:	1c78      	adds	r0, r7, #1
 80071e2:	d1d6      	bne.n	8007192 <_vfiprintf_r+0x19e>
 80071e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071e6:	07d9      	lsls	r1, r3, #31
 80071e8:	d405      	bmi.n	80071f6 <_vfiprintf_r+0x202>
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	059a      	lsls	r2, r3, #22
 80071ee:	d402      	bmi.n	80071f6 <_vfiprintf_r+0x202>
 80071f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071f2:	f7fe f90d 	bl	8005410 <__retarget_lock_release_recursive>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	065b      	lsls	r3, r3, #25
 80071fa:	f53f af1d 	bmi.w	8007038 <_vfiprintf_r+0x44>
 80071fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007200:	e71c      	b.n	800703c <_vfiprintf_r+0x48>
 8007202:	ab03      	add	r3, sp, #12
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	462a      	mov	r2, r5
 8007208:	4630      	mov	r0, r6
 800720a:	4b06      	ldr	r3, [pc, #24]	; (8007224 <_vfiprintf_r+0x230>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	f7fd fe39 	bl	8004e84 <_printf_i>
 8007212:	e7e4      	b.n	80071de <_vfiprintf_r+0x1ea>
 8007214:	08007814 	.word	0x08007814
 8007218:	0800781a 	.word	0x0800781a
 800721c:	0800781e 	.word	0x0800781e
 8007220:	08004945 	.word	0x08004945
 8007224:	08006fd1 	.word	0x08006fd1

08007228 <__swbuf_r>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	460e      	mov	r6, r1
 800722c:	4614      	mov	r4, r2
 800722e:	4605      	mov	r5, r0
 8007230:	b118      	cbz	r0, 800723a <__swbuf_r+0x12>
 8007232:	6a03      	ldr	r3, [r0, #32]
 8007234:	b90b      	cbnz	r3, 800723a <__swbuf_r+0x12>
 8007236:	f7fd ffd3 	bl	80051e0 <__sinit>
 800723a:	69a3      	ldr	r3, [r4, #24]
 800723c:	60a3      	str	r3, [r4, #8]
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	071a      	lsls	r2, r3, #28
 8007242:	d525      	bpl.n	8007290 <__swbuf_r+0x68>
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	b31b      	cbz	r3, 8007290 <__swbuf_r+0x68>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	6922      	ldr	r2, [r4, #16]
 800724c:	b2f6      	uxtb	r6, r6
 800724e:	1a98      	subs	r0, r3, r2
 8007250:	6963      	ldr	r3, [r4, #20]
 8007252:	4637      	mov	r7, r6
 8007254:	4283      	cmp	r3, r0
 8007256:	dc04      	bgt.n	8007262 <__swbuf_r+0x3a>
 8007258:	4621      	mov	r1, r4
 800725a:	4628      	mov	r0, r5
 800725c:	f7ff fda2 	bl	8006da4 <_fflush_r>
 8007260:	b9e0      	cbnz	r0, 800729c <__swbuf_r+0x74>
 8007262:	68a3      	ldr	r3, [r4, #8]
 8007264:	3b01      	subs	r3, #1
 8007266:	60a3      	str	r3, [r4, #8]
 8007268:	6823      	ldr	r3, [r4, #0]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	701e      	strb	r6, [r3, #0]
 8007270:	6962      	ldr	r2, [r4, #20]
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	429a      	cmp	r2, r3
 8007276:	d004      	beq.n	8007282 <__swbuf_r+0x5a>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	07db      	lsls	r3, r3, #31
 800727c:	d506      	bpl.n	800728c <__swbuf_r+0x64>
 800727e:	2e0a      	cmp	r6, #10
 8007280:	d104      	bne.n	800728c <__swbuf_r+0x64>
 8007282:	4621      	mov	r1, r4
 8007284:	4628      	mov	r0, r5
 8007286:	f7ff fd8d 	bl	8006da4 <_fflush_r>
 800728a:	b938      	cbnz	r0, 800729c <__swbuf_r+0x74>
 800728c:	4638      	mov	r0, r7
 800728e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f806 	bl	80072a4 <__swsetup_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	d0d5      	beq.n	8007248 <__swbuf_r+0x20>
 800729c:	f04f 37ff 	mov.w	r7, #4294967295
 80072a0:	e7f4      	b.n	800728c <__swbuf_r+0x64>
	...

080072a4 <__swsetup_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <__swsetup_r+0xac>)
 80072a8:	4605      	mov	r5, r0
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	460c      	mov	r4, r1
 80072ae:	b118      	cbz	r0, 80072b8 <__swsetup_r+0x14>
 80072b0:	6a03      	ldr	r3, [r0, #32]
 80072b2:	b90b      	cbnz	r3, 80072b8 <__swsetup_r+0x14>
 80072b4:	f7fd ff94 	bl	80051e0 <__sinit>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072be:	0718      	lsls	r0, r3, #28
 80072c0:	d422      	bmi.n	8007308 <__swsetup_r+0x64>
 80072c2:	06d9      	lsls	r1, r3, #27
 80072c4:	d407      	bmi.n	80072d6 <__swsetup_r+0x32>
 80072c6:	2309      	movs	r3, #9
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072ce:	f04f 30ff 	mov.w	r0, #4294967295
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	e034      	b.n	8007340 <__swsetup_r+0x9c>
 80072d6:	0758      	lsls	r0, r3, #29
 80072d8:	d512      	bpl.n	8007300 <__swsetup_r+0x5c>
 80072da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072dc:	b141      	cbz	r1, 80072f0 <__swsetup_r+0x4c>
 80072de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d002      	beq.n	80072ec <__swsetup_r+0x48>
 80072e6:	4628      	mov	r0, r5
 80072e8:	f7fe ff0e 	bl	8006108 <_free_r>
 80072ec:	2300      	movs	r3, #0
 80072ee:	6363      	str	r3, [r4, #52]	; 0x34
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072f6:	81a3      	strh	r3, [r4, #12]
 80072f8:	2300      	movs	r3, #0
 80072fa:	6063      	str	r3, [r4, #4]
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	f043 0308 	orr.w	r3, r3, #8
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	b94b      	cbnz	r3, 8007320 <__swsetup_r+0x7c>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007316:	d003      	beq.n	8007320 <__swsetup_r+0x7c>
 8007318:	4621      	mov	r1, r4
 800731a:	4628      	mov	r0, r5
 800731c:	f000 f883 	bl	8007426 <__smakebuf_r>
 8007320:	89a0      	ldrh	r0, [r4, #12]
 8007322:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007326:	f010 0301 	ands.w	r3, r0, #1
 800732a:	d00a      	beq.n	8007342 <__swsetup_r+0x9e>
 800732c:	2300      	movs	r3, #0
 800732e:	60a3      	str	r3, [r4, #8]
 8007330:	6963      	ldr	r3, [r4, #20]
 8007332:	425b      	negs	r3, r3
 8007334:	61a3      	str	r3, [r4, #24]
 8007336:	6923      	ldr	r3, [r4, #16]
 8007338:	b943      	cbnz	r3, 800734c <__swsetup_r+0xa8>
 800733a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800733e:	d1c4      	bne.n	80072ca <__swsetup_r+0x26>
 8007340:	bd38      	pop	{r3, r4, r5, pc}
 8007342:	0781      	lsls	r1, r0, #30
 8007344:	bf58      	it	pl
 8007346:	6963      	ldrpl	r3, [r4, #20]
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	e7f4      	b.n	8007336 <__swsetup_r+0x92>
 800734c:	2000      	movs	r0, #0
 800734e:	e7f7      	b.n	8007340 <__swsetup_r+0x9c>
 8007350:	20000078 	.word	0x20000078

08007354 <_raise_r>:
 8007354:	291f      	cmp	r1, #31
 8007356:	b538      	push	{r3, r4, r5, lr}
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	d904      	bls.n	8007368 <_raise_r+0x14>
 800735e:	2316      	movs	r3, #22
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	f04f 30ff 	mov.w	r0, #4294967295
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800736a:	b112      	cbz	r2, 8007372 <_raise_r+0x1e>
 800736c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007370:	b94b      	cbnz	r3, 8007386 <_raise_r+0x32>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f830 	bl	80073d8 <_getpid_r>
 8007378:	462a      	mov	r2, r5
 800737a:	4601      	mov	r1, r0
 800737c:	4620      	mov	r0, r4
 800737e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007382:	f000 b817 	b.w	80073b4 <_kill_r>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d00a      	beq.n	80073a0 <_raise_r+0x4c>
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	d103      	bne.n	8007396 <_raise_r+0x42>
 800738e:	2316      	movs	r3, #22
 8007390:	6003      	str	r3, [r0, #0]
 8007392:	2001      	movs	r0, #1
 8007394:	e7e7      	b.n	8007366 <_raise_r+0x12>
 8007396:	2400      	movs	r4, #0
 8007398:	4628      	mov	r0, r5
 800739a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800739e:	4798      	blx	r3
 80073a0:	2000      	movs	r0, #0
 80073a2:	e7e0      	b.n	8007366 <_raise_r+0x12>

080073a4 <raise>:
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <raise+0xc>)
 80073a6:	4601      	mov	r1, r0
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f7ff bfd3 	b.w	8007354 <_raise_r>
 80073ae:	bf00      	nop
 80073b0:	20000078 	.word	0x20000078

080073b4 <_kill_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	2300      	movs	r3, #0
 80073b8:	4d06      	ldr	r5, [pc, #24]	; (80073d4 <_kill_r+0x20>)
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	602b      	str	r3, [r5, #0]
 80073c2:	f7fa fcb9 	bl	8001d38 <_kill>
 80073c6:	1c43      	adds	r3, r0, #1
 80073c8:	d102      	bne.n	80073d0 <_kill_r+0x1c>
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	b103      	cbz	r3, 80073d0 <_kill_r+0x1c>
 80073ce:	6023      	str	r3, [r4, #0]
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
 80073d2:	bf00      	nop
 80073d4:	200004ec 	.word	0x200004ec

080073d8 <_getpid_r>:
 80073d8:	f7fa bca7 	b.w	8001d2a <_getpid>

080073dc <__swhatbuf_r>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	460c      	mov	r4, r1
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	4615      	mov	r5, r2
 80073e6:	2900      	cmp	r1, #0
 80073e8:	461e      	mov	r6, r3
 80073ea:	b096      	sub	sp, #88	; 0x58
 80073ec:	da0c      	bge.n	8007408 <__swhatbuf_r+0x2c>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	2100      	movs	r1, #0
 80073f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80073f6:	bf0c      	ite	eq
 80073f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80073fc:	2340      	movne	r3, #64	; 0x40
 80073fe:	2000      	movs	r0, #0
 8007400:	6031      	str	r1, [r6, #0]
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	b016      	add	sp, #88	; 0x58
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	466a      	mov	r2, sp
 800740a:	f000 f849 	bl	80074a0 <_fstat_r>
 800740e:	2800      	cmp	r0, #0
 8007410:	dbed      	blt.n	80073ee <__swhatbuf_r+0x12>
 8007412:	9901      	ldr	r1, [sp, #4]
 8007414:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007418:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800741c:	4259      	negs	r1, r3
 800741e:	4159      	adcs	r1, r3
 8007420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007424:	e7eb      	b.n	80073fe <__swhatbuf_r+0x22>

08007426 <__smakebuf_r>:
 8007426:	898b      	ldrh	r3, [r1, #12]
 8007428:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800742a:	079d      	lsls	r5, r3, #30
 800742c:	4606      	mov	r6, r0
 800742e:	460c      	mov	r4, r1
 8007430:	d507      	bpl.n	8007442 <__smakebuf_r+0x1c>
 8007432:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	2301      	movs	r3, #1
 800743c:	6163      	str	r3, [r4, #20]
 800743e:	b002      	add	sp, #8
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	466a      	mov	r2, sp
 8007444:	ab01      	add	r3, sp, #4
 8007446:	f7ff ffc9 	bl	80073dc <__swhatbuf_r>
 800744a:	9900      	ldr	r1, [sp, #0]
 800744c:	4605      	mov	r5, r0
 800744e:	4630      	mov	r0, r6
 8007450:	f7fe feca 	bl	80061e8 <_malloc_r>
 8007454:	b948      	cbnz	r0, 800746a <__smakebuf_r+0x44>
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	059a      	lsls	r2, r3, #22
 800745c:	d4ef      	bmi.n	800743e <__smakebuf_r+0x18>
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	f043 0302 	orr.w	r3, r3, #2
 8007466:	81a3      	strh	r3, [r4, #12]
 8007468:	e7e3      	b.n	8007432 <__smakebuf_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	6020      	str	r0, [r4, #0]
 800746e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007472:	81a3      	strh	r3, [r4, #12]
 8007474:	9b00      	ldr	r3, [sp, #0]
 8007476:	6120      	str	r0, [r4, #16]
 8007478:	6163      	str	r3, [r4, #20]
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	b15b      	cbz	r3, 8007496 <__smakebuf_r+0x70>
 800747e:	4630      	mov	r0, r6
 8007480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007484:	f000 f81e 	bl	80074c4 <_isatty_r>
 8007488:	b128      	cbz	r0, 8007496 <__smakebuf_r+0x70>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	f023 0303 	bic.w	r3, r3, #3
 8007490:	f043 0301 	orr.w	r3, r3, #1
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	431d      	orrs	r5, r3
 800749a:	81a5      	strh	r5, [r4, #12]
 800749c:	e7cf      	b.n	800743e <__smakebuf_r+0x18>
	...

080074a0 <_fstat_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_fstat_r+0x20>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	f7fa fca1 	bl	8001df4 <_fstat>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <_fstat_r+0x1c>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b103      	cbz	r3, 80074bc <_fstat_r+0x1c>
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	200004ec 	.word	0x200004ec

080074c4 <_isatty_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	2300      	movs	r3, #0
 80074c8:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_isatty_r+0x1c>)
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fa fc9f 	bl	8001e12 <_isatty>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_isatty_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_isatty_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200004ec 	.word	0x200004ec

080074e4 <_init>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr

080074f0 <_fini>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	bf00      	nop
 80074f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f6:	bc08      	pop	{r3}
 80074f8:	469e      	mov	lr, r3
 80074fa:	4770      	bx	lr
